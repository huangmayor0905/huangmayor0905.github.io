<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【筆記】APCS 2022 年 6 月場</title>
    <url>/APCS-2022-01/</url>
    <content><![CDATA[<p>這是我第一次去考 APCS（誰叫你之前都忘記報），當天考觀念時肚子真的痛得要命，直到中午才去宣洩…我的考場在台北大學三峽校區，令我意外的是男女比沒有到很重，但是大佬倒是挺多的。考實作題時，不知道是不是緊張，就是一直在 debug…最後是寫到第三題寫了一點就結束了。我那天超孤單😢，我朋友給我請假…說他抽考沒讀，我也沒讀啊🤬。反正最後考了 4 / 3 還蠻理想的。</p>
<h2 id="數字遊戲易"><a class="markdownIt-Anchor" href="#數字遊戲易"></a> 數字遊戲（易）</h2>
<p>ZJ 連結：<span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWkzOTk=">https://zerojudge.tw/ShowProblem?problemid=i399<i class="fa fa-external-link-alt"></i></span></p>
<p>輸入：3 個 1 ~ 9 的數字</p>
<p>輸出：先輸出數值出現最多的次數，再輸出三個數，且去除重複，由大到小。</p>
<p>想法：既要去掉重複又要排序，我的第一想法就是使用 set。set 是一個容器，它具有資料的唯一性，也就是不可重複，且容器內也會排序，跟 map 一樣。第一筆輸出我會用 4 - set 長度，這樣恰好是重複的個數，再用反向迭代器輸出 set 容器即可。</p>
<p>實作：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> data[<span class="number">3</span>];</span><br><span class="line">    cin &gt;&gt; data[<span class="number">0</span>] &gt;&gt; data[<span class="number">1</span>] &gt;&gt; data[<span class="number">2</span>];</span><br><span class="line">    <span class="function">set&lt;<span class="type">int</span>&gt; <span class="title">myset</span><span class="params">(data, data + <span class="number">3</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="number">4</span> - myset.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = myset.<span class="built_in">rbegin</span>(); it != myset.<span class="built_in">rend</span>(); ++it) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; *it;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="字串解碼中"><a class="markdownIt-Anchor" href="#字串解碼中"></a> 字串解碼（中）</h2>
<p>想法：就…純粹的暴力解吧…，還有注意題目需求，這題要你解密，不是加密（我朋友不小心…）</p>
<p>實作：未更新（懶）</p>
]]></content>
      <tags>
        <tag>APCS</tag>
        <tag>筆記</tag>
      </tags>
  </entry>
  <entry>
    <title>APCS 2024 1 月場</title>
    <url>/APCS-2024-01/</url>
    <content><![CDATA[<h1 id="說明"><a class="markdownIt-Anchor" href="#說明"></a> 說明</h1>
<p>第 4 題還在研究~</p>
<h2 id="1-遊戲選角"><a class="markdownIt-Anchor" href="#1-遊戲選角"></a> 1. 遊戲選角</h2>
<details class="note default"><summary><p>展開程式碼</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">p</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> d;</span><br><span class="line">    <span class="type">int</span> ability;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(p a, p b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.ability &gt; b.ability;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ouo;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    p player[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; player[i].a &gt;&gt; player[i].d;</span><br><span class="line">        player[i].ability = player[i].a * player[i].a + player[i].d * player[i].d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(player, player + n, cmp);</span><br><span class="line">    cout &lt;&lt; player[<span class="number">1</span>].a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; player[<span class="number">1</span>].d;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h2 id="2-蜜蜂觀察"><a class="markdownIt-Anchor" href="#2-蜜蜂觀察"></a> 2. 蜜蜂觀察</h2>
<details class="note default"><summary><p>展開程式碼</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m, n, k;</span><br><span class="line"><span class="type">int</span> amount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">    string arr[m];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> p_x = m - <span class="number">1</span>, p_y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> alpha[<span class="number">2</span>][<span class="number">26</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">0</span>; t &lt; k; t++) &#123;</span><br><span class="line">        <span class="type">int</span> d = <span class="number">-1</span>;</span><br><span class="line">        cin &gt;&gt; d;</span><br><span class="line">        <span class="type">int</span> d_x = <span class="number">0</span>, d_y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (d) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                d_x -= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                d_y += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                d_x += <span class="number">1</span>;</span><br><span class="line">                d_y += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                d_x += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                d_y -= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                d_x -= <span class="number">1</span>;</span><br><span class="line">                d_y -= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p_x + d_x &lt; m &amp;&amp; p_x + d_x &gt;= <span class="number">0</span> &amp;&amp; p_y + d_y &lt; n &amp;&amp; p_y + d_y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            p_x += d_x;</span><br><span class="line">            p_y += d_y;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; arr[p_x][p_y];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr[p_x][p_y] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; arr[p_x][p_y] &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">            alpha[<span class="number">0</span>][arr[p_x][p_y] - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[p_x][p_y] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; arr[p_x][p_y] &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">            alpha[<span class="number">1</span>][arr[p_x][p_y] - <span class="string">&#x27;A&#x27;</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (alpha[i][j] == <span class="literal">true</span>) amount++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">         &lt;&lt; amount;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>
<h2 id="3-邏輯電路"><a class="markdownIt-Anchor" href="#3-邏輯電路"></a> 3. 邏輯電路</h2>
<p>參考 <span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQFlvdXRvbmcwODI2L3pqX205OTM=">@Youtong0826<i class="fa fa-external-link-alt"></i></span> 的思路，原本只有做 DFS 的部分但會超時，所以改成用 DP 紀錄已經跑過的邏輯閘。</p>
<details class="note default"><summary><p>展開程式碼</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> type;  <span class="comment">// 1: AND, 2: OR, 3: XOR, 4: NOT</span></span><br><span class="line">    <span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> p, q, r, m;</span><br><span class="line">vector&lt;node&gt; vc;</span><br><span class="line">vector&lt;<span class="type">bool</span>&gt; visited;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; g;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; dp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pair&lt;int, int&gt; = &#123;result, delay&#125;</span></span><br><span class="line"><span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">dfs</span><span class="params">(<span class="type">int</span> idx)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (idx &lt;= p) &#123;</span><br><span class="line">        visited[idx] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> dp[idx] = &#123;vc[idx].result, <span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 輸出節點必只有一個輸入端</span></span><br><span class="line">    <span class="keyword">if</span> (idx &gt; p + q &amp;&amp; idx &lt;= p + q + r) <span class="keyword">return</span> <span class="built_in">dfs</span>(g[idx][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (visited[idx]) <span class="keyword">return</span> dp[idx];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do</span></span><br><span class="line">    visited[idx] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">auto</span> a = <span class="built_in">dfs</span>(g[idx][<span class="number">0</span>]);  <span class="comment">// 先取得第一個輸入端</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (vc[idx].type == <span class="number">4</span>) <span class="keyword">return</span> dp[idx] = &#123;!a.first, a.second + <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> b = <span class="built_in">dfs</span>(g[idx][<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (vc[idx].type == <span class="number">1</span>) <span class="keyword">return</span> dp[idx] = &#123;(a.first &amp;&amp; b.first), <span class="built_in">max</span>(a.second, b.second) + <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (vc[idx].type == <span class="number">2</span>) <span class="keyword">return</span> dp[idx] = &#123;(a.first || b.first), <span class="built_in">max</span>(a.second, b.second) + <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (vc[idx].type == <span class="number">3</span>) <span class="keyword">return</span> dp[idx] = &#123;(a.first != b.first), <span class="built_in">max</span>(a.second, b.second) + <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;vc[idx].result, <span class="number">0</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ouo;</span><br><span class="line">    cin &gt;&gt; p &gt;&gt; q &gt;&gt; r &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    vc.<span class="built_in">resize</span>(p + q + r + <span class="number">1</span>);</span><br><span class="line">    visited.<span class="built_in">assign</span>(p + q + r + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">    g.<span class="built_in">assign</span>(p + q + r + <span class="number">1</span>, &#123;&#125;);</span><br><span class="line">    dp.<span class="built_in">resize</span>(p + q + r + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= p + q; i++) &#123;</span><br><span class="line">        vc[i].result = <span class="number">0</span>;</span><br><span class="line">        vc[i].type = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// in</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= p; i++) &#123;</span><br><span class="line">        cin &gt;&gt; vc[i].result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// logic</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span><br><span class="line">        cin &gt;&gt; vc[p + i].type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// graph</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        g[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> delay = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = p + q + <span class="number">1</span>; i &lt;= p + q + r; i++) &#123;</span><br><span class="line">        <span class="keyword">auto</span> f = <span class="built_in">dfs</span>(i);</span><br><span class="line">        ans.<span class="built_in">push_back</span>(f.first);</span><br><span class="line">        delay = <span class="built_in">max</span>(delay, f.second);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; delay &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : ans) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>
]]></content>
      <categories>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>【經驗】逢甲資工系 APCS 組面試經驗</title>
    <url>/FCU-CSIE-APCS-interview/</url>
    <content><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1>
<p>其實面試不用緊張，照你們平常跟老師的講話方式就好。目前我面的學校，教授們都很 Nice，我本人就慢熟，但我的高中有模擬面試，有模擬面試就去試試看，體驗一下那種感覺，然後說實話不用太壓抑自己，把想說的說出來即可，教授特喜歡這種有想法的人。</p>
<span id="more"></span>
<h1 id="面試過程"><a class="markdownIt-Anchor" href="#面試過程"></a> 面試過程</h1>
<p>以下是大致過程，可能有漏問題，但是應該不會影響到整體面試內容。</p>
<p>三對一個人面試，從左至右，教授編號為（A）到（C）用英文字母表示表示</p>
<hr />
<ol>
<li>B 教授：請自我介紹 1 分鐘（自介後就輕鬆聊）</li>
</ol>
<hr />
<ol start="2">
<li>B 教授：我從學習歷程問我你有一點很特別，就是可以選了一個 C 語言，你可以說一下為什麼選擇 C 嗎？</li>
</ol>
<ul>
<li>我：因為 APCS 的觀念題是用 C 語言，我希望可以藉由多元選修來增強 APCS 的觀念題。</li>
<li>B 教授：那有沒有覺得 C 比較難寫？</li>
<li>我：有，但主要是 C 跟 C++ 的寫法都蠻像的，只差在輸出寫法不同。</li>
<li>全部：然後就大家就 Blablabla 嘻嘻哈哈</li>
</ul>
<hr />
<ol start="3">
<li>C 教授：可以說明一下工程應用這門課在幹嘛嗎？</li>
</ol>
<ul>
<li>我：（我沒聽清楚）可以請教授在問一次問題嗎</li>
<li>C 教授：就是你有一個工程課在幹嘛，因為你拿了 99 分，可以說明一下嗎？</li>
<li>我：（前面有點吱吱嗚嗚然後才想到 -_-）喔！在那門課主要是在畫草圖，學習如何建模，然後</li>
<li>A or B 教授：那是用什麼軟體呢？</li>
<li>我：是用網頁上的 Onshape</li>
<li>教授：嗯~（各教授點頭）</li>
</ul>
<hr />
<ol start="4">
<li>B 教授：從這邊的資料，我看到你都是填 APCS 組想元智、淡江等等，想問你如果都上的話你會想進哪間？</li>
</ol>
<ul>
<li>我：我會選擇逢甲，因為在 SITCON 計算機年會中，我有看到逢甲學長在上面演講，也想加入逢甲的黑客社學習以及交流技術。</li>
<li>B 教授：那那入取你的時候，其他的學校就不用考慮了</li>
<li>教授：依舊嘻嘻哈哈</li>
</ul>
<hr />
<ol start="5">
<li>A 教授：那你有什麼想問的問題嗎？</li>
</ol>
<ul>
<li>我：因為我希望可以成為網頁工程師，目前只接觸過 HTML、CSS 和 JavaScript，想問教授我可以往哪個方面學習？</li>
<li>A 教授：其實如果會寫網頁的話，就要注意資安，要確保你的網頁是沒有漏洞的，BlaBlaBla</li>
<li>C 教授：還要看你的網頁的內容阿，架構阿等等等，BlaBlaBla。</li>
</ul>
<hr />
<ol start="6">
<li>A 教授：那還有什麼問題嗎？</li>
</ol>
<ul>
<li>我：嗯…沒有了</li>
<li>B 教授：好，那就到這邊吧，可以請同學出去了。</li>
<li>我：嗯好，謝謝教授們。（走出會議廳點頭示意並關門）</li>
</ul>
]]></content>
      <tags>
        <tag>逢甲</tag>
        <tag>資工</tag>
      </tags>
  </entry>
  <entry>
    <title>【心得】少有人走的路：心智成熟的旅程</title>
    <url>/The-Road-Less-Traveled/</url>
    <content><![CDATA[<p>這本書在講的是自律、愛、心智成長、信仰、恩典等各個問題。主要在於心智的成長</p>
<h3 id="自律"><a class="markdownIt-Anchor" href="#自律"></a> 自律</h3>
<p>作者要求我們要做到 推遲滿足感、承擔責任、忠於事實、保持平衡 並細心理解其中道理。</p>
<p>我們其實早已得知何為推遲滿足感，又或稱延遲享受。最早可推至小時候，那時的我們總能聽到大人說：「去寫完功課再去玩手機」「完成家事後，才能看電視」「被完單字才能睡覺」這都是先苦後樂的道理，而自律就是基於這個道理去執行的。我很常聽到：「要怎麼自律？」其實我也不清楚，我只知道，自律使人充滿幹勁，他會義無反顧的完成他的任務。自從我有了平板、手機的四年級起，我就開始每天玩著諸如此類的 3C 產品，甚至連電視也不跟爸媽搶著看了。說實話，這樣的行為，早已打破了自律。自律是從小就該培養的東西，而父母正是傳遞自律的途徑。在出生不到一歲嬰兒的意識裡，不存在爸媽的形象，只知道這兩個人會不斷的出現在自己眼中，然後供給自己生活所需。因此父母是我們一生的依賴，我們從小就在他們身上學到所有行為，包含吵架方式、打掃方式、溝通方式等處理事務的能力。所以自律也不例外，它是需要被培養的，它能使我們面對問題。</p>
<blockquote>
<p>解決人生問題的首要方案，乃是自律，缺少了這一環，你不可能解決任何麻煩和困難。局部的自律只能解決局部的問題，完整的自律才能解決所有的問題。<br />
《少有人走的路》Page 18</p>
</blockquote>
<p>而它關聯性較強的無非是爸媽的愛，爸媽的愛告訴我們：有他們在，我可以不怕前方恐懼，進而得到勇氣，因為我們知道我們是被愛的，所以不怕被拋棄、遺棄，充滿著安全感。這安全感能讓我們面對問題、正視問題。</p>
<p>倘若沒有了愛，那我們面對世界會變得恐懼、不敢面對，導致常常逃避問題，把問題把在一旁，時常提醒自己要解決它，但都是以不想弄、懶得弄、今天好累不想做、之後有時間再弄作為結尾。</p>
<blockquote>
<p>美國開國先哲本傑明．富蘭克林說過：「惟有痛苦才會帶來教益。」面對問題，聰明者不因害怕痛苦而選擇逃避，而是迎上前去，直至將其戰勝為止。<br />
《少有人走的路》Page 19</p>
</blockquote>
<p>作者還提到人生的意義是甚麼，也正如他所說：許多人應該都答不太出來。或許人生的意義就是遇到問題，然後解決問題，再遇到新的問題，繼續解決它，反覆無常，使我們意識裡得到了許多感悟並從問題中成長，或許這就是人生的意義吧。</p>
<p>而作者特別將沒辦法自律多推究給父母親。通常爸媽面對孩子的不斷詢問後的反應總是不耐煩的說：「你再吵，我就不要你了」這種威脅會不斷出現在孩子的回憶裡，不斷重演，也包括我的過去，爸媽的責怪、罵聲，總能讓我重回當下的陰影裡揮之不去。但幸虧於那些慘不忍睹的記憶，我告誡自己：我不要成為和自己父母一樣的大人。至此之後，我總是一個人在房間度過自己和自己相處的時光，作業、課本似乎一動也沒動，因為我腦中出現太多畫面，根本沒有機會去想我還有甚麼事情沒做，就算想起自己還有一堆課業要顧，但每每還是沒辦法有那動力去學習，不斷的困住自己。</p>
<blockquote>
<p>父母同樣是指揮官，其使命和管理企業一樣複雜。正像軍隊指揮官那樣，大多數父母面對孩子的問題束手無策，連續數月乃至數年都無任何舉措，只可一味拖延。<br />
《少有人走的路》Page 37</p>
</blockquote>
<p>我不怪罪於父母，他們的養育我感恩在心。若父母都不自律，我為甚麼還要與父母親計較，我若有能力自律，我大可不必大吵一架之後，委屈自己還打破家庭的平靜，說實話我不知道甚麼是錯甚麼是對，所謂的叛逆又是什麼，是我們的頂嘴還是與大人之間的爭吵，難道大人都是對的，我們都是錯的，或許並非如此。所以我再次告訴自己：要學會與自己和解，才能與家人和解，到現在我仍過意不去，明明是因為幫你抬瓶汽水，我覺得重所以才嘆口氣，你卻要說我：「你這甚麼態度！」現在才覺得我父親挺可笑的…未釐清事實真相，就血口噴人，我為何要受這委屈呢？我當時若有我現在的想法那有多好啊！我多恨我父親啊！所以即使爸媽沒有自律，我也要變的自律，才有辦法洗掉那些慘痛的經歷。這不是說大話，這位心理學作者接觸過的病人，即變成年了，也沒有能力自律，我同意它所說的。</p>
<p>所以作者希望我們能學會的四個要素</p>
<ol>
<li>推遲滿足感</li>
<li>承擔責任</li>
<li>忠於事實</li>
<li>保持平衡</li>
</ol>
<p>我也大都能理解了。</p>
]]></content>
      <tags>
        <tag>心得</tag>
      </tags>
  </entry>
  <entry>
    <title>TOI 練習賽 202404 新手組</title>
    <url>/TOIP-202404-beginner/</url>
    <content><![CDATA[<h1 id="說明"><a class="markdownIt-Anchor" href="#說明"></a> 說明</h1>
<p>這次 TOIP 只涉及到一維陣列，暴力解就行了。</p>
<h1 id="解題"><a class="markdownIt-Anchor" href="#解題"></a> 解題</h1>
<h2 id="1-電影院cinema"><a class="markdownIt-Anchor" href="#1-電影院cinema"></a> 1. 電影院（Cinema）</h2>
<details class="note default"><summary><p>展開程式碼</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> arr[n];</span><br><span class="line">    <span class="type">int</span> hr, min;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; hr &gt;&gt; min;</span><br><span class="line">        arr[i] = hr * <span class="number">60</span> + min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(arr, arr + n);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; hr &gt;&gt; min;</span><br><span class="line">    <span class="type">int</span> now = hr * <span class="number">60</span> + min;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt;= now + <span class="number">20</span>) &#123;</span><br><span class="line">            cout &lt;&lt; ((arr[i] / <span class="number">60</span> / <span class="number">10</span> == <span class="number">0</span>) ? <span class="string">&quot;0&quot;</span> : <span class="string">&quot;&quot;</span>) </span><br><span class="line">                 &lt;&lt; arr[i] / <span class="number">60</span> &lt;&lt; <span class="string">&quot; &quot;</span> </span><br><span class="line">                 &lt;&lt; ((arr[i] % <span class="number">60</span> / <span class="number">10</span> == <span class="number">0</span>) ? <span class="string">&quot;0&quot;</span> : <span class="string">&quot;&quot;</span>)</span><br><span class="line">                 &lt;&lt; arr[i] % <span class="number">60</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Too Late\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>
<h2 id="2-撲克poker"><a class="markdownIt-Anchor" href="#2-撲克poker"></a> 2. 撲克（Poker）</h2>
<details class="note default"><summary><p>展開程式碼</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, mx = <span class="number">-1</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">52</span> + <span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> tmp;</span><br><span class="line">        cin &gt;&gt; tmp;</span><br><span class="line">        arr[tmp]++;</span><br><span class="line">        mx = <span class="built_in">max</span>(mx, arr[tmp]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mn = INT_MAX;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">52</span>; i++) mn = <span class="built_in">min</span>(mn, arr[i]);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; mn &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; (mx - mn) * <span class="number">52</span> - (n - mn * <span class="number">52</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>
<h2 id="3-熱門商品commodity"><a class="markdownIt-Anchor" href="#3-熱門商品commodity"></a> 3. 熱門商品（Commodity）</h2>
<details class="note default"><summary><p>展開程式碼</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> k, n;</span><br><span class="line">    cin &gt;&gt; k &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> arr[k];</span><br><span class="line">    <span class="type">int</span> goods[<span class="number">1005</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">        goods[arr[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mx = <span class="number">0</span>, favorite = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (goods[arr[i]] &gt; mx) &#123;</span><br><span class="line">            mx = goods[arr[i]];</span><br><span class="line">            favorite = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> shop[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; shop[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mn = INT_MAX, flag = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> q = <span class="number">0</span>; q &lt; shop[i]; q++) &#123;</span><br><span class="line">            <span class="type">int</span> quetion;</span><br><span class="line">            cin &gt;&gt; quetion;</span><br><span class="line">            val += goods[quetion];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (val &lt; mn) &#123;</span><br><span class="line">            mn = val;</span><br><span class="line">            flag = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ans</span></span><br><span class="line">    cout &lt;&lt; favorite &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; flag + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>TOIP</category>
      </categories>
      <tags>
        <tag>TOI</tag>
        <tag>TOIP</tag>
        <tag>新手組</tag>
      </tags>
  </entry>
  <entry>
    <title>TOI 練習賽 202404 潛力組</title>
    <url>/TOIP-202404-pro/</url>
    <content><![CDATA[<h2 id="說明"><a class="markdownIt-Anchor" href="#說明"></a> 說明</h2>
<p>這次 TOIP 第一題考到了<a href="https://huangmayor0905.github.io/cs/algo/differential-evolution/">差分</a>的概念，並運用在二維陣列裡。第二、三題都在考 DP 的運用。</p>
<span id="more"></span>
<h2 id="解題"><a class="markdownIt-Anchor" href="#解題"></a> 解題</h2>
<h3 id="1-降雨量統計rainfall"><a class="markdownIt-Anchor" href="#1-降雨量統計rainfall"></a> 1. 降雨量統計（Rainfall）</h3>
<details class="note default"><summary><p>展開程式碼</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ouo;</span><br><span class="line">    <span class="type">int</span> r, c;</span><br><span class="line">    cin &gt;&gt; r &gt;&gt; c;</span><br><span class="line">    <span class="type">int</span> g[r + <span class="number">1</span>][c + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="built_in">sizeof</span>(g));</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 做差分陣列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) cin &gt;&gt; arr[j];</span><br><span class="line"></span><br><span class="line">        g[arr[<span class="number">0</span>]][arr[<span class="number">1</span>]] += arr[<span class="number">4</span>];</span><br><span class="line">        g[arr[<span class="number">0</span>]][arr[<span class="number">3</span>]] -= arr[<span class="number">4</span>];</span><br><span class="line">        g[arr[<span class="number">2</span>]][arr[<span class="number">1</span>]] -= arr[<span class="number">4</span>];</span><br><span class="line">        g[arr[<span class="number">2</span>]][arr[<span class="number">3</span>]] += arr[<span class="number">4</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先輸出第一行</span></span><br><span class="line">    <span class="type">int</span> presum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; c; i++) &#123;</span><br><span class="line">        presum += g[<span class="number">0</span>][i];</span><br><span class="line">        g[<span class="number">0</span>][i] = presum;</span><br><span class="line">        cout &lt;&lt; g[<span class="number">0</span>][i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 處理後續前綴</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; r; i++) &#123;</span><br><span class="line">        presum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; c; j++) &#123;</span><br><span class="line">            presum += g[i][j];</span><br><span class="line">            g[i][j] = presum + g[i - <span class="number">1</span>][j];</span><br><span class="line">            cout &lt;&lt; g[i][j] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>
<h3 id="2-切割板材plate"><a class="markdownIt-Anchor" href="#2-切割板材plate"></a> 2. 切割板材（Plate）</h3>
<p>尚未解題</p>
<h3 id="3-搭船渡河-boat"><a class="markdownIt-Anchor" href="#3-搭船渡河-boat"></a> 3. 搭船渡河 （Boat）</h3>
<p>尚未解題</p>
]]></content>
      <categories>
        <category>TOIP</category>
      </categories>
      <tags>
        <tag>TOI</tag>
        <tag>TOIP</tag>
        <tag>潛力組</tag>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title>作者使用的 C++ 編譯器</title>
    <url>/cpp-compiler/</url>
    <content><![CDATA[<h2 id="線上"><a class="markdownIt-Anchor" href="#線上"></a> 線上</h2>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9yZXBsaXQuY29tL34=">Repl.it<i class="fa fa-external-link-alt"></i></span><br />
<strong>優點</strong>：線上編譯，可以在不同地方不同電腦上寫 code ，可隨時新增不同程式語言的專案。打好的 code 可以直接複製網址給其他人（放心，其他人更改不了你的 code ）。<br />
<strong>缺點</strong>：帳號的存放大小有限，不過對方變性就已經不錯了。以及部分功能需付費。<em>雖不用按下你的 ctrl + s ，但是如果網站剛好卡住就沒辦法隨時存檔。 （作者曾經歷過…）</em></li>
</ol>
<h2 id="應用程式"><a class="markdownIt-Anchor" href="#應用程式"></a> 應用程式</h2>
<ol>
<li>
<p><span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v">Visual Studio Code<i class="fa fa-external-link-alt"></i></span><br />
<strong>優點</strong>：可自行下載延伸模組，自由度較高<br />
<strong>缺點</strong>：也許是作者還不夠理解，新手可能對這個有點難因為還有環境的配置，作者的同學也編譯不了 C++，不過作者本人有成功，但就是在這上面研究許久…</p>
</li>
<li>
<p><span class="exturl" data-url="aHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvbWluZ3ctdzY0L2ZpbGVzL21pbmd3LXc2NC9taW5ndy13NjQtcmVsZWFzZS8=">MinGW<i class="fa fa-external-link-alt"></i></span><br />
<strong>特點</strong>：提供一個可執行 gcc 程式開發環境，整合了許多 windows 下可運行的標頭檔案和檔案庫，為 c++ 的開發提供了良好基礎支援，他不是一種編輯器，是一個提供環境做編譯的程式，非常重要。</p>
</li>
<li>
<p><span class="exturl" data-url="aHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvb3J3ZWxsZGV2Y3BwLw==">Dev-C++<i class="fa fa-external-link-alt"></i></span><br />
<strong>特點</strong>：使用 MinGW32/gcc 編譯器，可高亮度語法顯示，以減少編輯錯誤。</p>
</li>
<li>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY29kZWJsb2Nrcy5vcmcvZG93bmxvYWRzL2JpbmFyaWVzLw==">Code Blocks<i class="fa fa-external-link-alt"></i></span><br />
<strong>特點</strong>：也是使用 MinGW 做編譯的，擴充性強大，也適合開發應用程式。</p>
</li>
</ol>
<h2 id="結語"><a class="markdownIt-Anchor" href="#結語"></a> 結語</h2>
<p>作者目前使用的是 <span class="exturl" data-url="aHR0cDovL1JlcGwuaXQ=">Repl.it<i class="fa fa-external-link-alt"></i></span> 和 VScode，其他編輯器我也只有在學校電腦上使用，所以還不知道他們的特性。線上的編譯器和延伸模組多到用不完的編輯器真的很好用，包括我撰寫的這篇文章也是用 VScode 編輯出來的，他的延伸模組之後也會出一篇來推薦幾個好用的，提供大家使用。</p>
]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>編譯器/編輯器</tag>
      </tags>
  </entry>
  <entry>
    <title>【測試】需密碼文章</title>
    <url>/hexo-encrypt-test/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="c5f962a59016e1a6ecfe828b27d27df2e5f89b624e75c40addf0dd3622642acb">bd25ed9264b080267271e137e33d0ce1276c06c30ad3349bc1fd0ac9ef1064dce1362436ca4a0a173a8501aa56c1212bbb76dd99a1a7ec98efdab7ba17bd4d9a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密碼是 test</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>【C++】 認識 Hello World</title>
    <url>/meeting-hello-world/</url>
    <content><![CDATA[<h1 id="第一個程式認識-hello-world"><a class="markdownIt-Anchor" href="#第一個程式認識-hello-world"></a> 第一個程式，認識 Hello world</h1>
<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2>
<p>說到程式語言，Hello World 想必是程式入門時最常見的詞，它是什麼時候出現的，那為甚麼會被廣泛流傳呢？</p>
<p>首先，大部分人認為是《C 程序設計語言》此書作者之一，Brian Kernighan 在 1973 年出版的《程式語言 B 教程導論》裡首次提到。以下是當時首次提到 Hello World 的程式碼：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">  extrn a,b,c;</span><br><span class="line">  <span class="title function_">putchar</span>(a); <span class="title function_">putchar</span>(b); <span class="title function_">putchar</span>(c); <span class="title function_">putchar</span>(<span class="string">&#x27;!*n&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">a <span class="string">&#x27;hell&#x27;</span>;</span><br><span class="line">b <span class="string">&#x27;o, w&#x27;</span>;</span><br><span class="line">c <span class="string">&#x27;orld&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>但不幸的是他受訪時，他無法準確的講述原因跟時間。「我只記得，我好像看過一幅漫畫，講述一枚雞蛋和一隻小雞的故事，在那副漫畫中，小雞說了一句：『Hello World』。」他是這樣說的。</p>
<p>結論，Hello World 的起源應該是 Brian Kernighan 小時候曾看過的漫畫。</p>
<hr />
<h2 id="用-c-實作吧"><a class="markdownIt-Anchor" href="#用-c-實作吧"></a> 用 C++ 實作吧！</h2>
<p>說了這小小的故事，其實 Hello World 也代表著程式的運行無礙，那我們也可以開始動手做看看 C++ 世界裡的 Hello World 啦！</p>
<ol>
<li>你可以使用 <span class="exturl" data-url="aHR0cHM6Ly9yZXBsaXQuY29tLw==">Repl<i class="fa fa-external-link-alt"></i></span> 線上的編譯器，註冊後，按下右上角的加號，在 Template 那一欄打上 C++，並選擇好 C++ 的環境模板。</li>
<li>在右邊 Title 欄打上這個程式專案的名稱，若是練習通常我會打上今天的日期，如：20220326，除非是特別的專案才會特別取名，如果不取名，你的專案會在左邊的側邊欄 My Repls 的 Unnamed。</li>
</ol>
<figure class="highlight cpp"><figcaption><span>程式範例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先我們可以觀察看看，C++ 有人麼特別之處？如：句尾的共同處、有大括弧、小括弧等。那作者我就開始一一介紹吧！</p>
<ol>
<li>
<p>標頭檔：程式裡 <code>#include &lt;iostream&gt;</code> 就像是工具箱，它可以叫出你想用的工具，在這裡，我們使用 <code>cout</code> ，所以每當我們使用輸出時，就會使用到這個 <code>&lt;iostream&gt;</code> 標頭檔。</p>
</li>
<li>
<p>命名空間： <code>using namespace std;</code> 叫做命名空間，它的用處就像是你在學校裡，可能會有同名的人，所以我們會叫「某班的」誰誰誰，這個「某班的」，就是我們的 std 。若我們不先在程式裡輸入這行，程式碼就要在 cout 前面多打 std:: ，這樣就會變得更複雜。所以為了方便，我們習慣在程式一開始就先打 <code>using namespace std;</code> 。簡單來說，工具也會被重複命名到，然而我們只需要用到其中一個，所以直接在程式上打 <code>using namespace std;</code> 可以免去不斷撰寫的麻煩。</p>
</li>
<li>
<p>main 函式：我們也可以說它是主程式，用來執行你撰寫的程式。我們會在一對大括號內撰寫。int 是變數型態，表整數（integer）之意，在函式前的變數型態與回傳值有關，如下兩行的 <code>return 0;</code> 。</p>
</li>
<li>
<p>輸出 cout：用來輸出箭頭後方箭頭後的字串、變數和值。</p>
</li>
<li>
<p>return 0：表示回傳值為 0，也就是程式正常結束，但現在的編譯器都會在編譯時偷偷幫你補上這行，不過！還是要多多保持多打這行的習慣會比較好。</p>
</li>
</ol>
<h2 id="參考資料"><a class="markdownIt-Anchor" href="#參考資料"></a> 參考資料：</h2>
<p><span class="exturl" data-url="aHR0cDovL2Jsb2cuZnVqaWppLmNvbS90aGUtaGlzdG9yeS1vZi1oZWxsby13b3JsZC8=">Hello World 程序的起源与历史<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>【筆記】前序式、中序式與後序式</title>
    <url>/infix-postfix/</url>
    <content><![CDATA[<h2 id="電腦怎麼進行四則運算"><a class="markdownIt-Anchor" href="#電腦怎麼進行四則運算"></a> 電腦怎麼進行四則運算？</h2>
<p>電腦其實很笨，所以計算機在做運算時，只會依你的命令順序做運算。</p>
<p>比如題目為 3 + 2 * 4</p>
<p>若照著順序按，得到的答案是 20。但以四則運算來說這很明顯已經錯了，答案應該為 11。</p>
<p>那前中後序的差別就是運算子的先後順序，可電腦有更好的方法進行四則運算，那就是後（前）序式。</p>
<p>後序式如：3 2 4 * +</p>
<p>數字在前，而運算子在後。在中序轉後序時，運算子會在過程中有比對先後順序，而非直接把運算式按順序放置後方。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">運算子 數字 數字  // 前序</span><br><span class="line">數字 運算子 數字  // 中序</span><br><span class="line">數字 數字 運算子  // 後序</span><br></pre></td></tr></table></figure>
<p>所以如果要讓電腦看得懂四則運算的規則必須要讓電腦知道每個符號的有先順序<br />
如：<br />
<code>*</code> <code>/</code> 大於 <code>+</code> <code>-</code><br />
<code>(</code> <code>)</code> 大於 <code>*</code> <code>/</code></p>
<h2 id="中序式轉後序式"><a class="markdownIt-Anchor" href="#中序式轉後序式"></a> 中序式轉後序式</h2>
<p>若遇到數字則直接輸出或放入字串，遇到運算子就判斷後放進 stack 裡。<br />
若 <code>stack.top()</code> 的運算子權重小於讀取的運算子，如：<code>+</code> <code>-</code> 小於 <code>*</code> <code>/</code> 直接 <code>stack.push(運算子)</code>，<br />
若 <code>stack.top()</code> 的運算子權重大於讀取的運算子，如：<code>*</code> <code>/</code> 大於 <code>+</code> <code>-</code> 則先輸出或放入字串 <code>stack.top()</code>，再 <code>stack.pop()</code>，最後才 <code>stack.push(運算子)</code>。<br />
若符號是 <code>(</code> 則直接放入，繼續進行程式直到遇到 <code>)</code>，才把 stack 到 <code>(</code> 裡的符號輸出或放入字串，記得最後也要把 <code>(</code> pop 掉。</p>
<table>
<thead>
<tr>
<th>中序式元素</th>
<th>stack</th>
<th>後序式</th>
</tr>
</thead>
<tbody>
<tr>
<td>(</td>
<td>(</td>
<td>無</td>
</tr>
<tr>
<td>3</td>
<td>(</td>
<td>3</td>
</tr>
<tr>
<td>+</td>
<td>(+</td>
<td>3</td>
</tr>
<tr>
<td>2</td>
<td>(+</td>
<td>32</td>
</tr>
<tr>
<td>)</td>
<td></td>
<td>32+</td>
</tr>
<tr>
<td>*</td>
<td>*</td>
<td>32+</td>
</tr>
<tr>
<td>(</td>
<td>*(</td>
<td>32+</td>
</tr>
<tr>
<td>4</td>
<td>*(</td>
<td>32+4</td>
</tr>
<tr>
<td>-</td>
<td>*(-</td>
<td>32+4</td>
</tr>
<tr>
<td>1</td>
<td>*(-</td>
<td>32+41</td>
</tr>
<tr>
<td>)</td>
<td>*</td>
<td>32+41-</td>
</tr>
<tr>
<td></td>
<td></td>
<td>32+41-*</td>
</tr>
</tbody>
</table>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">order</span><span class="params">(<span class="type">char</span> sy)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sy == <span class="string">&#x27;+&#x27;</span> || sy == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sy == <span class="string">&#x27;*&#x27;</span> || sy == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; str) &#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; symbol;   <span class="comment">// stack 放運算子</span></span><br><span class="line">        string postfix = <span class="string">&quot;&quot;</span>;  <span class="comment">// 後序式</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&#x27;(&#x27;</span>) &#123;  <span class="comment">// 符號處理</span></span><br><span class="line">                symbol.<span class="built_in">push</span>(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">&#x27;+&#x27;</span> || str[i] == <span class="string">&#x27;-&#x27;</span> || str[i] == <span class="string">&#x27;*&#x27;</span> || str[i] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (symbol.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    symbol.<span class="built_in">push</span>(str[i]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">int</span> a = <span class="built_in">order</span>(symbol.<span class="built_in">top</span>()), b = <span class="built_in">order</span>(str[i]);</span><br><span class="line">                    <span class="comment">// 若 a 是 *, b 是 -, 則權重大的先放進後序式</span></span><br><span class="line">                    <span class="keyword">while</span> (a &gt;= b) &#123;</span><br><span class="line">                        postfix.<span class="built_in">push_back</span>(symbol.<span class="built_in">top</span>());</span><br><span class="line">                        symbol.<span class="built_in">pop</span>();</span><br><span class="line">                        <span class="keyword">if</span> (symbol.<span class="built_in">empty</span>()) <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    symbol.<span class="built_in">push</span>(str[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (symbol.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                    postfix.<span class="built_in">push_back</span>(symbol.<span class="built_in">top</span>());</span><br><span class="line">                    symbol.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                symbol.<span class="built_in">pop</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 數字處裡</span></span><br><span class="line">                postfix.<span class="built_in">push_back</span>(str[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 將未拿出的符號提出</span></span><br><span class="line">        <span class="keyword">while</span> (!symbol.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            postfix.<span class="built_in">push_back</span>(symbol.<span class="built_in">top</span>());</span><br><span class="line">            symbol.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 後序式輸出</span></span><br><span class="line">        cout &lt;&lt; postfix &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>筆記</category>
      </categories>
      <tags>
        <tag>筆記</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Hexo 在 GitHub 架站吧</title>
    <url>/make-a-blog-with-hexo/</url>
    <content><![CDATA[<h1 id="blog-是什麼"><a class="markdownIt-Anchor" href="#blog-是什麼"></a> Blog 是什麼？</h1>
<blockquote>
<p>是一種線上日記型式的個人網站，藉由張貼文章、圖片或影片來記錄生活、抒發情感或分享資訊。部落格上的文章通常根據張貼時間，以倒序方式由新到舊排列。<br />
by <span class="exturl" data-url="aHR0cHM6Ly96aC5tLndpa2lwZWRpYS5vcmcvd2lraS8lRTclQjYlQjIlRTglQUElOEM=">維基百科<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h1 id="為何要寫-blog"><a class="markdownIt-Anchor" href="#為何要寫-blog"></a> 為何要寫 Blog？</h1>
<p>部落格可以為自己記錄成長軌跡，不只是日常稱活的趣事，也可以是科普文章，主題由自己策劃，選擇自己喜歡或擅長的領域，發布一篇文章，使更多人看到。別人既可以從文章中得到娛樂與知識，自己也可以得到寫作的提升，以及規劃文章的能力和選擇客群的能力。</p>
<h1 id="如何用-hexo-在-github-架站呢"><a class="markdownIt-Anchor" href="#如何用-hexo-在-github-架站呢"></a> 如何用 Hexo 在 GitHub 架站呢？</h1>
<h2 id="什麼是-hexo"><a class="markdownIt-Anchor" href="#什麼是-hexo"></a> 什麼是 Hexo？</h2>
<p>進入 <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLXR3Lw==">Hexo 官網<i class="fa fa-external-link-alt"></i></span> 後，中間的大字足以描述什麼是 Hexo。</p>
<blockquote>
<p>快速、簡單且強大的網誌框架<br />
by Hexo</p>
</blockquote>
<p>沒錯！它是一個可以幫你快速搭建部落格網頁的工具。</p>
<h2 id="什麼是-github"><a class="markdownIt-Anchor" href="#什麼是-github"></a> 什麼是 GitHub？</h2>
<p>GitHub 是一個商業網站，是目前全球最大的 Git Server。你可以在上面分享你的程式碼、結交相同志趣的朋友、貢獻自己的程式碼將一個專案做的越來越好。當然別人也可以給你回饋，有如一個程式碼的社群，而且上面的環境很乾淨。<br />
同時，這個網站也是開發者最好的履歷，因為做過的專案、寫過的 code、做了什麼貢獻、有什麼勳章，都可以一目瞭然。</p>
<p>Git 與 GitHub 差別在哪？</p>
<p>Git 是工具，GitHub 是網站。<br />
Git 是一個版本控制系統，簡單來說就是一個可以把檔案的狀態作為更新歷史記錄保存起來，<br />
而 GitHub 就是一個提供 Git Server 的網站平台。</p>
<p>所以現在就來用 Hexo 做做看自己的網站吧！</p>
<h2 id="創建-github-帳號-設置專案"><a class="markdownIt-Anchor" href="#創建-github-帳號-設置專案"></a> 創建 GitHub 帳號 + 設置專案</h2>
<p>進入 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLw==">GitHub 官網<i class="fa fa-external-link-alt"></i></span> 後，註冊 <code>Sign up</code> 並登入 <code>Sign in</code><br />
<img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/image.png" alt="" /></p>
<p>進到 GitHub 首頁應該長這樣<br />
<img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/github-homepage.png" alt="" /></p>
<p>右上角有個加號點下去之後，選擇 <code>New repository</code>，進入後的畫面如下<br />
<img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/new_repo.png" alt="" /></p>
<p>於 <code>Repository name</code> 那一欄填上 <code>使用者名稱.github.io</code>。忘記使用者名稱的話，其實就在左側一欄。<br />
<img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/new-repository.png" alt="" /></p>
<p>接著就按下綠色的創建鍵 <code>Create repository</code> 即可。</p>
<p>進入專案後，點擊 <code>setting</code> 選項。<br />
<img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/github-io-setting.png" alt="" /></p>
<p>並設置主題，後續會更改，可以不用考慮太多，選擇其一即可。<br />
<img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/github-io-theme.png" alt="" /><br />
<img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/choose-theme.png" alt="" /></p>
<p>你完成了你的網站啦！！！網址為：<code>https://使用者名稱.github.io/</code>，不過剛創建的網站可能要稍後才會顯示。</p>
<h2 id="選定好部落格的位置"><a class="markdownIt-Anchor" href="#選定好部落格的位置"></a> 選定好部落格的位置</h2>
<p>由於我們會存文章在電腦裡面，所以先選好位置。<br />
我的部落格位置是</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">D 槽</span><br><span class="line">└── Blog    // 直接新建一個資料夾放你的 Hexo 文件</span><br></pre></td></tr></table></figure>
<h2 id="hexo-登場"><a class="markdownIt-Anchor" href="#hexo-登場"></a> Hexo 登場！</h2>
<p>我們的主角是 Hexo，當然，也有其他的部落格工具可以使用，如：Hugo, Gatsby, Vuepress, Jekyll… 等。<br />
Hexo 的主題多，且擴充的外掛也很多，所以才使用它當我們的工具，但缺點是當文章足夠多時，上傳速度會明顯比 Hugo 慢很多（超多），不過看在主題好看的誘惑下，我還是選擇了 Hexo。<br />
接下來，來配置 Hexo 環境吧！</p>
<h3 id="前置安裝"><a class="markdownIt-Anchor" href="#前置安裝"></a> 前置安裝</h3>
<p>在使用 Hexo 之前，請先下載：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==">Node.js<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<p>我們選擇穩定的版本，Hexo 官方有提醒至少要大於 10.0 的版本，我們選左邊的 16.15.0，直接安裝即可。<br />
<img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/node-download.png" alt="" /></p>
<ol start="2">
<li><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS8=">Git<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<p>也是直接安裝即可。<br />
<img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/git-download.png" alt="" /></p>
<ol start="3">
<li><span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v">Visual Studio Code<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<p>這是一個具有很多外掛的文字編輯器，一樣也是直接安裝即可。<br />
<img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/vscode-download.png" alt="" /></p>
<h3 id="初始設置"><a class="markdownIt-Anchor" href="#初始設置"></a> 初始設置</h3>
<p>接著我們來當駭客（誤）<br />
我們開啟 <code>Blog</code> 位置的終端機。輸入 cmd<br />
<img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/hexo-blog.png" alt="" /></p>
<p>在 cmd 裡輸入下面指令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<p>等待下載後，輸入 <code>hexo -v</code> 也就是 <code>hexo version</code> （想也知道你們會選 hexo -v）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>
<p>有出現各項版本就確定安裝好了！<br />
<img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/hexo-v.png" alt="" /></p>
<p>接著配置 Hexo 相關初始套件，輸入下方指令。一行一行複製，<code>&lt;資料夾名稱&gt;</code> 記得改掉，我建置的名稱是 MyBlog。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init &lt;資料夾名稱&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;資料夾名稱&gt;</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>第 1 行：新建一個資料夾<br />
第 2 行：選擇資料夾並進入該資料夾<br />
第 3 行：安裝 Hexo 相關初始套件<br />
第 4 行：安裝 Git 部屬套件</p>
<p>你常用的資料應該有</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">D 槽</span><br><span class="line">└── Blog</span><br><span class="line">    └── MyBlog</span><br><span class="line">        ├── package.json # 各項模組版本</span><br><span class="line">        ├── scaffolds    # post, page 和 draft 模板</span><br><span class="line">        ├── source       # 資源（資料）</span><br><span class="line">        |   └── _posts   # 文章資料夾，你所有的文章都在這</span><br><span class="line">        ├── themes       # 主題（後續會教如何使用其他主題）</span><br><span class="line">        └── _config.yml  # 部落格配置</span><br></pre></td></tr></table></figure>
<p>這樣你就完成 Hexo 的配置了。有沒有覺得自己超棒 (●’◡’●)</p>
<h2 id="設置-blog-相關訊息"><a class="markdownIt-Anchor" href="#設置-blog-相關訊息"></a> 設置 Blog 相關訊息</h2>
<p>接下來就要用到 VS code 啦～<br />
右鍵 D:/Blog/MyBlog，選擇 <code>以 code 開啟</code> 圖標示 VS code 的那個選項，就可以開始編輯屬於自己的部落格啦。<br />
<img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/open-by-code.png" alt="" /></p>
<p>在 6 ~ 12 行編輯部落格訊息</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Blog</span> <span class="string">test</span>                <span class="comment"># 部落格標題</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;這是一個簡單的部落格&#x27;</span>  <span class="comment"># 副標題，以單引好包起來</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span>                 <span class="comment"># 描述，以單引號包起來</span></span><br><span class="line"><span class="attr">keywords:</span>                       <span class="comment"># 關鍵詞，直接輸入字詞，以半形逗點隔開</span></span><br><span class="line"><span class="attr">author:</span>                         <span class="comment"># 作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-TW</span>                 <span class="comment"># 語言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span>                    <span class="comment"># 空白以使用系統時間</span></span><br></pre></td></tr></table></figure>
<p>在 16 行編輯網站網址</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://username.github.io/</span></span><br></pre></td></tr></table></figure>
<p>接著設定部屬訊息，這通常在最下面</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>接著部屬看看，組合技：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>終於完成了，文章有任何問題，或是不清楚的地方歡迎留言</p>
]]></content>
      <categories>
        <category>Hexo 部落格</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>部落格</tag>
      </tags>
  </entry>
  <entry>
    <title>tag plugins 測試文章</title>
    <url>/tag-plugins-test/</url>
    <content><![CDATA[<div class="note "><h4 id="header"><a class="markdownIt-Anchor" href="#header"></a> Header</h4>
<p>(without define class style)</p>
</div>
<div class="note default"><h4 id="default-header"><a class="markdownIt-Anchor" href="#default-header"></a> Default Header</h4>
<p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlv">Hexo!<i class="fa fa-external-link-alt"></i></span></p>
</div>
<div class="note primary"><h4 id="primary-header"><a class="markdownIt-Anchor" href="#primary-header"></a> Primary Header</h4>
<p><strong>Welcome</strong> to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlv">Hexo!<i class="fa fa-external-link-alt"></i></span></p>
</div>
<div class="note info"><h4 id="info-header"><a class="markdownIt-Anchor" href="#info-header"></a> Info Header</h4>
<p><strong>Welcome</strong> to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlv">Hexo!<i class="fa fa-external-link-alt"></i></span></p>
</div>
<div class="note success"><h4 id="success-header"><a class="markdownIt-Anchor" href="#success-header"></a> Success Header</h4>
<p><strong>Welcome</strong> to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlv">Hexo!<i class="fa fa-external-link-alt"></i></span></p>
</div>
<div class="note warning"><h4 id="warning-header"><a class="markdownIt-Anchor" href="#warning-header"></a> Warning Header</h4>
<p><strong>Welcome</strong> to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlv">Hexo!<i class="fa fa-external-link-alt"></i></span></p>
</div>
<div class="note danger"><h4 id="danger-header"><a class="markdownIt-Anchor" href="#danger-header"></a> Danger Header</h4>
<p><strong>Welcome</strong> to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlv">Hexo!<i class="fa fa-external-link-alt"></i></span></p>
</div>
<div class="note info no-icon"><h4 id="no-icon-note"><a class="markdownIt-Anchor" href="#no-icon-note"></a> No icon note</h4>
<p>Note <strong>without</strong> icon: <code>note info no-icon</code></p>
</div>
<details class="note primary"><summary><p>This is a summary</p>
</summary>
<h4 id="details-and-summary"><a class="markdownIt-Anchor" href="#details-and-summary"></a> Details and summary</h4>
<p>Note with summary: <code>note primary This is a summary</code></p>

</details>
]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>【心得】被討厭的勇氣</title>
    <url>/the-Courage-to-Be-Disliked/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>心得</tag>
        <tag>被討厭的勇氣</tag>
      </tags>
  </entry>
  <entry>
    <title>這是我的第一篇文章</title>
    <url>/test-artical/</url>
    <content><![CDATA[<p>hi~ 我是國國，身為高一的我想要深入探索程式世界，也歡迎大家與我分享、交流。</p>
<p>以下是 2022-4-29 更新的測試內容</p>
<h2 id="標題二"><a class="markdownIt-Anchor" href="#標題二"></a> 標題二</h2>
<h3 id="標題三"><a class="markdownIt-Anchor" href="#標題三"></a> 標題三</h3>
<h4 id="標題四"><a class="markdownIt-Anchor" href="#標題四"></a> 標題四</h4>
<h5 id="標題五"><a class="markdownIt-Anchor" href="#標題五"></a> 標題五</h5>
<h6 id="標題六"><a class="markdownIt-Anchor" href="#標題六"></a> 標題六</h6>
<hr />
<h2 id="渲染器的各種操作"><a class="markdownIt-Anchor" href="#渲染器的各種操作"></a> 渲染器的各種操作</h2>
]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】5 月 8 日 雲</title>
    <url>/life/20220508/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="5a3bc0bb87b7cd173a62eac50cf9f24e84a963095c948cfe4a496d262902b237">c4379dbc51520bb23a681c5b597ae53adf5b796ff3f8f773567ca1a18ef872955e626612fc462808cc63d71fd09b0396e096bc063e6acba7da8cf950b803d8554c780627c47bd313414aca95532ff03524cbe72333f4ac687c45accd0fef347865564c1fb1b20c6b7a3087847bea88ec818ae85b6f2f1b6fdc2ef02ef9604dc27d3cd271849359facfe6be875c9ee93b3d2364e2c95f501999469d104290dea44b76df872633b763a5575fb281a55b5b1d2f3fe658614a4d99c6a29be700d071ae6cfc3b31475373f7bfa3add8d0fb9a1e91dad745257a2e9bc3fd17552f5411bf8255e5c6f879088c8608f9e2b3895bdcc18d70c228b99fc20b32a4054b2cdfacef3f860017f5f42dd745b5efa62800422fa8c92cd54fdd620feb45460e7243aafc708e9716800df8b2c31d2b03abaf291cedcd71d59e060b8c7c05ac58f1cde2ca51c920eaf15ebadb36d997f7bf912b348eae31c21f16a071bcba411556d70c71abf2c38769d9bdd6e7dc6b4b19cd8d7903610e8953520f6571e3438ba6c44439813f95963183e3792409987783eaf2afb7fe8d8365492b6718e98393b785bbe60ceefbbbb2aa3410840e26683e942ae2c1c5d89c4effad1415370a6b3129a4544be439398c804d6e530d1eed528d27b2bf1536ac63076e504274e3000c3298fe83970547440428b637611bd5a1c665f7c60a4af2325e3147a5d1f694f3a09eb46f414db934d7492247a3c49acfa0fc1f92501272bd2f214275ae9e9e5f638022d44df8315d84797cd9d6dc73a4f31731bf2cc8f680f5ba1357ae1f59ee24f0dacc9113bb63f7bf9cd288252c3866d5ce6d4786c9ab68e929e20adba8f53cc45df7535ed7f9a73923a0438deb49e33fa6b56e50d7b9358c4904f3ae2fc66b236639b642ea49dfe004601ad32b1a4df839a4c81131a2c0f240744e88ad01bd5476986bbc1e63084ebd0a88ea96bd8d8940110caf98886994cd571632ea5cce5a1304539d3ab76f566f494ee9e413984daac38b50dd64c08ff5bfb864e61a19c27f012b447bc9baacbdca6974b47a3547ecfb8a677a1208fdbba13ccee22822b65dcab73c98ac27671bc3fc02f605515c96eaaf9e581bfa33ff2abf2a2a457f1d6a56c8429701e2b3dc2bb2c34ccb3434977ff5b61484e1d0327c8d1e649b4dcd658391e1abfad9728bde16090c09bf3bcd1f63cfd6e14dd5a426842c34acb70c4c1d8a0992e513d99f1fc6247d74ceb9787011d9d63b4ad776a48dfb695ea2a6cb681780361447404e01465add191ff0303372dabb88764a533934714df09c8531ce40c069a6068a7ce8eccce407766bbd97cfaba84fd6e968c8a7ff910333f97d0fd90ae69f67fcf5a02846bab7276b4d0c92845a4c962cca309e51ac0af6a7f205be2ccbcca1e799b6f7bfb837a6ece0c9cb8a68b1ac610abb85612828a9a0baafa821a9587477128112fc2a835814424bf80e85a1569ad09b87c4a1ba1d286e304e2c0eea52242289f96802961e1831b3a5563fd9ba5a029d5ec77119ac4be712345b4083c19f348f3ad8f2d9870da5457174e7d09258ded466ec5fbd25efe1b3e13dde5dbcd43333478b87d519775ed0a9dc96d247654f3e442b2624398f93ab717139ec1e9ca43c711f3d37f6316cc9dcb162c6a39026464e7b5d899189fcb4700805ea7e2b59194b5ae551197455e5406797a3af658f42e738f3217c0fd10ed91c8165ba9c3cda41bd36410be9e32b5f90900413ed85dca1d6296934a71dc56e6996038b3d551d5cdded6f3464ac8d59eb1a543a96524b86d6fbb8f0a831f98b37577d200e97ca48719d0dd34a34746e421499724c46d7fad65c7f57dd7b50a7a5be66714f6854a8e6cbbae3c409ac3a4d8487a5b87b90a66b4db9acffcd0cb1c89d094252f728f5deb4416515161a39851fcf11e43e82b7f78086882aeb47969948d253d90e9c48a552063debc8d15afabf702aa56ba8b24149c636638a5b49485db2f362a04d6943591f7b31da7b76a7014440c3796bfaf405e86d9cfe1dca6e9f867f22f0b2c564f06313ffe1dda008bb5cd188f76791ddb714a3b89daa3ec2c58901d9a5da4628cceaae7e8c8c3d00ea2b0dbfeb94e064515961520cfa4ab32e2fc27bc28fdc05e1d95c66c830b9323cd0efd4ca7722398cb656cf864c2ae70bff1e0ad791a438fb9c3809ea603cdef1fb7e2806e3d671230723acd74f3b4ff486ea5153aa22953e3a39dab0901616fbe897b4fa11c37ce8ece2f838f478bcb162d0d22674cc48a8c7fcbed0f7b0e99c7a3ba13f71e0f558bcccb2ce4388187c058143f1144e9f626104feb80754aafb83978804b799d6c6bee0db0472bd65ef4565fd9f8e7f91ad3aa9f2b77b801451cc3a85f7e7d9851281c0bdb97dac3ee5a303ca30d471ee0cf42f41c8e76e63183576e8cb95b7ae6fe8135c84e5f09760776d72eaad3b1f81465796c4cf819d7eb901015560a3f51c474833b0f644cf2a5b6177b48a8033eee4a58ccad90c0506a111bdcf33248c69fd5801f2640853d6e0ac0a454ddc196821a4790c49b1178badffd049f1e1fc2c1ba44871a20647c09da281add8a5caa7ed65a1ddac995455202dc80308c7a282681d859abef549eb2324dbd8a94ce11caea948e9f37807281d183a56b4ced250d5ab0cf049d40b71109b86e01d9b89ceb1467c2c6dabd3a7ab114d7e3bb74a865a3595bf0b7c732d28c2ba8697bdcd036a2134ac6ad875fe5db5afe735ee5a038cb7b1e31a46f02b20f9209eb5ea30691904dbd806edf4bc702e784bcc92982450b9e3a262e501ff086ab228581373bbd2e3592eee2901a4b631b1f7ac28df50a465df53fb93ab0e91397b1bef4c287efc67620361c82de876de4bde53376088c6377233068d7b2d7c30b0117a382bb204846174b7ec76280ef1eb95aa443cfc2546bfe27e2101ea493fb6dd5ffe2a25362aa14033c67b115862c5827fe4fc5ff656ee59b1286254a803eea969f1478f01bad791c49cc6d03a509e978fb8a4b22da5a8c29cac3849e388f7217a74eca5d8b981e84b1a1f7160404906bfbcfe285d7d5ff592588f88b4d3754a1e1a01562b85ca479fd10a9485a2bd81e1efdf6ee3ab42ec1b50aedc88a396f2c2200de42989ae1e7b8eb328d84df699cb8f42cd3ba7b906b2ab6750a063dff4c824cb20938e6a2719ad99d8a2a04e73f60d5cd5521e1bcf76068f31ff0980e39fcd068b063ef772ce069adff6bb0c1a75cedbd166b8b51f7014ada5a77ed783133c169b01f81019af47e3515cfc2510a51b450b9895780a1a8a3a9f809f7a969db9f3e5fc68ab8b10680ba12cb7b76ab014ded5103c32a3ea3b4092e12daa25be52887462b77c6f19702f46c9def8ead98c5dc6442a33a2c5050fbfa61ec25a882b41b96611a65307cee432502eb69f90103b0201da17a3288c4650a5c2da70785411499afc5dd579dfe8970e76da8e38857ffc532b4da33f4519b4685f9b0cae1a654df59f71d1ba4a3ddae3edc76d8f39bfef57a7e6ef2e2b66f4d026a3986034e5668e7aae1bb05621871f9b71816f30a7a71fcf</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活點滴</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】5 月 9 日 陰</title>
    <url>/life/20220509/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="24a135a126b0aa980c65a778d8b7c9b7918d09997388b6eefc1c54e404cda3e9">c4379dbc51520bb23a681c5b597ae53a5071089899c950bb8cc7414f7845b427bdf2c9ce0465a0e0d08ac59a646fe6d0b0461646f505ef7e6bd27b2b5d6a0209a22203efd990c603e974289d119755f46e163f885943a6179496140a08a8a1dbe5c16ff83c50f433bb9c09bbddf99c62decc6509e83da090a97743f1f3328f500be60130f478125a7c3d765f34f34e61b8cf9780798d50da9d32c9f14cd7f841f7ac4d9b3b1e354ede1c3a98886aff91c2c6eafaa4bfffd405b5613558e3acc07579aa8bde3aab6bb693657edbd3db502f7aa5b05bad253c3a1451887ff27773b96f04756d2857eab26bd068dbb9d27e70ae3a39ee6a12151bd82eb765c603e64a4dc8379c4ab49d4f44ff9808f7ef67c0889a125d6ed8a00382da1b2c7ed8a654d27924a84f08874bf16272acd1dfdfae068efdaf900927577c701d9dffaed73cbc2018c009808fa878bf9fc886cfc281c779d0a02514848b8aff7d8e41b009a14b99d1fbcab73fe8d828c7341462b2fb1ff35b5cbdc66b6638f7852f1af8c2c0f2a3d8ebbe3be9df4e98271141d0dc17959f839b681afc1ecc0eeef09b9bb9b5b2001beb68bd1d4101049f269c76dfca3879cf3aaccab863c1c775d81c0362b1673933c50c47bc5e745757be67213041e0d51ae4ad3540ba416511a8b5b96274ba20431e8ae17aa1dc41806b393bbd2c386d5263820a12612cdf4d6ab29c648c6f0cdee729725c305f02fe28615bc9d0f86e33d66c3041e119f5bdc46e7c36a6b1e823c4b015e0daad02163b85a9bc7a4ddace7c991cea3fda0b09a8bff14c4ab9873c93526cf6af5da6d15074b91695fac06156693347e437af419c65d6339936191b49ea1debf03f1190a3dab90b17e3f668d7ee044019244805507bfc042ba38656daff44d6c7d694523d10dadd31469bf9c25d4cefaf5fbe2a68b06e431109bf91ff8506829908a5f8f24d58a3b3921e5568c4d1c64e52edba220f90f25f01653454fe466f88694be6886a0304bb86774b8b027a3c707360cfaefa63dff3367cca38545626740778b378ab593769ff809bec5187a98b4eadaa1af2d60bdf872031887aee243d4ce420c03d52f185c1c6b6195e9f6405a7c5459eb482181bee17594120b71b187f593b0e956eb0209b393cbcede6e9927223a2ea951ebd1b8b4d14bd37ba82efdf34aecf120d876f5982708ef791f01f1279bd4399b8b2f6131d77c9633ce411685d2ac2b26985fda21b02429aa409e5b74b8748285d5bbc74f15ae07a0e5721ede45971cbcd9f</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活點滴</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】5 月 10 日 小雨</title>
    <url>/life/20220510/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="865d69b420b60fa41ad859d77e662a4902f8acbba84a77d066f95f7a64d8505d">c4379dbc51520bb23a681c5b597ae53a1869955313f65a29abd12e88faa2d4aa923b96bcaea208789f9d7c66f64cbcd8dd88157bfaaa17266ef48cb0fe008e2ea95e1f579ca8704608b6a868ec00be564167b080c787864c9b759cd716c43a63952246f471a30134b8b6d422b5b6dba3e0ff29c00d1c0d63f028b3b0f7fd95707fceaa8ba43ce757c7cecccc6c9848a3abab425754a1c7af5cd04b0371eb1c2b</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活點滴</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】5 月 12 日 雨</title>
    <url>/life/20220512/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="4652d18ff984276ee3e6fe4a4bc93a29a5e7796e1d1974c3305f7b37a60ed51f">c4379dbc51520bb23a681c5b597ae53a756d9c806c58b9ee8e50462704426c28b913582215f7cd543dac6eef4415db46619c1ffa985d4cf9b814ea16e487c64a026613f94533d4e3b37eb79fdf80eed24e92fc5401e85c10bcec4f2ba38e63d7bb7bac1f2e1210dbc6857935b385655120d301f55e037c7fdf43b125aad342a9602462365e5b041f4d89200782bbb9aa0d3e5af6e5d73778b4175da5c63a250a6e56322ad2d0eb8b18cbec9ee704fa3e4b3f89faadb8abd3a480da5326bba1abc444bc95a248faa36149987891afdf27c8cca4b7a63baf7bdfe5d2a2697b047a544ff85700257a7be731433ae10e60db5dead0328aa5d76e136df8c89f95924d2c8679ccc295fbefee0529b3146640e9507ae3491e39e2dc7b1755ccb35410e37697a03d60620e00af19a05ffc5fefc827091be16dc57b0d2547fd10ffde7eb5fe4558c7c07fa1185f7a5647c4dfa96f81d78f685bae6ead013f36da14d11f4d1a1c93816ba437c1ce21318cc19176841fe04b29d56cddb996c6570f6fb6b98eeba285659b67b64c7999a5b45f6b3323f6d9aaff24d214efbacaf9117ca7c44da2f051272bf361b93079ec764b7807b8c070438e36b7f4216ca283693350d7d033a8a89d919308af03d6cfa73a03161b742626a7e529798dd321b23cd6eb7cc15cdeeee4f9bfb84b2e20354b858a87641fde1a7ebc1523086e84f9389f8cde89c9095dcfe8e4ceb389bbb857d7c1e78bda18f6d615e1cecadbe39c63e9d769633932a234ad6ae1f2c3b5737c135302c6beded90517df9764aba71ed521334946e0a61f33b1f19e7bb8401caff3809336f5ebbd3c6c5a6ab0a03ca4ee99d3bf80c9b409b33208df1fcf6bc56002dfff9083e876bde8b2337ba7899a5c7e774c59c39909f0f542dcc733d8d373687a6f7e0c75cc26d592c80e2e651126d917a5319f2206ad1006b5e964b333e2ba4ac0466b41f5cd82b2798003cf5b1d0499624e5f2887d15755be39bd82a527d11e619e213f41d7489e9fffa94bef3432e2e057211e2d38e157dfd21c019b42978d91ab9c226f4e2a42e9bf60bcf52166590f1e</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活點滴</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】5 月 11 日 雨</title>
    <url>/life/20220511/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="6903871364ec2ed05b8a5da06ba1e7513bc11f02cd5c8593e4533e975d7b448a">c4379dbc51520bb23a681c5b597ae53a7fe50299f6833361f486c5fd07c541460e8edbabbd796e5c46e920b0099519ae63f115c8816eb264242962b6b0a7fc9d4676af1371a400d7c4939b1700962a704e04c72921bfb173407e911240326c5e67b4a4c7def4f0a57c0acb1bcb3135a512cbc43744cf16372336cfeeff63705256c9aec344c28c11c180e997a71dfd9f10fd196e79833e8f1c7fb734f490f41909cef0e475a8a804f0e2f00240300c341bc5aae3e8004f52ddd0ce489b142669db28c9ed1b4c1bb1d542f6f016cc217ba7ce1a1636b394ec430bda00fcb2dd34689ecea0ee88a44808e3a97a56a92a342a1d7c1370355e0db953c588c0dff40c8971812783edbb6e00a248f846f02954d6e6547d07c6a40aac7ca0bd22764bffa4a78b81f95d388ebe4a67873bf3adc81a1d9ec75da57fb1464a9dfb1317df5e07d7536850d9e17c24a006735820660c9993fbb50e18059eae63711e389b99b0f2d1b6b9af07b92124a5d5659d51350af49106a06933868c4b361e37842b8c535de679ae8f7b176f95fcb56108c2dab5bbc4d9737d6135f6e910874737f26ee36369ad448260d1611ef9a2e531648415e0078b2f2687b5dfdae32794cea823df88b944c6ce75dbc29a9a0391f843d0ff61c4ef1bb0d6c194de7daf592a25a3603d08fb49faec4d26422e8e1504d560085293f34c56f28a41380715f784f9cc02e75d5e2fb77edeb93325d5c87419ce884a1538bacd79d7b918db804dbff149e81370e22d24b2534aae8eeeae19f8d1a465652f3e98c996cf9d260a9040f094133fbc53c32dfb9980d355ec4b203edd25a93c5f9d6e5aff49cac6d20e65d5330069829c1bc05efcf5a811525363d7105ec1f89f4fd801270af30676fad2c2e4e1fd65d2be518bc864a2057300dded2114b3f4c9676a7cbce0792e21aecc4dc236eaf5fbfb3dc92cc41cc9ab2b1358cb19a57372ca5e75f1237adc60d1259b79cab116ae3f76cb50359fa318cc2dea54a25db4d6ec4d4bd6afde0df93cbb670041d5209cee4c1d27c4e231da6899c27ce9db7d05162e2e72ce4a04eee9ce5f6ce3c168ceee35a45244304e91d76efc45f152e0f70a486feaff0855ef15cc3a718e3a4e97b828d1db95c5d6097586e5d541a98933e91e81dbced5f480d62a335538f69a7d69035ce9e59e62d9c6c33670e5f36173ede51ba68dd1ed6e35e6abc1ca5aa52bf72934a5470a7b724745ff512e6507b530d4b965fef0d867e2f8b596f56597446e69c5667a7402da2f86f0e65f127fab19ccda960fa783189b3ad770ce0ba170450e863a9d29dba28ed1ef530fb85b717e7672df3b64b970b402535fd023249b1878d3f092033f85ed212d6f1d8bd70b1d2c3ae9d7e1afad4a74f41986baa232f7c88bfaeb8c32f9065cfc8ac8e2138894321ade69fe89d571c4e16f6d3aece34c6a617dc3f9e4d6a340824ff4056516f8e90f73b68010759bfb92763fbdd2099ec88cab31f6e8c626247365566c2b89f49a130511d5de4f5d39127be2d037c60d4b254422d0184d69632262636dcfd3089df5d2ac0e815a378c1b3b24</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活點滴</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】5 月 24 日</title>
    <url>/life/20220524/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="61275d55d8a4ff17b1b056a4a5d1a548d0d72268d5a32aa48fd3e6ad494cf8b9">c4379dbc51520bb23a681c5b597ae53afcd71c255395340f680c5e0e1e6fc2c29190548a9cb49bc2bd0e055147b0521f854fcd8dda1f2d75d19efaa25053e1653c6450d6b294bc23dab3f63bb18dd61b900d2d744672b4998c6a3a479f281dbc35274b9cb50b6c6b0c95faba600384189589a4165e364719d68834d96b2d4b13d569fca54ab5c5ad2fc090962704f97215511e3f430e30e883f0e2a7adc0b71d78c3e9968aaf70499432f06613a68c5a78d8e44b57be345e354c2d376b00e921114b8a34d309af462eba164bdbb344745b031d25cef69ae87341a30ba6d3c66f5dc09c8bba3eeaf9c9b926a43703b1bcfc9f2dab124bd58d3d27546f80d69db10062f22fd1df4cd03d3f59db771b400361a5378a4855e173050d74076c84317750ec732629e26c321dddf9f7fce289be5fe0f65c4485ba88261b918cf4935a8991de9fe1da5ee3d84f6b748b1e62a77fe2c21edcab454d27bf5550e2aa5226d89662b289e45cd83bd03f4e117e366f1c784f285c14ad9669e77fd71d519334145c30c7cd19a033660420621804b873f77dda605bd2dbff90044f6d40c4691de5155af4c671fcd44cb783e8fe3220ad4fe617c965a30e86b5329f4dcff1609644ddfb3621c0bd53481a74ed127402a6bc4210ba75d6c59777b6e3a844f96809212b688a4004ace2ec89d1f78f011968e916620c76fb35ebfe6815810864cd46eeb14ea2641a2a53b02699b38a0d3251b9b8fe4c399a3d3f11d3ab57f6dccb54dc18202c3cccf15be5c80480a56e157e17263943dca0e920dbf1506bf2cfccd441aebef93d600d65d222a9d4176e0f5fc85628c9e168842e47c08d5aa6e820f945747f91f8a262bcc90f7a34f1c5ef459a290d089fb3aee95ba4aa910f776601ab6091611d6816f34ca4e63f75643354f1313c3f8bda24b67cf7fee951fa420474657219e84e31f843bcbc104e5a74b4858504802f8dd8c4ee638e14da0e17620ae791a03f5dccaf6323214677aa33b8abc130dda43fb401a9f9b960e0708e910e</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活點滴</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】無題</title>
    <url>/life/20221113/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="7f2070ffcd1c24eac1029c8edb3789a1c1b24488c9978bdae8fe4eab3eaf6fc2">c4379dbc51520bb23a681c5b597ae53a2aaeab1cae9a21943aaccdcc72d88e4f1a48d0c9d4a2541ae06d118f219b8f761edae319f3de136f9f54b12177f6dbdeb718438225154e1a8eb797eeb16082fcb25363f156abb848574e9c0f1cc7185d25440bc8ccc0cfd6af49d1ee1627196abcfc5388e0c63c382aeb272390ecc8487d536a401bd037032636bec78786cfea410f202086358574e443d544a11a96fcdb88e22e7f1f29c3a8fc579e83c2f99631358b2c9b9c212c7cd52f3c5a7b994565b2824840c7d4533c43c1ce501358aec52fc0eac102d2028f33f546e0cb1cf25f810c56ca1cef744565dfc959e264049bd741d5112d21c5020283dc8607cbe80fa30b43381ac8d1389a07c5e0fb8e00c5494f13946150926bc753d2eb39fb2ac48ca9cf9b832a251154039042743196e706382922e6a97636a097abc24a0d56</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活點滴</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>【資培】20221117</title>
    <url>/life/20221117/</url>
    <content><![CDATA[<h2 id="hackmd-課堂連結"><a class="markdownIt-Anchor" href="#hackmd-課堂連結"></a> HackMD 課堂連結</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vdVZFOFNINGpSMEtjcjVsSGRxaDAyQT92aWV3">容器<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="zerojudge-題目"><a class="markdownIt-Anchor" href="#zerojudge-題目"></a> Zerojudge 題目</h2>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWMxMjM=">c123: 00514 - Rails<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<p>這是之前寫的，我知道用 <code>goto</code> 很醜，但…好爽:)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    ouo:</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">            <span class="type">int</span> train;</span><br><span class="line">            <span class="type">int</span> point = <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> high = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                cin &gt;&gt; train;</span><br><span class="line">                <span class="keyword">if</span> (train == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">goto</span> ouo;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = point; i &lt;= train; i++) &#123;</span><br><span class="line">                    st.<span class="built_in">push</span>(i);</span><br><span class="line">                    point++;</span><br><span class="line">                    high++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (st.<span class="built_in">top</span>() == train) &#123;</span><br><span class="line">                    st.<span class="built_in">pop</span>();</span><br><span class="line">                    high--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWU0NDc=">e447: queue 練習<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> times;</span><br><span class="line">    cin &gt;&gt; times;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">        <span class="type">int</span> word;</span><br><span class="line">        cin &gt;&gt; word;</span><br><span class="line">        <span class="keyword">switch</span> (word) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="type">int</span> num;</span><br><span class="line">                cin &gt;&gt; num;</span><br><span class="line">                a.<span class="built_in">push</span>(num);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">if</span> (a.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                cout &lt;&lt; a.<span class="built_in">front</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">if</span> (a.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                a.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="leetcode-題目"><a class="markdownIt-Anchor" href="#leetcode-題目"></a> Leetcode 題目</h2>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdmFsaWQtcGFyZW50aGVzZXMv">20. Valid Parentheses<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<p>好。。。我直接暴力解。。。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; check;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (check.<span class="built_in">empty</span>() &amp;&amp; (i == <span class="string">&#x27;)&#x27;</span> || i == <span class="string">&#x27;]&#x27;</span> || i == <span class="string">&#x27;&#125;&#x27;</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="string">&#x27;)&#x27;</span> &amp;&amp; check.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;]&#x27;</span> &amp;&amp; check.<span class="built_in">top</span>() != <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; check.<span class="built_in">top</span>() != <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;(&#x27;</span> || i == <span class="string">&#x27;[&#x27;</span> || i == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                check.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                check.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (check.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbnVtYmVyLW9mLXN0dWRlbnRzLXVuYWJsZS10by1lYXQtbHVuY2gv">1700. Number of Students Unable to Eat Lunch<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<p>比較沒有那麼暴力的暴力解 XD</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countStudents</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; students, vector&lt;<span class="type">int</span>&gt;&amp; sandwiches)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> j;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sandwiches.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; students.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sandwiches[i] == students[j]) &#123;</span><br><span class="line">                    students[j] = <span class="number">9</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == students.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">return</span> students.<span class="built_in">size</span>() - i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>生活點滴</category>
      </categories>
      <tags>
        <tag>資培</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】我看了一些演算法 :D</title>
    <url>/life/20221121/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="6f62a175075fb13790f9fe2076775c91726c42ff17d918051886b5dd3c1613ee">c4379dbc51520bb23a681c5b597ae53ae83953acc4205c882fe5f1b87eb724f0b8abc3f3f00c593a16026af5f9250fa5ef0ab89d750bdefd56b82ec9924125980621ad98e8b699657784ed2753ef49c4a33b882e94bb5099a9e952330639dbeff498b515e55f974438e5829045eea9b25740bf76a585586f14657611f0e24338f970be5eef24cd6eee3433c4bdbf9e8eccf7d7414a221a08f682b5ac3a9640943e81c0b0fc2cd1032a2b1a4d5516a35c1ac4ce28b5d02d317ba8214159cda47b57602c2aff22695d2efdc398da5ff3f90efca9aa141860f4e279e44e700242b2f2031a2037eb8d6b57d4aef3f356cc20a5cd1194fe6d247064558054aff4bb61d7ad69193f399f4e66d8fb27581b29854c765e2ad73322fc6b1e23a82552ea1a8b56c37e36e848e055101d73f85e0b297e1ef3e520108edfb93b1088944ff20938c0fbb57a17810375ad575f1811db2168c5db6475fbff70bb34b8519fc393dc9c57c593f5823a765c2e4e10dbfa010da83d15e2c2addd5d53a96781058eb465072f4a4114868875d637608d97b0dd3e1618cad7c142c5ab25e5889b8e0c6e839e509084b83c10507d626dd9bbc10ca04f2f684ba160b9396426980b190ea7209a8b1c9b5b5d43ec8f427d6f8958af948ec69d53a77e981070ca2fac54daa1fe9494b84f9a8a1e82cff7afa9e2e091344dd7a451507ac14629c5cf0abb3578d959eec563b0ee7a416d0bc53628ed1dda17a68ea34f37d077bf5d5bf972f6134dd24aec5899eb73efd9968fc9a43863e0</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活點滴</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】20221130</title>
    <url>/life/20221130/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="2d96807f6f00dd62b1224d0e843a91b7418df99568a5cdd96d0ae8ae53b59f9d">c4379dbc51520bb23a681c5b597ae53ae83953acc4205c882fe5f1b87eb724f0b8abc3f3f00c593a16026af5f9250fa5ef0ab89d750bdefd56b82ec9924125980621ad98e8b699657784ed2753ef49c4a33b882e94bb5099a9e952330639dbefcab9baa0934380e3bd3195680b8418b65021f401d9943e10ad89de908a8fb74d4e6b5c6fc59312489607a500e987288c07e9b09e6167d582b8c7998c4643c4fb402ac85254357dda33f8932859822552377675a67e8ee50750eea5ce2ff707111f60c8a9f46bf27e6ced0e0eefb919250eabf177d9b9ee968bc97b1a46599c289afeb5d8a0439905e3b245ab592589d86672f7486008dce3be56b8f5122fb5fbcf308c95b039aee9f8203e31a3d83708efb571beca252368db15237030748e9a36083f54161f0aff31f8ae78df1ba38f6f90d236e7287797e8f443c79a2502a76767ef539af45690e3ee4d0460b9c4388efacb19129ec79190bcb751fbbbe06c097c3c0f501a18a6c0f38574ca63b757586f3d7dfbd6813d4607423019f8dc9bb77dc7ff3d373fbadda3d22d7d6d41e633f9321cf86815214ba0bead8633e0245b25dfe4d3216c2c9445bd9ca3d66adb955bce7514b6a370849a9f7cebbb7c1e0aafc314b6e296607232eadf3f80c51c70457cc82c639449bdbc75635c7fa6afca2abc9d1a57bca78072efecc3e2a01892e6743c153f2e1a06ab6b32ff7057dd206de10a3132b6468c58d0acb5d1c86fa5c82ca303afe9ae44891505fc7ecf6427dcf8c67b50b07cb9477b62ece23de2b398ce77673348d0d39dcbb8a71502664352066c29b9c1ca2c3300e3a5fe92a305cc5bd997c8f6acbf48728a7da397b7141bd0e04c56f58020b123d5161297c5d2da3816ecc2d336fca193e9770f7c028632cd99b1fea87db023caff4903499e371ae10356bfd0baba9301fa6174dfbded3157c02ab401974324a323b419fb319a1c77cf0954531891de34ec6c5273b888e5ffec2677c02020d2f7b2c8a59134636b1469370c4d4ebf056333704699ab0d89c9d889b4650d858b59da75adeba0470348c10c2e7d825ce1250d8259716782d31902c353df2ee42cd91827a01e0cd8594d648f026db7df29e107bc76f2901628e447bb01c69561b8c0158bb20b383bafbbd928735b27df104a5e9435a1ee3578076a7f43f0a09ee81dc9d728ce01a1d952bbf5de4056cc19909409d6899e7fc91cab8e1f95771f908ab3f459b2061cd4f12d1174ed1df4deca878b8d30a3cdbe4342c849e235b0acc098ab70708ac3337a3a0a225e6dabb4e08b3f7b02557ac4332a571b1dc8955e18d2960a4ccfd2840af3c30118eafd3cc8126eee59cb8f753e4f78714902a1ba3dc5d30fb04b6802d19a2bd4650c8ca1a969ee8eaa25974a83ab00ff82c318939ae295b6f5c0bb7c0fd121ee3221eafd0f84386b52be4dbb7ccf0167142ba26dbcbefc92c1e46f08567bb7a702abc91b55a7af506b8ec8c98750a80b4a02bc04eb2d279261e81e98c01cdd6b2c5ffd8809b24a5af68cd0321109c0af1687272af0bb872fec26723eebaf33418f0b92ea12a742392e4a6ab091607e9198ebec632c91027f5a4d18d1b122a19086dde499db04b7911c4f2ec8996a0e28cd8893da191ef3ca852bcb9f28a55589e430ce292df532bee485d6027db671c0f6ff7f2a2a7c8864bd0b45979469331a9174a005d4c7b82132aac77004a22eabaef5f3eea2475363ececc2e7154240db45c4a2b5447cf95019172877b9310b8fea49bbd6b7fd234b4d7e5789fd79663062cb9bc5edcd8c5e634ea6e96fd0441913ae84374299055765d17256faeb3b9b09d5853ef3919f4f09b7d20509720375fd5508dbb9982b08eb32c9f88a2b93ef0057148a9cbb3ed774b4e0a17408238649940d5a0e88aaaddd4b22b454990c1372c4453fbec0154625a180e29e69e3241ef5fff542b0d164b26784b43f1e22d9559f7629971bd52b15065b0e0a214e816b67cec4f8623510d2a7ed178be5d6331e599fc01730ffd455e5</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活點滴</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】我確診了</title>
    <url>/life/20221210/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="5eb92c2da69cb823e7bf0e67348de6d5760e2f4d9f5b8877979faebd742164ce">be2ff43f5a505a2494fffb6aa39cbe27b7cadae70a3c0c0413bbbf23fd16904a3ddad33867a27e35b21e3e93aa8e3cbad157b49485ceeb546c744e21ba0d0a9478f0708fd64fa8951cfb622146932deae536d3234e68203c5572506118b444153ddcb86bb4c354125d1493c72fc2004cdf190f58589aa104e7792930944d3c2c361da5d20de37543a32507f249e1943364908b5560943dea5ebea3d3442c08966c54db9e22c548bc99e14162af74fcb1e353435435ff8d3d4dc44846c470ae2566d34152d931a6dc858ed971d0b4046019f7e57b7ce1ae9a24f1a93d6b79c28695ce53f9728e749ec33b8bdc9bf67d434dcc0339261ce1d384231e22413d05838c7358051aefddbe435799b3cbe83fb32bb3cca3e607bb832e88475b27393550713a8b0cb323c7b2a3ecc77f42f23d6145903d89cd237a766b227e375a99ed2b0837ac2aeaa811e1191aa6e2c8d5f66cd52748fed47cc2a360e8db9772bfc1e6110cff6f868efbe4e8fa348f3dcabdbaebee8e49772f2816587690f8827185f82de5fde72d568a5b75338a6011f6d7617be5847f58d03d7ae58b9c76ab3fe352fede6f0c8af235ebca5a004ddb3a10615e8f7ecd6bd26f07ecbc3bd7e95d51cb1d404a96707fbacff116ec01796e762d8fae0b618a2d0e636c197e277c77998ef8aaf84b2824790791cd3f6e8a94a2c3437ba0b3eebe32d1203414813cd001f2e30a8a7615a911c11118fec2d301e23b9c2de276290e6138b1c1aed5a9c620e5d6e6cafd59d23803761b265c9b57f2e37926cb61496113926c4085f8580b435266cb6754ff860d76e38b2fb1801fe2d2251cd044488676af0fe68a3aa64d95d5435dae06a0e21855873cb4230834f1a2efc9b35c730adb1e1a2ac4870d3213aaf615537846cb57b478ece0018e1b221c0e118db06437569f181ab1c628d158504e83b462b785cca8b05a8938f2d971a5c386eefd67ec08926e792f4d8a5853c76cdacad55c70eb960cb0fa94e1aaa8a0f18f6715eb0f7a433af951504e5fb34e6256ed0f70b3320632f86bcb0776b363c0b5f8b90009ee79ef779a4289145cf64dec16f0487bf392a0d2cf04c41840e3999c6c8a7452b95be83b3a00fd3ef1314fd3fe400399f83fc7cd6dccf472b382b5426457d6a2616e4ce5fbf1588da2a099104003388082c7a77db8d5d951cafd89a2519d604eba6bd58f88711f02266c1ea96f2c69fe6a528844cac6c06b6fc5dc03656e558ba1c4894185afce9ba1bf511200a7d685d7e8433ff00197c2c2734e71caa27981743838e1e614b7b89ec1f08b7dff0c90d26cad809073c0262410acb9348c11632c0935f1951da0c64e02795a0d17df2823053aa07c1db461f6614eebb4af3570cf16efe964724fbcc769a88f52ae673b3e972188b22408190b0686e5f7c12c960fc8cc97758af3cce31b3faa75fb972ff3455284230f1905cd67cdbd283df469f4901bd53ee7a8d6ca6682197c7bf611937fb85557ca364d6fd401b85cebf61044b842f7f9118ad85602f7035e09555e90e1e4eb84660c4dc2b687540a4565e652b21fd19fd1e188a3c093c7ab3301c8793dde23c050d0456b98f21018834e6bb2ff8568a27d54543fc624fed560a593ff7c202ce5fcce326f52a2998f0298b5503da1ebbb1741c1bed88d1b5700e8858bc38d022c5bf0bcee5cafdc82ef2ece94a5d1ace9fe4a98f8b0d12829f952f2f0be7a9eed754bb88e0bffa2f92b0d19b5f2fb2914e4eff0404e1e109d5d11646043c363d535a844d46a8345b0eef1b80479b13f63d07e2ef3133f6b126c343e4bc3cdf1100764610dae0af711a8bb705607820c6cd1f4645f69ec3f51025c6e03dae77f784df85c16a790220b72b44991911a44a2864ec940b8be46ec024a57825c171b1dcca5a3e5ba3adf1f81d4c5da5a1c87fff6f67cb6adf1f5ee7ea822ad28847ecce0e5beebdc1f8e66f5a12a384529e377b271dfd09d93c4ef7e45a837ebb7730aa62b2e03c1049ad92c6c1c1a8d974739a9451a8278b3953e78a63b5933953b75fb4f68d0d649696817999e9a70cb3d67c233d34f8a513d764bc9bc03898d571bb9bf80db30e9977982bfe814c61851b8c96b6d9e723da8d9d813963f142d78e77b93c3d17bf9a2918b561ae3f6837981a363de2ada85ae89d0684cf94cd95703af4916c831d5598e5164213c6cde276aafde38465f5b0a2ea5aa5d05b4745fb467007d744ba778fbb5f9f7f262b4bde3499abf512f656dba57e42cb706e0db57535228b3188040830c254f3401a4babb062ce980db3754cc77bb9bd2a5485fd702b4650cfc413b17eb4300bb1d48fb295766a4c3f09595a1b0172f81f0d7c90da8c60cc4572ee351a17bac9ab96d677b9d876b449dced3444615efb2ef666b9ff8f8a31bab5be62fcbdeebe54b13607e0083af54492ec682222d5f47fa816eeebed6d9b93638978318e489b49c1b34e5fe966de2413a38ffab6a7f01da1d38ad70d2c2fd32bd3960bda26e01c534b0c8e9938e56803e9212aa7a2ceaed28a8208fc456f7678ae22ef27b72de270352625a7c5c60f2c0dc04cd35a5e0c0d256d540fad4f6e981049294f1612438d347c89595e826f1e4a086b5ee3509c4aa7c7cc6718bdb4124f0fdf76ed000b21a06b92de1983e2c831a80aec3b8e8495ceb117f5a515244ab5c758653040658263ddc248086009d082b40679552ac60546ffe2c9c9b7e210392a4e67d6fddbba436d2cc802324ab67e6bca5f8e5bc252991edff6ed5b5cb37d4ff3c760028728d915ac1d851885185a94c099c1add0527695d45c169af6427818fc18b2d16b0497b393dc8f379a84a1ca22818e6d3ef32dcb708ddd00d13a473ea335988c8c60079cc8a2da1259fd48a6e28028537db37322a0930d595efdacdddc27994c59b1949e8c49b42ac155842eed29dd7b3ae63acf5769fc9b8f49f96d9abd081fe944bdb31dde592985227ca661f4a70d31053d011ea545c0865ea92dcdb0101298557f61d32e58f3606826ca044220550c5e67b991f673951a7d4e4965899c458e2c65600003d5069ad</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活點滴</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】想死，不是一天兩天的事了</title>
    <url>/life/20221216/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="1ba52068d08f7d9f63673890078eb7937c282ebf6d79cde3f81b886b2e9b7f3b">c4379dbc51520bb23a681c5b597ae53ae83953acc4205c882fe5f1b87eb724f09c4dbcb9f84f0f5f61ddebc937605f4bd3fad3cc756d428960ad1618ae05d696bfb0a7dc5ea9cefe71f1e70ec309c7396bb95849d2150ba8abe4e25a8eadbc1f00c91f898ba3ef105189f8a4e4ebd83b642b66b4afd22674d25f347adf5c64370d66c7caf1a1d2798acbc98605b416e94e19aebd80d4b585e21431a785b08ceedd3bf9b6513c3c278403b136d7455216ee990c3720d4b871a56133f9a6a8aafb4146691603b3721be103af19cd3e5e31b1e66af7aad0fde20160411dfe80392a05201b022d3afa68c454d84459696f4edfeb9d00cf01867223638a74883054056642c3d03eb38f36cd2480d44f677f379cc55a25b0a9d472425b9173f8780c2813c60bdbf885da64ad85f50c2004f593b9a2f48d7d40d8ee8230cf77dd734a5f3fd675e502cdb106e59bdef3db231aa8f109ecf54d24a8d1cbee7337834b121dbcebe70d307be6d3b674966b788ee3c2397be18198db24c77338df06423dda23da169374ac61848dd8219ffbf77d7f774f63d5eb0760eab42602f3b1574e24a7598e2d85ed1a4f0401a2f7d0699ffce9397730256d04239fee08d62bb7fbdf2e2268da244f3549510f245098a6ff7d6ba820f4908955f41c90485e355864a470414cbf13eaffa75e35f2bfc236a71ce34aa398d3d9fa328ffd98161e51640fe9ea705a9df6e83c935b0467c3a1d6e2262012166507ababa9bc1a8f0d90a8c6079cfd90eff260117a38120ed20e22bbea5cf8e59c8b58629d0592e3de2d432b7c26df2d0d9a8b46ba0090c523b0883abeb8a6f6ebd9d6beda7ffc2c93b19f63cde28a3aa04caf5d6cc24ffc3776923acb72dbf725c29ea1e850547e9ac72aa0cb797efe91b89eddc4dda0ecf72476cbe8511d5d91929774a08360d35df2398df3cde67cf278a6e156511783c4ac638460341c18ac92fc0ff104e49f71b673de3c0746fc4c6846964e08515217e49fd8bacb691ca16f8ec773e5064815a78d55c53f8b6fb2317f42269456577fd1d5e54fbb642ab7e0458525fe2e66967d6fd49d9d6176d53e70ab71de5e53ad82a5d0a26cd0bc0ee936358732f2ac92a70cd4c9654172741bfd9a1c3c3e8ac746fb0d1657a5c991bcfe376c540f847e73c5f5c4bf15c3f5bb809dc0d7c2974f0dac13cb7a466cb47618633065941903f114a6e1adc1063e8e223f7bef96e7e9da8e5642529fd0158532fc3785114eb0a27c076922bf0f11e60c6da1c18c024ae7ea8d59c8bbc642c07aa39ec90b1591010058ff2261e199edb20135cb676602c6f8ea00d8559b84ad5cfd389612207ea8f78d7eb3d3c0ea560d9d17857994060ef1b8cabab4963588a2d2cfcbe4b7557735ccad5bfe028ce6dc7f516575680857290c6b195c99685fa543e00b34b1f3d1448b410e983ffbe043dc92ae82f6c99e341f7cd4c8499d7eb50a1300e17bad5af1ef2c15ca157882bd403c49f8e0f8fc92a5634d510b857a1dbd4f016181e9b53a34f4abe7bafafa03fed06f50bc9fdbe92928920639757d45da705bda86cb1a25adf75946e6b45e4a850a055b834e89050ddfd108981ed59b2183b296d6f36a31be115064965e3c6088837d7952fa0704872581785cdcf4ed404a96d361213745d2f2ffe9cece7b9cac3d4ee2316473d4dbe576218931dbc981afd5c6388d25f336a8e89bb1b3b1756bb69d0ace3edd891b975b45bbe012de2efe24c9b697df62af2c121b1826d211d133eb87c9a8535f687fe04c65602a7cf91d2dcbb48eadd9c913694421b5b3d6c19405c9566f49d6efa563aac9e5eb7aeb61c788735257f2048986cd81f2519f2bdc3a1eeffac6080b068abc55c5aabee31349b6c79ba1846df56b553fd5abd4bbcbc50111244d0d01932c7d74dd9fc97b6b6a8ac92e4860a9b7dd0865b70bf27173606f4b92d953e1a17d55101c25df3104317e9691768197d8f49d2bad407def109e3c926a70ad911576587df1977416e166d8a845f69880b7bf9daa4cfce68621d8ed5f5d5cc469811dbf8213d032f418257bbad434ad6d040ed0535fb16a08007f9f96645ea92a02e2f2872d2b588b32b0c907fd14f8e614dd152ea21575808c3475641859346badb5b03fbcefaba9ab1fecf73b49afdbe19d5cc3796de963b67aeaf2baa32afccc8f7039b04f2949be47b88edf13d4f297c6963cf0a749cf79d4e52682802f93ccbe08723b11bc14aac87ca349c005be02629ea1860ae72baf9bb8e9877bb7ccb93662490e6d0a3a3ccab8b6f6d3c380e2e21525178d7474a1dfe6c322ccd361e1e735c85c5c00d3f0be736c43c5754cbd979e18d9a46904f793f245b0f9f6bc8b1282ae1143e4c39f2dcda10f6fd5d05b93a3c84b46a31e48800c20b7550a1bf741061c973e0add048f596198fb5d0019394ea296e445903bc92821e9edb4c2a81092dd23b6a6ff0bd20f5c7d4a41f328c58aeb5134d2deed1ee80b7705889c322f0b763e6815aadacf532d33c76d0589cb4d3c5184b7a23ad0ff5948ef8faa1e89dc5caa771627b19eea11effc53cb650715d05edfe5724a31ec80bbb9bb20e844bdc2615a249a06274308e62d409852bae52a0101f53e59790fa0b3edd79529aa085daf203ada00789cf57e88b731a7cc95d2f29ead7e62f74ec2780ab2caf8bea7039e1d5108ee89f85f9c8e9c6c6b1ce8136abad59604f105969a4db0738aae9197c447155d4dd2364d33e7bcfbd4b1810bfb85fd21b00105de0b73c642cf62d0456056b6dc58882c18b1907327efde5b19393141b1b249ff8d61fcc58a51e5c1af354319ba98061af7ac5d95543b658d3ad0c4b04b59f3eafdfcd4e1bec6ff3509f306492b5f2f96d073a66247e31fe64e54e1889c42f3b266b6338ba40a7f25829aa99320cc0c0c906b9ec21d1a38e0e56d3bf533e8d02cf5b60d98d93504375926ced4ef0270a91b0da2af8146306a738bec6922cf8a45fc7f4e476b591b76b9c7b8bcbb814d93ce08a3306c6d41885cb20603261d0e9559c20b7688854cc9f28a9fa3bd962c093a0af1794979f8e3d3493713705eac397a06c1db2788b6935edc6a5cbbac6bebd8de388280f9f55aec3efa9410189dc277da08289f0e00fa52e4101dd08610cc6cd8099a678912a215251657b329bf1049ae357f46cbccc0ce50da7c0522e3b4e172521aa296e353e49b2311f4151ae78062dd2d2129c935192e2ff93353aed5bb860d11a7d1bd0056c403e67035ef0743c7c631bf3f6ed71815d6d70e63998d8d487cec5ae105f243467968e6c1cab03e0cbb987d75f8e653afaf63d047890b30f46335ac572cf37aeb9ca99e83b9ef29ea34818f37fee2925ed030fcaea5c7b3255d95f2de1ce032844418d7dadf299ac09415ad09cfcb1ccc33824c98939d8ac7df1314b79386ee85a8e01abbe4fecd7f895eab58eb13f2f268f0f80cb84754d3661200f6b8ee87416cf4adff9862a0dbd92d3bfbb0e92b1727453abfdfadbad2c65e28139c467a8204659f2acb3c01bbfa9e159304de9367223a53aeb5ab228831ca9ff17260427780c72edb2afbfec1ee401ba7c24494e221c0f10b2b0e66884abf59f206c57660f3c17ac0965d12404d5f16b252bd7c74df15b8ae3fbba88fb4b9c0e43a0a9cd0010298c5f963f56f093f939c6b8757588d90150fa7424c2fd6b1ec0aa3baa03a894564136903c95e75de702b3653617f6f6408929c799fb74fd3124653f68ab462add93fa1cc1363056e39437bb51a50f1f3c98e13063a33bdf27d64114656160bd440fef6bffce9240b6e6cfdf5ca5b9be441734c33e66ecceb8682915588fa339673685cf2c0cb431846766581fd3c3fa851790871623a87a276b67f6be80df2646070e11ad3ca9147db5cebfd9dd70fed059224b91e2c6e6627b4aa76d1c232c3cba43faa31469ede645594a5d7eaee8ebf222b1d663d632987ab640500a1cd2bcd50fa7b5eafb47c9b217c2b68b4a671400aca5fb961a81397fa687ea0c645fda8e70ee31bca6a05fef6a695c7da3e91fad99d626538d8d7fc89906347e13eebe3f1b52665b4b4ec80e94a07bd6af6d8625c9884b37ea2fdd8fb0103f83434c4c06ea982f5cbc25c6d440b22713360e690e4724b0079f0e98340edd25b2cba42289b9ad20766f83a15623c22532f848e685a8cd546884654faa1fdd74c25e3464ff18f9ef0eedafc05416877eed72c4d574ed181484e1c84357716a809775cd367a7d616e3ad9584cbb8586d95a83395ba9621261b1621e3167f010e2bbd883addbf8344eaa61606174c4fda843e5ef6b7e6bdba0681f493490dc6730399ef55e3a7602e51dadfb0effafb2abf0f298441c66e8d190b4e7a96b54ace0014352da71cc3fc65d546d6c130</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活點滴</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】給一整年的自己</title>
    <url>/life/20221218/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="a8cbbcdac4ebf1d1452a9ecf6dd3e2e476381c161258b45a73a3760ed7fa8eff">c4379dbc51520bb23a681c5b597ae53ae83953acc4205c882fe5f1b87eb724f0f186c58319e1149d09828743a782d9409a4cacee4fab39db88730ffad20c4f831d5543e3e5d95fcb83d9078eaaf69af8879c71b25edd18531ac7ed96c111746ca96e1771f3318fe0ff1d19a33dc832b623a6573b53901df4ba346ba619fbba43dc8557f978c85a2ff730d9cdb085841c0665a04c7053fe87ebe9c1606ab1f2ef5aa842da4a570ebe1776e6a62379f3607d466850dce05eb484f0731debb6eb8cd7b088cbc9c04405f784aa7c22a307bd2cccd5e60f144c101f234e3f34f53aeeebf77c171911f6258e42e47d4de0b8eddcadd2c1597360f9a42d4c1ba2db01b30e9273ba7954958f76b33c339fcaca40183a580c62189b01c23b8df2ba2942321e8599a11b6d9499cdcf5c2aeee1c6223be1813de99db04cfc1e269d84070a5998c3b014a42b8c47b8ba9b5be09aaf4533f59dd7cd0ef96e58aad6391a77fb328025194d2bed29e12e667b5e53d0bb47efc3584786fef17b25f3a803bd2927df6caddd73df5e927fb48729a5a077ea264a034cf6c00fdac841b9fa960b46a099b3ce8c09bc14e959bc43fcbb3b4fefe4cbf24bf5d80c93c8d6f3a614c9669c3ffd1a88b0442552eb2abb3dbdddf0fb04a57658a4221170f962d0c887df3b2a63fe1eb666c8c14fcbd6178008af1266e3d0a44a7891931fc8b9b77dc99e07188d315ff057140061e7e1cd635cf1508e57eee4b6a555d5f1cdab53ead27e2dbcb13bfcd98915f0938b15d9a3907cf651a0cb3b7f915c08d291b69cde9158725f0233a783734008dc21a6b8cacf53deb06ffe70a13a9d3b107e812b4427d2e08e9680a2f357878fe12664d497162653ca0ab479b2ad6d72766e58adc1673ebc357e74db8f7391b5b9a34408a8052789acbf41289821c2f2b51e5ca46fb8f67e3a23c303c556d8ee4ddbe83577297c7f7e686cb2496292115ecf987ce99c1e3e8aab36a47bb22b2f029e7257d0f5c509c04bb49236c00bc29a137c5432a76b369bea902c9c1630863c685c0f2dfc98179517931c255d6e44867f5c7da9cd2bc6befa60e0665d0bfdb49ebeed712cec0c7a830f2c066f8cc94115e2f629dc11d593c4b4195b679c696789c2ad93c84185201d3e3c410aaa16b502209bab96bce9a95c60e7546c497505e2e32a582908984419d045b7b55704f0995c4ef124d46310154032f4b005c25ffff99b165c471057afcab6d5206ccae85b6ae21a4794c55c5bb2d6ad753de3fe6b318e1171e3cbd42f13a39f676750947f650f9872bc1bfb55e6e4f7f12295c45fac8f3c5a0c7d6fe1807e87fd462077544f19b1c5340d432886e5d0ddada0656734d19b7b12d85e9d583bdf8c09a1a734107104da26284743024e3e7124cf30ca214c561ceea1dd9df53bd513d06082c6c77693646962ae9f85080f34850239da2f8f0669dfdbb609e8009b33d2307d93f0014f56008d09086a151d8fff2381acfe6e59f160c3805aa2ffa28f6783cc39bf38578480b4ab29f3ad3663b6b734fe428265a092de42991ae364e4e6ce045913abcdb4734934ad6758c59431de99c33e7e5af9556ee64ecdd9221dfe4c1fd60f9ed480266518536546b47ed57ac680901e595a2f41b5aa95e4c6fffe05e162554250318f2b8749474e5369a2e29b11d01828c781400644a85fc853e86bea0aba4be5e81c5ced6d1d3b3e26f64fb0ad489af8376093f1b54f0c43eacae147c46fe3d0b6cd0b1a1a10f5beabedab920afa7517467897811f064eb63fa1f8487719ef1035a9e27faf1110c5206643aa83bbc38cef7de30cffb35526d1d61029739c68e1d0d423ae98870ecaac662592eab2a693512f35e81c366cc2964868c10bf8c565c142838812bc857cab8d257cc2be017b43be51c2597927938df4735e6703b37545946a9ec8b336e61e944fc7d2f736096d9cadaf63a444229d253ebc5ad9af19532d9c6128477faf9a061f04d46b6a91ad3e7f6c0eeb797471c2799d343cc422d7bb9af52bff2179baaa7a5feab7d6ec84198e8e129df9903672309fc41f6e26907ea7916fcdcbc05a1dbb2fe31c0ca5150c4a31a90fe6d221d1e179d071d2a95e2efe4437bcf149245a6281a07540fc72761d374707d48cb5be533d72fb36aa7adb5a535a9fd80b55af9accdd1d0104e6f9d65cfb7d3aee85faac214b622960f62893c8aac189c349270b6dda11cd748f5cf6c7b4a3b34fdbc10775bc52434e6f649999972b5045d978d80c8aaa57040d62129d547ecf17337423f78a4589ef32670fb835f228ef54afa1663d41d7751ffdbee7e9da7b110cc0a1d328ce8fb10c4b2a8daad17c82f4ae150a5ec3dabae0afdce04fcd51a49cd90b475b73b81182b7aa59a553c652c398582d2b820cc56f8dcab05d24a17c5acbcc26d9a3fe7e24b9ef39f4e210e436ccc9c5d787830b4d8d4bd5e62bb24cc023389de9be602cf85ed2340c74c9a9eb528c1c503abf4edbbd673215f1a1eb38003c0eb77ab658618873a38714d57e7dc846350a7df33574da258a784b3c836ddab4cd8e7abdd9aa009b7d5d0991751ed387729cf2c93e244e35272a094a58a1d2bf18453c8a794e900797bbd49d9e4f3880b308fba4f3729acdf9d9449d1fa2c66d047da3e1320452f6a638d04be6fe647177c4045b3b7cfd66aba98b63abd23d24a8477e82d917370c54c833427a375465f137bbce087f905d826a4a4d7b1f28fb6039b5e49c9eeeeb45882805889107be76a15a7eb1b8f093d9cbfd9a1e8273d8c6e05dfb472ec5587c5698e4cf9ef9f717c706216712fe74d2feab411653dd3ab8dd351bb7d1f53e4ed5fe4af5b1830c58607f4fde1bc19dde478cb89e4bf766aef9d573d3ed95e25bd5beaafedb860491722134ecfe1faee4f89aceeb71d7bfda5ad56c2f402448414fd63edd82eacea4e7a7305a4fc5441702939b2d8ad78d3566e9add82a08805be27357e0c1cbcfa68133b0b652c49bce12a5f237b26da5ec474c18ae4024a03b85</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活點滴</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】112 學測字彙題</title>
    <url>/life/20230212/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="c7c3feda04efa79eec7ed3f8cd54d2d87bf722ce0a5415ae2bac7c93025c87a4">c4379dbc51520bb23a681c5b597ae53ae83953acc4205c882fe5f1b87eb724f0e52cbaeded9772aa1d163808d1e2b678edbe6cb0b02e0bdda0222739852df27541613880a270557179f78c4038e761e1d7c4a68c6b1ad5026a3f988c1b851bdcc2a53839e63a9885b071f9c92f87ce1995181274fbbb938d752064b4c13f1b070b446ed4ed10a85ec4e381b7155537dff0909d1f37f9e6b4dc7e08b83472453a2df98c30d3bb8452a5109e74549be7fb8e956e3383ff0b83d15033dff13839df4b07ec6627a9c8f255a46997a1472e487217eed62544985df22809d4a0c11db7dc925bc2a853f0160cc02e5055836da754422ef2984723f2c113d253847da5ef5ae519400a16aa85aaf04db774bb6e593e88758e81b0da6e9796ad97d37413cd67a724e008892e411bccb13d51410381b27c19a983812dc58d6cc1f5cf4716104e336dbaaabf81d43ea4220eb28bef19a04c925c21a8c8318c2889631f27067ac35986d77b23d4151a8a06bc4265354b766191e7f0dcd0f1d9c21e1604d62dcfadb0089e2e9b4c5d6ad26aa4b82f91fc0fdab0a0f8b12f68c9b7314a80bba93e12f77f0083d6726d57265937cc5f20c4638558b98d3fafd3e6ba9932c88b5f138f184bfbd2de26086c2142211408fb4e84893a0a4a15643f667936e3839bae79cf9c9c0e514e68417a21b41da552d3fc93dc8cde0a460687cca7de7dc9e7cf457725ba98b13c5e4713e216e6c0a299832fb47d5198195d44d8f0eba63131e63ba3c654ae0c41c366c9df1b91d6cbae0989e2d87f0b2e722d59c2a8070bf7af3dce3b3ce14bb34a8d0a9d83f30f6882ed76388779124a4862d9bafcc40f5711a757eb3b9f86bbc3378712f5500334fb5ea7c7bfec5e0a623d3827c91385886e6506c000d791be8938568276d48b046ba075abfad071540680db80d8e0167d72593e2ec3f0cfcab3f3f728ff2e576b1c070cffba4a227e50696534737e126e4b9c8a0ab5a11dfd8c1db446e4ba982e4ff4d5c6156cb9e283f2f02092fac2a851e316b8ca6df0a894124a89908212bff6ea2f880e7588fef480ea5d76ce858b38c89f8e48e36ec7a13bac0746514cf597eb15d4ee8110c2dc33622fba4b484dd9771bf2387f670518f5548f010f5695d108eadb82adbd903869c0e3c9d7d1a8d606793f48d958390263aa65c37ce851430120954bb2e654117c4c84c59b73cd6d7ccb2b7a4b4ff6d3d1eeaa334e69e82b128be7ef28939e0108639c7f912be576f9629590c7cb4307176ea59ec8e3ba7b9feaf97ba1d77d92b504a575bb20646657fe2dc9d2c31e63aa070bb8e493de334a074902cae31a2873f4d7a1c370d1176a419ebb08efec127c3374b53e5aa76287aebe115793dbc91c59b15b14488c3a35a0a2e451235973b1be6d8c5881e4daeebefbc5fa044891621c03fcb2d8fe73669110f750a97356c6bc0efb24e0c088d617c6745c66256b963e9055abca10752f4baed08949a193d697e9a447950dfdec2e275e563b15c4eab30a4f9f69b81cac12f39ab3e9a2ffbf78cae044b704e1451bb1110ff479baf24b86d1ce6e2fb8788397025a447089077fabc286b17d583cd7c05ff31d759a1ca9cbcd7c538232c6497b1d7f75ae3c367ac6281e87d5af225e6a28ba24402f66a1872cbd729bff568c11552c1086240729069072870a50a3d05c756c9b3d36b97dc4f6a1c178a371129ad381ea7fe12066caa0ff7df9a8096754a7f8f6247badfbe62b68a91ed5fb54b2b193f2e294b3f034181b90729e91ba388d0b8abde2dfc4ed7780d0ca0f8df55532133a7a5a720b4f298bdd2878b2362cc7edc81d7f12ab410325aea9e2f412574d9951fcd07e77b41dc969d63f7de2bab39085168cc60ae8fe7bb28d3118b103f24d81689a2bae96bd5d591ad88f36486c8a6efa754af073d55357f40ab07c2af2c4bd73232533945f40bcc9c4216e6ad22d03d5d9ca83b70a43284a95621aadb0e2bea7b7a837bea593046390564741d620a8ec7ebb1654057ce6eaec13e026c53dc8958ee852271e65eaa7c78d092ce34c2399a1d0f4f6e6a1a0a7a85ae314f3c0de0709d9ebd1e9004287d4da4823ed228424aeae5ff338c3722c098c0c3ce8b98ffcb6b245fc001b2d05b47c5157b5952ada2464dd9f1613abb73625fe053520af125549290ec2568e60fa5b32143737c3831992e29fcbd6c749765273d484988abbd1bf92caa8097df5e725aa2b32cae9a3ae20e4810aff69e392fb5bcbb25ea422b82111adc731257375e74dde80c27510c418419bd41bf109b8b738e4fb7c30907b3c1752c88fe4f6631029597fc3883ded90575cdcc452a4cf0485e08aa3ecb335e79ae22971457599b49385975f5fab0c16def222964161e0a8ee8f0544b4304ba2c273e459072f2840f32ccdd5756c5b9b10e3b6834a7cb31379cfee79bb99f506f3267011414b20949c232b6e72176a7005713b608d46b0b54a8b98e2c63b9c108a2ccb8837243c4147d3bf74a92fd5716280220691a67e038d9724e9277cd5168f46575c3a92c284b37787eb4cd5410d86dbcc414701a080cbb3022352d107b420c76b05db6f7153c1cd52b5094d3398c5eb1a017766b15b59f252a9185ccd37b73cb603e35bffda982a98303bffa523b4f3597d963ecb4c8c9034554e5f990bfd02d41bbfadd4484c13ae4a67dba0f6021c18545b906c32becda205540ca0013c7c91df0e314e6c22d3805eede2f0787b6c3ec8eab092fb1c8b7cde6c6200751d83ebfdbddb6da16f6f34ba0fed7e3a0cb14360e9be270845d55fe9cbd1535c0c404d2939969b17e5f2b5f1aa753a4ac7b5a38412a308b511e56595a226d30a801b17da3de740eb9f676473ef3d865e949cf957d86c52647f4afb6fd5c6381bed4b57d6c216ee451142f5f06053af1a4486f1f61a25c41dae930b96165a179ae7e935bd2d97a92a50efb101ecf0dbcaf36ac7aa77f5709e94f9e7da6a3673ce7e67f795c63196132ac98a70d55ae7f94ddc39071040640fa5887bca2d519ce93289a5c4f513594b739b935197b9f61f6e6ee6302bc8339a80faf4ae70999bacd2fe523138dd3e63cf713d81c680f68e66e43e71359e77203eaa46f29839cec8eca578a89a7607f0b5891906acbdca9be7420c208eac36953ca960e86a1e8b5fdab588c867d91b2a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>學測</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】給高中畢業的自己</title>
    <url>/life/20240517/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="4680dcf7043dff28513791783010fcabb75781938f278bf997729af952c3f17a">c4379dbc51520bb23a681c5b597ae53ae83953acc4205c882fe5f1b87eb724f0f8620ca600657f823e85ec4fc3bef1c840bdba6b7d94f8a06eff21ed1b2dd9e50743b4e245664f24b363a8b85d381a582f81d2b23f850913519e2aeff978c716f22d5632078caff1c0257f960fbd8d628d6dea6604ef31339c6b6f504728ce8e8e6787d1b6b1a5572e9b5dc44fbabf9e5559b1e55fc956cebf7199f428466c9e6e696c5d1684d012496fc9581cec3bbf483cb0692b1117994c8da3bc51f26a1b884268fda99e04bc27d20dd2983915b235c4957bc127f74c4f629ed2a18a80e4ed67ccee61b011cb6c12f9ccb23e07ad86e127213978dbde27cc0c989f4e8185855055f2af431ef10288400a1f546dbbf2f62f6659d61a9cd3ecab15f9d2a36cac5953f82c9795b1d843f1a7a41db95598712506e6ccbcc7ba98f0485c63948f8df54a0b2303d4e60ab9c3c9a79c14f9ec3386eb05f0f804bdf5cbe29acdf0a298b4744cb3485340f46d662da333f0b55215ffc7a8ac20e9161226a251619da26e6774b5f7ab46475d6ecb2288430725771e1565b95777fc923221e163b8a65d56469e7699610653c4e399d95233941f824e816f842bd9d1ee21d1e0abe6cb5b08e4564906c4516eecef6d7b5f5561a5024238d8f6fd826aa78344965063999a90e0021dc6bd9f8cd08c347e7329289c74e7e3f8d51b2e04cb84f02f4098ba3b246387bed10e70ddb2ce756cafafc73eb6ddb7dd35a4eaacb79125b1a1b52153c7f82ee726cdadb612e78db3b5f8a9714ebf8f74a61dd35f87e5cad73cb3a5716fff98e95b6dbe20660e4a8770e011ac45f6f22910505c2a2cb5a52823281c4689fbd2773faeddb8874c4aa96af57a8dc9242d7ffc1b39a2d5da093af224956d9d7c7c69fd48f1f1d8176c9dc01c06e1a4fe0b83bc26934ffea8088f51dff69586030398853cb6dc1b243260f2529bd3ab67df6435fec33eaac5e055729568b9324a22217099c2083328f4b8bdabedad07ad4350fb408b8b57ac9e49c3b6106891c7fc5c5a3d3b62c63b6d2115682314133d9f034fe9097c2b5ec9ac01d975b15e58631acb708c765e2341e313eb5b3723b066997ff74b25367c550c439182776e0b7b48d367434ea4f510446be42ad670f3be84d0f562a2296b66c27ed93c021a187868fdd3c9c0d23c5e0849aa3e5247accba45b9d2cd421a758e50302b8936bfa0363ba5638f634a8c576b3ecffa01fb1ea6af6672900ecfd86a91ece75fb662d1f0d4ad83281c742046a659ff74b3a5484184cb35955febd25d430dfec810438c47e71c8eb98732e593796f3e1ef</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活點滴</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>【演算法】差分（Differential Evolution）</title>
    <url>/cs/algo/differential-evolution/</url>
    <content><![CDATA[<h2 id="簡介"><a class="markdownIt-Anchor" href="#簡介"></a> 簡介</h2>
<p>陣列相鄰兩項的差值。時間複雜度從 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 降到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，好像也可以算是一種動態規劃。</p>
<h2 id="用途"><a class="markdownIt-Anchor" href="#用途"></a> 用途</h2>
<p>「快速」在區間 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[l, r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span> 加上 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span> 值。</p>
<span id="more"></span>
<h3 id="例-1一維陣列"><a class="markdownIt-Anchor" href="#例-1一維陣列"></a> 例 1（一維陣列）</h3>
<p>假設我們要將一個一維陣列某段（index = 3~）都增加 5，也就是從這樣</p>
<table>
<thead>
<tr>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
</tr>
</thead>
</table>
<p>變這樣</p>
<table>
<thead>
<tr>
<th>0</th>
<th>0</th>
<th>0</th>
<th>5</th>
<th>5</th>
<th>5</th>
<th>5</th>
<th>5</th>
<th>5</th>
<th>5</th>
</tr>
</thead>
</table>
<p>在差分的用法上這個陣列會變成這樣</p>
<table>
<thead>
<tr>
<th>0</th>
<th>0</th>
<th>0</th>
<th>5</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
</tr>
</thead>
</table>
<p>好處非常明顯就是不用修改區間內全部的值，也就是不用做 n 次。<br />
只需要改一個值，也就是只要做 1 次。</p>
<hr />
<p>那假設我們只要 index = 3~6 改為 5，我們只要這樣做</p>
<table>
<thead>
<tr>
<th>0</th>
<th>0</th>
<th>0</th>
<th>5</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>-5</th>
<th>0</th>
<th>0</th>
</tr>
</thead>
</table>
<h3 id="例-2二為陣列"><a class="markdownIt-Anchor" href="#例-2二為陣列"></a> 例 2（二為陣列）</h3>
<p>原陣列：</p>
<table>
<thead>
<tr>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>5</td>
<td>5</td>
<td>5</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>5</td>
<td>5</td>
<td>5</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>5</td>
<td>5</td>
<td>5</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>差分陣列：</p>
<table>
<thead>
<tr>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>5</td>
<td>0</td>
<td>0</td>
<td>-5</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>-5</td>
<td>0</td>
<td>0</td>
<td>5</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>其原理為：</p>
<p>差分</p>
<table>
<thead>
<tr>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>d</td>
<td>0</td>
<td>0</td>
<td>-d</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>-d</td>
<td>0</td>
<td>0</td>
<td>d</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>實際數值</p>
<table>
<thead>
<tr>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>+d</td>
<td>+d</td>
<td>+d</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>+d</td>
<td>+d</td>
<td>+d</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>+d</td>
<td>+d</td>
<td>+d</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
<h2 id="差分-vs-前綴和"><a class="markdownIt-Anchor" href="#差分-vs-前綴和"></a> 差分 vs 前綴和</h2>
<p>差分與前綴和的關係其實很微妙，它們互為反運算的關係。</p>
<p>就以 [0, 5, 5, 5, 0, 0] 為例</p>
<p>差分陣列：</p>
<table>
<thead>
<tr>
<th>0</th>
<th>5</th>
<th>0</th>
<th>0</th>
<th>-5</th>
<th>0</th>
</tr>
</thead>
</table>
<p>原陣列：</p>
<table>
<thead>
<tr>
<th>0</th>
<th>5</th>
<th>5</th>
<th>5</th>
<th>0</th>
<th>0</th>
</tr>
</thead>
</table>
<p>前綴和：</p>
<table>
<thead>
<tr>
<th>0</th>
<th>5</th>
<th>10</th>
<th>15</th>
<th>15</th>
<th>15</th>
</tr>
</thead>
</table>
<p>可以發現它們的關係是：</p>
<p>差分陣列的前綴 = 原陣列<br />
原陣列的前綴 = 前綴和</p>
<p>前綴和的差分 = 原陣列<br />
原陣列的差分 = 差分矩陣</p>
<h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPW41NjU=">ZeroJudge n565. 降雨量統計 (Rainfall)<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="參考資料"><a class="markdownIt-Anchor" href="#參考資料"></a> 參考資料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly90cG1zby5vcmcvdG9pL2luZGV4LnBocC90YXNrcy8=">TOI推廣線上練習賽歷屆試題<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>計算機科學</category>
        <category>演算法</category>
      </categories>
      <tags>
        <tag>筆記</tag>
        <tag>差分</tag>
        <tag>Differential Evolution</tag>
        <tag>基礎演算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【演算法】0/1 背包問題（Knapsack Problem）</title>
    <url>/cs/algo/01-knapsack-problem/</url>
    <content><![CDATA[<h2 id="簡介"><a class="markdownIt-Anchor" href="#簡介"></a> 簡介</h2>
<p><s>發明 DP 的真是個天才</s>、<s>注意看，這個會 DP 的男人太狠了</s></p>
<p>0/1 背包問題的題目在於物品的放或不放，並且在有限重量的背包中，獲得最高價值。</p>
<p>通常可以想到用暴力（就是數學 n 個物品取或不取的兩種可能），但是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 真的很恐怖，資料一多，馬上 TLE。</p>
<p>因此利用陣列紀錄每個物品在某重量該放與不放，可以紀錄之前的資料又不會重新計算。</p>
<span id="more"></span>
<h2 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h2>
<p>假設你的背包可以放 10Kg，物品如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Weight</th>
<th style="text-align:center">Value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Item A</td>
<td style="text-align:center">5</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">Item B</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">Item C</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">Item D</td>
<td style="text-align:center">4</td>
<td style="text-align:center">6</td>
</tr>
</tbody>
</table>
<p>這些物品在背包內可以利用動態規劃，找出可容納的最大價值。</p>
<p>以二維的 DP 為例，要執行它，我們要先定義幾件事情：</p>
<p><code>int dp[i][j]</code></p>
<ol>
<li><code>i</code> 表示第 i 件物品</li>
<li><code>j</code> 表示背包為 j 重量時</li>
</ol>
<p>所以你的程式碼應該像是這樣：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n = <span class="number">4</span>;                     <span class="comment">// 4 items</span></span><br><span class="line"><span class="type">int</span> m = <span class="number">10</span>;                    <span class="comment">// 10kg bag</span></span><br><span class="line"><span class="type">int</span> item_w[<span class="number">4</span>] = &#123;<span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;  <span class="comment">// item weight</span></span><br><span class="line"><span class="type">int</span> item_v[<span class="number">4</span>] = &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>&#125;;  <span class="comment">// item value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// init</span></span><br><span class="line"><span class="comment">// Remind: dp[0][] must be 0, cause it has no item</span></span><br><span class="line"><span class="type">int</span> dp[n + <span class="number">1</span>][m + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m + <span class="number">1</span>; i++) dp[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DP</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;  <span class="comment">// From the first item starts</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m + <span class="number">1</span>; j++) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上是初始化的步驟，接著，我們就可以來判斷和計算了。</p>
<p>首先我們要知道的點是：i 表示物品、j 表示重量</p>
<p>轉換成陣列即是：</p>
<table>
<thead>
<tr>
<th style="text-align:center">j(weight)</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
<th style="text-align:center">6</th>
<th style="text-align:center">7</th>
<th style="text-align:center">8</th>
<th style="text-align:center">9</th>
<th style="text-align:center">10</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">i(Item)</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
<p>當我們放入 Item A（W:5 V:4） 時：</p>
<table>
<thead>
<tr>
<th style="text-align:center">j(weight)</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
<th style="text-align:center">6</th>
<th style="text-align:center">7</th>
<th style="text-align:center">8</th>
<th style="text-align:center">9</th>
<th style="text-align:center">10</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">i(Item) = 0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">i(A) = 1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
</tr>
</tbody>
</table>
<p>可以看到當 <code>j = 5</code> 時，我們才放進包包。OK，這裡沒有需要判斷的地方，應該沒什麼問題。</p>
<p>當我們放入 Item B（W:1 V:2） 時：</p>
<table>
<thead>
<tr>
<th style="text-align:center">j(weight)</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
<th style="text-align:center">6</th>
<th style="text-align:center">7</th>
<th style="text-align:center">8</th>
<th style="text-align:center">9</th>
<th style="text-align:center">10</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">i(Item) = 0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">i(A) = 1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">i(B) = 2</td>
<td style="text-align:center">0</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">4</td>
<td style="text-align:center">6</td>
<td style="text-align:center">6</td>
<td style="text-align:center">6</td>
<td style="text-align:center">6</td>
<td style="text-align:center">6</td>
</tr>
</tbody>
</table>
<p>uhh，出現了有趣的地方，尤其是 <code>j = 4~6</code> 的部分。</p>
<p>這裡就出現了需要判斷的地方，我們要判斷的東西就是我們要放還是不放？</p>
<p>我們知道 <code>j = 1</code> 時可以放 Item B，是因為前面的物品沒有放進包包所以不用看出怎麼判斷。</p>
<p>但是當我們遇到 <code>j = 5</code> 時，就要判斷：<br />
(1). 我們是否可放？<br />
(2). 放了是否小於原本的價值？</p>
<p>照這個判斷，我們可以寫出：</p>
<p>若放不了，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (j &gt;= item_w[i - <span class="number">1</span>]) &#123;  <span class="comment">// (1). if bag weight is equal or bigger than item weight</span></span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而 (2). 放了是否大於原本的價值？這個問題就涉及到了上個 Item 在包包的狀態，也就是 <code>i - 1</code>。</p>
<p>我們可以得出：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (dp[i - <span class="number">1</span>][j - item_w[i - <span class="number">1</span>]] + item_v[i - <span class="number">1</span>] &gt; dp[i - <span class="number">1</span>][j]) &#123;</span><br><span class="line">    dp[i][j] = dp[i - <span class="number">1</span>][j - item_w[i - <span class="number">1</span>]] + item_v[i - <span class="number">1</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>剩下的就是重複步驟。Item C(W: 3, V: 3)</p>
<table>
<thead>
<tr>
<th style="text-align:center">j(weight)</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
<th style="text-align:center">6</th>
<th style="text-align:center">7</th>
<th style="text-align:center">8</th>
<th style="text-align:center">9</th>
<th style="text-align:center">10</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">i(Item) = 0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">i(A) = 1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">i(B) = 2</td>
<td style="text-align:center">0</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">4</td>
<td style="text-align:center">6</td>
<td style="text-align:center">6</td>
<td style="text-align:center">6</td>
<td style="text-align:center">6</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">i(C) = 3</td>
<td style="text-align:center">0</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">5</td>
<td style="text-align:center">5</td>
<td style="text-align:center">6</td>
<td style="text-align:center">6</td>
<td style="text-align:center">7</td>
<td style="text-align:center">9</td>
<td style="text-align:center">9</td>
</tr>
</tbody>
</table>
<p>Item D(W: 4, V: 6)</p>
<table>
<thead>
<tr>
<th style="text-align:center">j(weight)</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
<th style="text-align:center">6</th>
<th style="text-align:center">7</th>
<th style="text-align:center">8</th>
<th style="text-align:center">9</th>
<th style="text-align:center">10</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">i(Item) = 0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">i(A) = 1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">i(B) = 2</td>
<td style="text-align:center">0</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">4</td>
<td style="text-align:center">6</td>
<td style="text-align:center">6</td>
<td style="text-align:center">6</td>
<td style="text-align:center">6</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">i(C) = 3</td>
<td style="text-align:center">0</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">5</td>
<td style="text-align:center">5</td>
<td style="text-align:center">6</td>
<td style="text-align:center">6</td>
<td style="text-align:center">7</td>
<td style="text-align:center">9</td>
<td style="text-align:center">9</td>
</tr>
<tr>
<td style="text-align:center">i(D) = 4</td>
<td style="text-align:center">0</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">6</td>
<td style="text-align:center">8</td>
<td style="text-align:center">8</td>
<td style="text-align:center">9</td>
<td style="text-align:center">11</td>
<td style="text-align:center">11</td>
<td style="text-align:center">12</td>
</tr>
</tbody>
</table>
<p>此時 <code>dp[n][m]</code> 即為解答，當問題縮小時，亦可直接找到答案：如詢問當背包上限為 8kg 時，答案即為 11</p>
<h2 id="完整程式碼"><a class="markdownIt-Anchor" href="#完整程式碼"></a> 完整程式碼</h2>
<h3 id="二維版上述原理"><a class="markdownIt-Anchor" href="#二維版上述原理"></a> 二維版（上述原理）</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n = <span class="number">4</span>;                     <span class="comment">// 4 items</span></span><br><span class="line"><span class="type">int</span> m = <span class="number">10</span>;                    <span class="comment">// 10kg bag</span></span><br><span class="line"><span class="type">int</span> item_w[<span class="number">4</span>] = &#123;<span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;  <span class="comment">// item weight</span></span><br><span class="line"><span class="type">int</span> item_v[<span class="number">4</span>] = &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>&#125;;  <span class="comment">// item value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// init</span></span><br><span class="line"><span class="comment">// Remind: dp[0][] must be 0, cause it has no item</span></span><br><span class="line"><span class="type">int</span> dp[n + <span class="number">1</span>][m + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m + <span class="number">1</span>; i++) dp[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DP</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;  <span class="comment">// From the first item starts</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m + <span class="number">1</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j &gt;= item_w[i - <span class="number">1</span>]) &#123;  <span class="comment">// (1). if bag weight is equal or bigger than item weight</span></span><br><span class="line">            <span class="comment">// u can use max()</span></span><br><span class="line">            <span class="comment">// 1.</span></span><br><span class="line">            <span class="keyword">if</span> (dp[i - <span class="number">1</span>][j - item_w[i - <span class="number">1</span>]] + item_v[i - <span class="number">1</span>] &gt; dp[i - <span class="number">1</span>][j]) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - item_w[i - <span class="number">1</span>]] + item_v[i - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// or 2. </span></span><br><span class="line">            <span class="comment">// dp[i][j] = max(dp[i - 1][j - item_w[i - 1]] + item_v[i - 1], dp[i - 1][j]);</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">cout &lt;&lt; dp[n][m];</span><br></pre></td></tr></table></figure>
<h3 id="一維版"><a class="markdownIt-Anchor" href="#一維版"></a> 一維版</h3>
<h3 id="交互陣列版"><a class="markdownIt-Anchor" href="#交互陣列版"></a> 交互陣列版</h3>
<h2 id="問題"><a class="markdownIt-Anchor" href="#問題"></a> 問題</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWIxODQ=">ZeroJudge b184. 5. 裝貨櫃問題<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>計算機科學</category>
        <category>演算法</category>
      </categories>
      <tags>
        <tag>筆記</tag>
        <tag>基礎演算法</tag>
        <tag>Knapsack Problem</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>【演算法】最大連續子序列和（Max Subarray Sum）</title>
    <url>/cs/algo/max-subarray-sum/</url>
    <content><![CDATA[<h2 id="簡介"><a class="markdownIt-Anchor" href="#簡介"></a> 簡介</h2>
<p>題目要求我們從 <code>[1, 2, -4, 5 -2, 6, 2]</code> 數列中找出最大的子序列和為 11</p>
<h2 id="解法-1暴力解"><a class="markdownIt-Anchor" href="#解法-1暴力解"></a> 解法 1：暴力解</h2>
<p>時間複雜度為：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<p>真的太大了，可以忽略不記這種解。</p>
<span id="more"></span>
<h2 id="解法-2卡丹算法kadanes-algorithm"><a class="markdownIt-Anchor" href="#解法-2卡丹算法kadanes-algorithm"></a> 解法 2：卡丹算法（Kadane’s Algorithm）</h2>
<p>時間複雜度為：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p>
<p>簡單說明就是決定子序列是否要加上當前值，或是重新開始一個子序列。</p>
<p>基本上，一邊輸入一邊判斷是否加起來就可以直接用一個一層 for 迴圈解決。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    ll arr[n], sum = <span class="number">0</span>, mx = LONG_LONG_MIN;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">        (i == <span class="number">0</span>) ? sum = arr[i] : sum = <span class="built_in">max</span>(arr[i], sum + arr[i]);</span><br><span class="line">        mx = <span class="built_in">max</span>(mx, sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; mx &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9jc2VzLmZpL3Byb2JsZW1zZXQvdGFzay8xNjQz">CSES Maximum Subarray Sum<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>計算機科學</category>
        <category>演算法</category>
      </categories>
      <tags>
        <tag>筆記</tag>
        <tag>基礎演算法</tag>
        <tag>Max Subarray Sum</tag>
        <tag>最大連續子序列和</tag>
      </tags>
  </entry>
  <entry>
    <title>【筆記】array 陣列</title>
    <url>/cs/cpp/array/</url>
    <content><![CDATA[<h1 id="基本介紹"><a class="markdownIt-Anchor" href="#基本介紹"></a> 基本介紹</h1>
<p>當我們需要存取一堆數據或資料時，總不能直接建立千個或上萬個變數吧！若這些數據具有相關性、型態一樣，可以使用 <code>Array</code> 來存取。陣列具有連續的記憶體位址，所以我們可以從頭走到尾來讀取 <code>Array</code> 中的數據。既可以減少變數的命名，還可以讓程式變得精簡、提高可讀性。</p>
<h1 id="如何宣告"><a class="markdownIt-Anchor" href="#如何宣告"></a> 如何宣告</h1>
<p>先引入標頭檔 <code>#include &lt;array&gt;</code></p>
<h2 id="基礎宣告"><a class="markdownIt-Anchor" href="#基礎宣告"></a> 基礎宣告</h2>
<figure class="highlight cpp"><figcaption><span>基礎宣告範例</span></figcaption><table><tr><td class="code"><pre><span class="line">array&lt;<span class="type">int</span>, 10&gt; arr;</span><br></pre></td></tr></table></figure>
<p>從上方範例可知 <code>arr</code> 是一個長度為 10 的整數陣列</p>
<div class="note info"><p>在任何程式語言裡，陣列的第一項編號必為 <code>0</code>（編號我們通常稱之 index 索引）。所以若有一個長度為 <code>10</code> 的陣列，內容物的索引範圍為 <code>0~9</code>。</p>
</div>
<h2 id="設定初始值"><a class="markdownIt-Anchor" href="#設定初始值"></a> 設定初始值</h2>
<figure class="highlight cpp"><figcaption><span>設定初始值範例</span></figcaption><table><tr><td class="code"><pre><span class="line">arr&lt;<span class="type">int</span>, <span class="number">5</span>&gt; arr_A&#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line">arr&lt;<span class="type">int</span>, <span class="number">5</span>&gt; arr_B&#123;&#125;;  <span class="comment">// 表示初始化 arr_B 元素皆為 0</span></span><br></pre></td></tr></table></figure>
<div class="note danger"><p>注意！若陣列未做初始值，其中元素可能為亂數。</p>
</div>
<h1 id="基礎使用"><a class="markdownIt-Anchor" href="#基礎使用"></a> 基礎使用</h1>
<table>
<thead>
<tr>
<th>array 函式</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>begin()</code>, <code>end()</code>, <code>cbegin()</code>, <code>cend()</code></td>
<td>提供正向跌代器</td>
</tr>
<tr>
<td><code>rbegin()</code>, <code>rend()</code>, <code>crbegin()</code>, <code>crend()</code></td>
<td>提供反向跌代器</td>
</tr>
<tr>
<td><code>size()</code></td>
<td>返回陣列大小</td>
</tr>
<tr>
<td><code>max_size()</code></td>
<td>返回陣列最大大小（由於 <code>array</code> 為固定序列，故返回值與 <code>size()</code> 一樣）</td>
</tr>
<tr>
<td><code>at()</code>, <code>operator[]</code></td>
<td>取得元素</td>
</tr>
<tr>
<td><code>front()</code></td>
<td>返回第一個元素</td>
</tr>
<tr>
<td><code>back()</code></td>
<td>返回最後一個元素</td>
</tr>
<tr>
<td><code>data()</code></td>
<td>返回元素的指標</td>
</tr>
<tr>
<td><code>fill()</code></td>
<td>填滿陣列</td>
</tr>
<tr>
<td><code>swap()</code></td>
<td>交換兩個陣列元素</td>
</tr>
</tbody>
</table>
<p><span class="exturl" data-url="aHR0cHM6Ly9jcGx1c3BsdXMuY29tL3JlZmVyZW5jZS9hcnJheS9hcnJheS8=">查看更多可參考 cplusplus 官網<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="各種遍歷"><a class="markdownIt-Anchor" href="#各種遍歷"></a> 各種遍歷</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正向遍歷</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    cout &lt;&lt; data[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : data) &#123;</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = data.<span class="built_in">begin</span>(); iter != data.<span class="built_in">end</span>(); ++iter) &#123;</span><br><span class="line">    cout &lt;&lt; *iter &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 反向遍歷</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">9</span>; i &lt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    cout &lt;&lt; data[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = data.<span class="built_in">rbegin</span>(); iter != data.<span class="built_in">rend</span>(); ++iter) &#123;</span><br><span class="line">    cout &lt;&lt; *iter &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>計算機科學</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>筆記</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>【演算法】前綴和（Prefix Sum）</title>
    <url>/cs/algo/prefix-sum/</url>
    <content><![CDATA[<h2 id="簡介"><a class="markdownIt-Anchor" href="#簡介"></a> 簡介</h2>
<p>前綴和可記錄 0~n 的總和，在求區間和或者要使用差分轉原數列時會用到。</p>
<h2 id="應用"><a class="markdownIt-Anchor" href="#應用"></a> 應用</h2>
<p>區間和、差分陣列轉原陣列時</p>
<span id="more"></span>
<h2 id="原理前綴和"><a class="markdownIt-Anchor" href="#原理前綴和"></a> 原理：前綴和</h2>
<table>
<thead>
<tr>
<th style="text-align:left">index</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">原 Array</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">-5</td>
<td style="text-align:center">7</td>
<td style="text-align:center">-3</td>
</tr>
<tr>
<td style="text-align:left">前綴和 sum</td>
<td style="text-align:center">1</td>
<td style="text-align:center">3</td>
<td style="text-align:center">6</td>
<td style="text-align:center">1</td>
<td style="text-align:center">8</td>
<td style="text-align:center">5</td>
</tr>
</tbody>
</table>
<p>這時區間和就運用到數學的和差公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle scriptlevel="0" displaystyle="true"><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>b</mi></munderover><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mstyle scriptlevel="0" displaystyle="true"><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>a</mi></munderover><msub><mi>x</mi><mi>i</mi></msub><mo>=</mo><msub><mi>S</mi><mi>b</mi></msub><mo>−</mo><msub><mi>S</mi><mi>a</mi></msub></mstyle></mstyle></mrow><annotation encoding="application/x-tex">\displaystyle\sum_{i=1}^{b}{x_i}-\displaystyle\sum_{i=1}^{a}{x_i}=S_b-S_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p>
<p>取 index 區間和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>2</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[2, 4]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">]</span></span></span></span> 答案會是 <code>sum[4] - sum[1]</code></p>
<p>快速總結：取 index 區間和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[a, b]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">]</span></span></span></span> 公式就是 <code>sum[b] - sum[a - 1]</code></p>
<p>所以在輸入陣列時，我們可以一起記下前綴和。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n, q;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line"><span class="type">int</span> arr[n];</span><br><span class="line"><span class="type">int</span> sum[n + <span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    cin &gt;&gt; arr[i];</span><br><span class="line">    (i == <span class="number">0</span>) ? (sum[i + <span class="number">1</span>] = arr[i]) : (sum[i + <span class="number">1</span>] = arr[i] + sum[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>初始化完後，就可以直接計算詢問的區間和。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    ll ans = sum[b] - sum[a - <span class="number">1</span>];</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9jc2VzLmZpL3Byb2JsZW1zZXQvdGFzay8xNjQ2">CSES Static Range Sum Queries<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>計算機科學</category>
        <category>演算法</category>
      </categories>
      <tags>
        <tag>筆記</tag>
        <tag>基礎演算法</tag>
        <tag>Prefix Sum</tag>
        <tag>前綴和</tag>
      </tags>
  </entry>
  <entry>
    <title>【筆記】set</title>
    <url>/cs/cpp/set/</url>
    <content><![CDATA[<h2 id="簡介"><a class="markdownIt-Anchor" href="#簡介"></a> 簡介</h2>
<ul>
<li>使用前，需引入 <code>&lt;set&gt;</code> 標頭檔。</li>
<li>通常是用紅黑樹實作的。</li>
<li>set 容器內的元素是唯一的（不重複）。</li>
<li>set 容器具有排序性。</li>
<li>set 容器內的值不可被修改。</li>
</ul>
<span id="more"></span>
<h2 id="常用用法"><a class="markdownIt-Anchor" href="#常用用法"></a> 常用用法</h2>
<div class="note warning"><p>以下 <code>st</code> 皆為 set 容器的變數</p>
</div>
<h3 id="insert"><a class="markdownIt-Anchor" href="#insert"></a> insert()</h3>
<p>插入元素</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; st&#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br><span class="line">st.<span class="built_in">insert</span>(<span class="number">7</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;i : st) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">2 5 7 9</span><br></pre></td></tr></table></figure>
<h3 id="erase"><a class="markdownIt-Anchor" href="#erase"></a> erase()</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; st&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>&#125;;</span><br><span class="line">set.<span class="built_in">erase</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;i : st) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">4 6 8</span><br></pre></td></tr></table></figure>
<div class="note info"><p>可以刪除不存在的元素，但回傳值為 0</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; st&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>&#125;;</span><br><span class="line">cout &lt;&lt; st.<span class="built_in">erase</span>(<span class="number">3</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure></div>
<h3 id="find"><a class="markdownIt-Anchor" href="#find"></a> find()</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; st&#123;<span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">if</span> (st.<span class="built_in">find</span>(<span class="number">1</span>) == st.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Cannot be found.&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The value is in this set.&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Cannot be found.</span><br></pre></td></tr></table></figure>
<h3 id="count"><a class="markdownIt-Anchor" href="#count"></a> count()</h3>
<p>也可以當作查詢是否有元素來使用，因為 set 每個值只會存在一個，因此使用 <code>count()</code> 會回傳 1（即存在）或 0（即不存在）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; st&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">cout &lt;&lt; st.<span class="built_in">count</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure>
<h3 id="empty"><a class="markdownIt-Anchor" href="#empty"></a> empty()</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; st;</span><br><span class="line"><span class="keyword">if</span> (st.<span class="built_in">empty</span>())  <span class="comment">// .empty() 的回傳值為 true/false</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;It is a empty set.&quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;It is not empty.&quot;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">It is a empty set.</span><br></pre></td></tr></table></figure>
<h3 id="clear"><a class="markdownIt-Anchor" href="#clear"></a> clear()</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; st&#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>&#125;;</span><br><span class="line">st.<span class="built_in">clear</span>();  <span class="comment">// 清空 set</span></span><br><span class="line"><span class="keyword">if</span> (st.<span class="built_in">empty</span>()) cout &lt;&lt; <span class="string">&quot;It is empty.&quot;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">It is empty.</span><br></pre></td></tr></table></figure>
<h2 id="遍歷-set"><a class="markdownIt-Anchor" href="#遍歷-set"></a> 遍歷 Set</h2>
<h3 id="迭代"><a class="markdownIt-Anchor" href="#迭代"></a> 迭代</h3>
<h4 id="第一種"><a class="markdownIt-Anchor" href="#第一種"></a> 第一種</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (set&lt;<span class="type">int</span>&gt;::iterator it = st.<span class="built_in">begin</span>(); it != st.<span class="built_in">end</span>(); it++) cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="第二種第一種的簡化"><a class="markdownIt-Anchor" href="#第二種第一種的簡化"></a> 第二種（第一種的簡化）</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = st.<span class="built_in">begin</span>(); it != st.<span class="built_in">end</span>(); it++) cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="第三種"><a class="markdownIt-Anchor" href="#第三種"></a> 第三種</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;i : st) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="反向迭代"><a class="markdownIt-Anchor" href="#反向迭代"></a> 反向迭代</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = st.<span class="built_in">rbegin</span>(); it != st.<span class="built_in">rend</span>(); it++) cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="unordered_set-vs-set"><a class="markdownIt-Anchor" href="#unordered_set-vs-set"></a> unordered_set vs set</h2>
<h3 id="參考資料"><a class="markdownIt-Anchor" href="#參考資料"></a> 參考資料</h3>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center"><code>set</code></th>
<th style="text-align:center"><code>unordered_set</code></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Ordering</td>
<td style="text-align:center">increasing  order (by default)</td>
<td style="text-align:center">no ordering</td>
</tr>
<tr>
<td style="text-align:center">Implementation</td>
<td style="text-align:center">Self balancing BST</td>
<td style="text-align:center">Hash Table</td>
</tr>
<tr>
<td style="text-align:center">search time</td>
<td style="text-align:center">O(log(n))</td>
<td style="text-align:center">O(1) -&gt; Average</br>O(n) -&gt; Worst Case</td>
</tr>
<tr>
<td style="text-align:center">Insertion time</td>
<td style="text-align:center">log(n) + Rebalance</td>
<td style="text-align:center">Same as search</td>
</tr>
<tr>
<td style="text-align:center">Deletion time</td>
<td style="text-align:center">log(n) + Rebalance</td>
<td style="text-align:center">Same as search</td>
</tr>
</tbody>
</table>
<blockquote>
<p>by <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmcvc2V0LXZzLXVub3JkZXJlZF9zZXQtYy1zdGwv">set vs unordered_set in C++ STL<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<details class="note default"><summary><p>詳細資料</p>
</summary>
<h3 id="use-set-when"><a class="markdownIt-Anchor" href="#use-set-when"></a> Use <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmcvc2V0LWluLWNwcC1zdGwv">set<i class="fa fa-external-link-alt"></i></span> when</h3>
<ul>
<li>We need ordered data.</li>
<li>We would have to print/access the data (in sorted order).</li>
<li>We need predecessor/successor of elements.</li>
<li>Since set is ordered, we can use functions like <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmcvYmluYXJ5LXNlYXJjaC1mdW5jdGlvbnMtaW4tYy1zdGwtYmluYXJ5X3NlYXJjaC1sb3dlcl9ib3VuZC1hbmQtdXBwZXJfYm91bmQv">binary_search(), lower_bound() and upper_bound()<i class="fa fa-external-link-alt"></i></span> on set elements. These functions cannot be used on unordered_set().</li>
<li>See <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmcvYWR2YW50YWdlcy1vZi1ic3Qtb3Zlci1oYXNoLXRhYmxlLw==">advantages of BST over Hash Table<i class="fa fa-external-link-alt"></i></span> for more cases.</li>
</ul>
<h3 id="use-unordered_set-when"><a class="markdownIt-Anchor" href="#use-unordered_set-when"></a> Use <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmcvdW5vcmRlcmRfc2V0LXN0bC11c2VzLw==">unordered_set<i class="fa fa-external-link-alt"></i></span> when</h3>
<ul>
<li>We need to keep a set of distinct elements and no ordering is required.</li>
<li>We need single element access i.e. no traversal.</li>
</ul>

</details>
<h3 id="總結"><a class="markdownIt-Anchor" href="#總結"></a> 總結</h3>
<p>有大量且極端的數據時，使用 <code>set</code> 可以有效的增加效率。<br />
相反地，如果是小量數據，可以使用 <code>unordered_set</code>。</p>
<h2 id="參考資料-2"><a class="markdownIt-Anchor" href="#參考資料-2"></a> 參考資料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zaGVuZ3l1NzY5Ny5naXRodWIuaW8vc3RkLXNldC8=">C++ std::set 用法與範例<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmcvc2V0LXZzLXVub3JkZXJlZF9zZXQtYy1zdGwv">set vs unordered_set in C++ STL<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jcGx1c3BsdXMuY29tL3JlZmVyZW5jZS9zZXQvc2V0Lw==">set - C++ Reference<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>計算機科學</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>筆記</tag>
        <tag>C++</tag>
        <tag>set</tag>
      </tags>
  </entry>
  <entry>
    <title>【筆記】二分搜尋樹（Binary Search Tree）</title>
    <url>/cs/cpp/binary-search-tree/</url>
    <content><![CDATA[<h1 id="基本介紹"><a class="markdownIt-Anchor" href="#基本介紹"></a> 基本介紹</h1>
<h2 id="定義"><a class="markdownIt-Anchor" href="#定義"></a> 定義</h2>
<ul>
<li>父節點的左子節點（left node）皆小於父節點。</li>
<li>父節點的右子節點（right node）皆大於父節點。</li>
<li>任意節點的左右子樹都符合 BST 的定義。</li>
<li>不存在等值的資料。</li>
</ul>
<p>圖例：</p>
<p><img src="https://i.imgur.com/cTf49p0.png" alt="Imgur" /></p>
<h2 id="時間複雜度"><a class="markdownIt-Anchor" href="#時間複雜度"></a> 時間複雜度</h2>
<table>
<thead>
<tr>
<th style="text-align:center">演算法</th>
<th style="text-align:center">平均</th>
<th style="text-align:center">最差</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>空間</strong></td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(n)</td>
</tr>
<tr>
<td style="text-align:center"><strong>搜尋</strong></td>
<td style="text-align:center">O(log n)</td>
<td style="text-align:center">O(n)</td>
</tr>
<tr>
<td style="text-align:center"><strong>插入</strong></td>
<td style="text-align:center">O(log n)</td>
<td style="text-align:center">O(n)</td>
</tr>
<tr>
<td style="text-align:center"><strong>刪除</strong></td>
<td style="text-align:center">O(log n)</td>
<td style="text-align:center">O(n)</td>
</tr>
</tbody>
</table>
<p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJBJThDJUU1JTg1JTgzJUU2JTkwJTlDJUU1JUIwJThCJUU2JUE4JUI5">了解更多點我<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="實作"><a class="markdownIt-Anchor" href="#實作"></a> 實作</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span>* left;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span>* right;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;left);</span><br><span class="line">        cout &lt;&lt; root-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">add_node</span><span class="params">(Node* new_node, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (new_node == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        new_node = <span class="keyword">new</span> Node;</span><br><span class="line">        new_node-&gt;data = n;</span><br><span class="line">        new_node-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">        new_node-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> new_node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> new_node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BST 的遞迴</span></span><br><span class="line"><span class="function">Node* <span class="title">input_data</span><span class="params">(Node* btree, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (btree == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        btree = <span class="built_in">add_node</span>(btree, n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n &lt; btree-&gt;data) &#123;</span><br><span class="line">        btree-&gt;left = <span class="built_in">input_data</span>(btree-&gt;left, n);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &gt; btree-&gt;data) &#123;</span><br><span class="line">        btree-&gt;right = <span class="built_in">input_data</span>(btree-&gt;right, n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> btree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node* binary_tree = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        binary_tree = <span class="built_in">input_data</span>(binary_tree, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">inorder</span>(binary_tree);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>計算機科學</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>筆記</tag>
        <tag>C++</tag>
        <tag>BST</tag>
        <tag>資料結構</tag>
        <tag>進階資料結構</tag>
      </tags>
  </entry>
  <entry>
    <title>【筆記】vector</title>
    <url>/cs/cpp/vector/</url>
    <content><![CDATA[<h1 id="基本介紹"><a class="markdownIt-Anchor" href="#基本介紹"></a> 基本介紹</h1>
<p><code>vector</code> 是一個可以改變大小的容器，可以說是升級版的陣列，<code>vector</code> 更能夠高效地對記憶體進行管理及動態增長。</p>
<h1 id="如何宣告"><a class="markdownIt-Anchor" href="#如何宣告"></a> 如何宣告</h1>
<p>先引入標頭檔 <code>#include &lt;vector&gt;</code></p>
<h2 id="基礎宣告"><a class="markdownIt-Anchor" href="#基礎宣告"></a> 基礎宣告</h2>
<figure class="highlight cpp"><figcaption><span>基礎宣告範例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>vec</code> 為存取 <code>int</code> 型別的 <code>vector</code>，且裡面沒有元素，所以 <code>size</code> 為 <code>0</code>。</p>
<h2 id="設定初始值"><a class="markdownIt-Anchor" href="#設定初始值"></a> 設定初始值</h2>
<p>我們可以使用其內建函式把元素丟進去</p>
<figure class="highlight cpp"><figcaption><span>設定初始值範例</span></figcaption><table><tr><td class="code"><pre><span class="line">vecotr&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">1</span>);  <span class="comment">// vec = &#123;1&#125;;</span></span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">3</span>);  <span class="comment">// vec = &#123;1, 3&#125;;</span></span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">5</span>);  <span class="comment">// vec = &#123;1, 3, 5&#125;;</span></span><br></pre></td></tr></table></figure>
<p>也可以直接寫成一行</p>
<figure class="highlight cpp"><figcaption><span>設定初始值範例</span></figcaption><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight cpp"><figcaption><span>設定初始值範例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;)</span></span>;</span><br></pre></td></tr></table></figure>
<p>若想要複製一份相同的 <code>vector</code>，可以這樣做</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vec_1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">vecotr&lt;<span class="type">int</span>&gt; vec_2 = vec_1;</span><br><span class="line"><span class="comment">// 當然這句也可以寫成</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec_2</span><span class="params">(vec_1)</span></span>;</span><br></pre></td></tr></table></figure>
<p>也可以複製一份陣列</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> data[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(data, data+<span class="number">3</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<p>還可以複製其中一段就好</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vec_1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec_2</span><span class="params">(vec_1.begin() + <span class="number">2</span>, vec_1.end() - <span class="number">1</span>)</span></span>;  <span class="comment">// vec_2 = &#123;5, 7&#125;;</span></span><br></pre></td></tr></table></figure>
<p>陣列也可以複製其中一段</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> data[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(data+<span class="number">2</span>, data+<span class="number">4</span>)</span></span>; <span class="comment">// vec = &#123;5, 7&#125;;</span></span><br></pre></td></tr></table></figure>
<h1 id="基礎使用"><a class="markdownIt-Anchor" href="#基礎使用"></a> 基礎使用</h1>
<p>下方為 <code>vector</code> 可用的函式，有誤還請多指教</p>
<table>
<thead>
<tr>
<th>vector 函式</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>begin()</code>, <code>end()</code>, <code>cbegin()</code>, <code>cend()</code></td>
<td>提供正向跌代器</td>
</tr>
<tr>
<td><code>rbegin()</code>, <code>rend()</code>, <code>crbegin()</code>, <code>crend()</code></td>
<td>提供反向跌代器</td>
</tr>
<tr>
<td><code>size()</code></td>
<td>返回 <code>vector</code> 大小</td>
</tr>
<tr>
<td><code>max_size()</code></td>
<td>返回 <code>vector</code> 最大大小（因為 <code>vector</code> 的大小是隨者元素的多寡而增加，所以數字極大）</td>
</tr>
<tr>
<td><code>resize()</code></td>
<td>配置 <code>vector</code> 大小，且補滿 <code>0</code></td>
</tr>
<tr>
<td><code>capacity()</code></td>
<td>返回目前 <code>vector</code> 配置大小</td>
</tr>
<tr>
<td><code>empty()</code></td>
<td>判斷 <code>vector</code> 是否為空</td>
</tr>
<tr>
<td><code>reserve()</code></td>
<td>配置 <code>vector</code> 大小</td>
</tr>
<tr>
<td><code>shrink_to_fit()</code></td>
<td>釋放 <code>vector</code> 未使用的空間</td>
</tr>
<tr>
<td><code>at()</code>, <code>operator[]</code></td>
<td>取得元素</td>
</tr>
<tr>
<td><code>front()</code></td>
<td>返回第一個元素</td>
</tr>
<tr>
<td><code>back()</code></td>
<td>返回最後一個元素</td>
</tr>
<tr>
<td><code>data()</code></td>
<td>返回元素的指標</td>
</tr>
<tr>
<td><code>assign()</code></td>
<td>配置 <code>(0~n)</code> 的數值</td>
</tr>
<tr>
<td><code>push_back()</code></td>
<td>先複製一份要 <code>push_back</code> 的元素，再貼在 <code>vector</code> 後面</td>
</tr>
<tr>
<td><code>pop_back()</code></td>
<td>刪除最後一個元素</td>
</tr>
<tr>
<td><code>insert()</code></td>
<td>插入元素</td>
</tr>
<tr>
<td><code>erase()</code></td>
<td>刪除一個或一段元素</td>
</tr>
<tr>
<td><code>clear()</code></td>
<td>清空 <code>vector</code> 內的元素</td>
</tr>
<tr>
<td><code>swap()</code></td>
<td>交換兩個 <code>vector</code> 元素</td>
</tr>
</tbody>
</table>
<p><span class="exturl" data-url="aHR0cHM6Ly9jcGx1c3BsdXMuY29tL3JlZmVyZW5jZS92ZWN0b3IvdmVjdG9yLw==">查看更多可參考 cplusplus 官網<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="基礎操作"><a class="markdownIt-Anchor" href="#基礎操作"></a> 基礎操作</h1>
<h2 id="正向遍歷"><a class="markdownIt-Anchor" href="#正向遍歷"></a> 正向遍歷</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>&#125;)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = vec.<span class="built_in">begin</span>(); it &lt; vec.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="反向遍歷"><a class="markdownIt-Anchor" href="#反向遍歷"></a> 反向遍歷</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>&#125;)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = vec.<span class="built_in">rbegin</span>(); it &lt; vec.<span class="built_in">rend</span>(); it++) &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="size-與-max_size-差異"><a class="markdownIt-Anchor" href="#size-與-max_size-差異"></a> size() 與 max_size() 差異</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>&#125;)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;max_size: &quot;</span> &lt;&lt; vec.<span class="built_in">max_size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">輸出：</span><br><span class="line"><span class="symbol">size:</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">max_size:</span> <span class="number">4611686018427387903</span></span><br></pre></td></tr></table></figure>
<h2 id="size-與-capacity-差異"><a class="markdownIt-Anchor" href="#size-與-capacity-差異"></a> size() 與 capacity() 差異</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(&#123;<span class="number">1</span>&#125;)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">輸出：</span></span><br><span class="line"><span class="attribute">vec size</span><span class="punctuation">:</span> <span class="string">1</span></span><br><span class="line"><span class="attribute">vec capacity</span><span class="punctuation">:</span> <span class="string">1</span></span><br><span class="line"><span class="attribute">vec size</span><span class="punctuation">:</span> <span class="string">2</span></span><br><span class="line"><span class="attribute">vec capacity</span><span class="punctuation">:</span> <span class="string">2</span></span><br><span class="line"><span class="attribute">vec size</span><span class="punctuation">:</span> <span class="string">3</span></span><br><span class="line"><span class="attribute">vec capacity</span><span class="punctuation">:</span> <span class="string">4</span></span><br><span class="line"><span class="attribute">vec size</span><span class="punctuation">:</span> <span class="string">4</span></span><br><span class="line"><span class="attribute">vec capacity</span><span class="punctuation">:</span> <span class="string">4</span></span><br><span class="line"><span class="attribute">vec size</span><span class="punctuation">:</span> <span class="string">5</span></span><br><span class="line"><span class="attribute">vec capacity</span><span class="punctuation">:</span> <span class="string">8</span></span><br><span class="line"><span class="attribute">vec size</span><span class="punctuation">:</span> <span class="string">6</span></span><br><span class="line"><span class="attribute">vec capacity</span><span class="punctuation">:</span> <span class="string">8</span></span><br><span class="line"><span class="attribute">vec size</span><span class="punctuation">:</span> <span class="string">7</span></span><br><span class="line"><span class="attribute">vec capacity</span><span class="punctuation">:</span> <span class="string">8</span></span><br></pre></td></tr></table></figure>
<p>可以發現，使用 <code>size()</code> 時，元素個數及為 <code>size</code>，而使用 <code>capacity()</code> 時，回傳目前 <code>vector</code> 預先給予的空間大小，且如果超過預先給予的空間大小，空間會再給予 <mark>兩倍</mark> 的空間。</p>
<h2 id="reserve-預先配置-vector-如器大小"><a class="markdownIt-Anchor" href="#reserve-預先配置-vector-如器大小"></a> reserve() 預先配置 vector 如器大小</h2>
<p>若想要預先給予固定的空間大小，可以使用 <code>reserve()</code>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(&#123;<span class="number">1</span>&#125;)</span></span>;</span><br><span class="line">vec.<span class="built_in">reserve</span>(<span class="number">3</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">輸出：</span></span><br><span class="line"><span class="attribute">vec size</span><span class="punctuation">:</span> <span class="string">1</span></span><br><span class="line"><span class="attribute">vec capacity</span><span class="punctuation">:</span> <span class="string">3</span></span><br><span class="line"><span class="attribute">vec size</span><span class="punctuation">:</span> <span class="string">2</span></span><br><span class="line"><span class="attribute">vec capacity</span><span class="punctuation">:</span> <span class="string">3</span></span><br><span class="line"><span class="attribute">vec size</span><span class="punctuation">:</span> <span class="string">3</span></span><br><span class="line"><span class="attribute">vec capacity</span><span class="punctuation">:</span> <span class="string">3</span></span><br><span class="line"><span class="attribute">vec size</span><span class="punctuation">:</span> <span class="string">4</span></span><br><span class="line"><span class="attribute">vec capacity</span><span class="punctuation">:</span> <span class="string">6</span></span><br></pre></td></tr></table></figure>
<p>可以再次發現，若元素長度大於預先設置的空間大小，<code>capacity()</code> 依舊以 <mark>兩倍的方式增大</mark> 。</p>
<h2 id="使用-shrink_to_fit-將未使用的空間釋放"><a class="markdownIt-Anchor" href="#使用-shrink_to_fit-將未使用的空間釋放"></a> 使用 shrink_to_fit() 將未使用的空間釋放</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"><span class="comment">// 使用 shrink 前</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---使用 shrink 前---\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">reserve</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">// 使用 shrink 後</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---使用 shrink 後---\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">shrink_to_fit</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight ldif"><table><tr><td class="code"><pre><span class="line">輸出：</span><br><span class="line"><span class="literal">-</span>--使用 shrink 前---</span><br><span class="line"><span class="attribute">size</span>: 0</span><br><span class="line"><span class="attribute">capacity</span>: 10</span><br><span class="line"><span class="attribute">size</span>: 2</span><br><span class="line"><span class="attribute">capacity</span>: 10</span><br><span class="line"><span class="literal">-</span>--使用 shrink 後---</span><br><span class="line"><span class="attribute">size</span>: 2</span><br><span class="line"><span class="attribute">capacity</span>: 2</span><br></pre></td></tr></table></figure>
<h2 id="resize-配置大小並將新的空間設為-0"><a class="markdownIt-Anchor" href="#resize-配置大小並將新的空間設為-0"></a> resize() 配置大小，並將新的空間設為 0</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">vec.<span class="built_in">resize</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : vec) &#123;</span><br><span class="line">    cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">輸出：</span><br><span class="line">0<span class="number"> 0 </span>0<span class="number"> 0 </span>0<span class="number"> 0 </span>0<span class="number"> 0 </span>0<span class="number"> 0 </span></span><br></pre></td></tr></table></figure>
<p>可以發現原本空的 <code>vector</code> 使用 <code>size()</code> 後，預設為 <code>0</code>，但如果不想預設為 <code>0</code>，可以這樣做。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">vec.<span class="built_in">resize</span>(<span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : vec) &#123;</span><br><span class="line">    cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">輸出：</span><br><span class="line">5<span class="number"> 5 </span>5<span class="number"> 5 </span>5<span class="number"> 5 </span>5<span class="number"> 5 </span>5 5</span><br></pre></td></tr></table></figure>
<h1 id="課堂小考"><a class="markdownIt-Anchor" href="#課堂小考"></a> 課堂小考</h1>
<p>對空的整數型態 <code>vector</code> 使用 <code>resize(10.5, 3.3)</code> 後，<code>capacity()</code> 變為多少，且元素設定為多少。<br />
A. capacity: 11，且元素皆為 4<br />
B. capacity: 11，且元素皆為 3<br />
C. capacity: 10，且元素皆為 3<br />
D. capacity: 10，且元素皆為 4<br />
E. Run Time Error</p>
<details class="note default"><summary><p>解答</p>
</summary>
<p>選項 C</p>

</details>]]></content>
      <categories>
        <category>計算機科學</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>筆記</tag>
        <tag>C++</tag>
        <tag>vector</tag>
      </tags>
  </entry>
  <entry>
    <title>【筆記】string 字串</title>
    <url>/cs/cpp/string/</url>
    <content><![CDATA[<h2 id="簡介"><a class="markdownIt-Anchor" href="#簡介"></a> 簡介</h2>
<p>字串顧名思義就是字元的陣列，我們通常可以用 index 找字串中的某個字元，然後做處理或判斷。</p>
<span id="more"></span>
<h2 id="結構"><a class="markdownIt-Anchor" href="#結構"></a> 結構</h2>
<h3 id="宣告變數"><a class="markdownIt-Anchor" href="#宣告變數"></a> 宣告變數</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string str = <span class="string">&quot;Hello World!&quot;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="基本操作"><a class="markdownIt-Anchor" href="#基本操作"></a> 基本操作</h3>
<p><code>Hello World!</code> 的各個字元可以用 index 找到每個字。</p>
<p>例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; str[<span class="number">1</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;  <span class="comment">// e</span></span><br><span class="line">cout &lt;&lt; str[<span class="number">6</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;  <span class="comment">// W</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="字串尾端"><a class="markdownIt-Anchor" href="#字串尾端"></a> 字串尾端</h3>
<p>字串尾端其實還包含了一個字元，但其值為：‘\0’。</p>
<p>‘\0’（反斜線 0）表示空字元（NULL）也就是告訴電腦該字串已經結束了。</p>
<p>我們也可以用這個性質來遍歷整個字串</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i] != <span class="string">&#x27;\0&#x27;</span>; i++) cout &lt;&lt; str[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="練習題"><a class="markdownIt-Anchor" href="#練習題"></a> 練習題</h2>
]]></content>
      <categories>
        <category>計算機科學</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>筆記</tag>
        <tag>C++</tag>
        <tag>string</tag>
        <tag>字串</tag>
      </tags>
  </entry>
  <entry>
    <title>【圖論】BFS 廣度優先搜尋演算法</title>
    <url>/cs/graph/bfs/</url>
    <content><![CDATA[<h2 id="簡介"><a class="markdownIt-Anchor" href="#簡介"></a> 簡介</h2>
<p>在競程中，常有幾種形式出現 BFS 題目，包括但不限於圖論的 Array、Tree 等。</p>
<h2 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h2>
<p>通常以 Queue 來實現 BFS。若找到此處為可走路徑，則加入其出邊至 Queue 容器（要判斷是否為邊界、是否走過）。</p>
<span id="more"></span>
<h2 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h2>
<p>第一行輸入一個 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo stretchy="false">(</mo><mn>1</mn><mo>&lt;</mo><mo>=</mo><mi>N</mi><mo>&lt;</mo><mn>1000</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">N(1&lt;=N&lt;1000)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">)</span></span></span></span> 值，表示圖為 N*N 的陣列。</p>
<p>2 ~ N+1 行為輸入的圖，僅包含 <code>#</code>、<code>.</code> 前者表示牆壁，後者表示可走路徑，超出邊界亦視為牆壁。</p>
<p>Sample Input:</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="number">9</span></span><br><span class="line">#########</span><br><span class="line">#...#####</span><br><span class="line">#.#.##.##</span><br><span class="line">#...#####</span><br><span class="line">#####..##</span><br><span class="line">##.##..##</span><br><span class="line">##.##..##</span><br><span class="line">##.######</span><br><span class="line">######...</span><br></pre></td></tr></table></figure>
<p>請輸出可走路徑的總個數。（我不知道怎麼描述）</p>
<p>Sample Output:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">string str;</span><br><span class="line"><span class="type">int</span> n, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> g[<span class="number">1005</span>][<span class="number">1005</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; que;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (g[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                que.<span class="built_in">push</span>(&#123;i, j&#125;);</span><br><span class="line">                <span class="comment">// when loop finds availible path, cnt add 1</span></span><br><span class="line">                cnt++;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// BFS</span></span><br><span class="line">                <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    <span class="keyword">auto</span> now = que.<span class="built_in">front</span>();</span><br><span class="line">                    que.<span class="built_in">pop</span>();</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// when it checked, fix it to 0</span></span><br><span class="line">                    g[now.first][now.second] = <span class="number">0</span>;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// check for next 4 direction</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                        <span class="type">int</span> x = now.first + dx[k];</span><br><span class="line">                        <span class="type">int</span> y = now.second + dy[k];</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; n &amp;&amp; g[x][y]) &#123;</span><br><span class="line">                            que.<span class="built_in">push</span>(&#123;x, y&#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; str;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[j] == <span class="string">&#x27;.&#x27;</span>) g[i][j] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// BFS</span></span><br><span class="line">    <span class="built_in">bfs</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// print count</span></span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="練習題"><a class="markdownIt-Anchor" href="#練習題"></a> 練習題</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9jc2VzLmZpL3Byb2JsZW1zZXQvdGFzay8xMTky">CSES Counting Rooms<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jc2VzLmZpL3Byb2JsZW1zZXQvdGFzay8xMTkzLw==">CSES Labyrinth<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWQzNjU=">ZeroJudge d365. 10336 - Rank the Languages<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWQ0MDY=">ZeroJudge d406. 倒水時間<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWsyMDU=">ZeroJudge k205. 蝸牛的踩地雷攻略 1 (插旗)<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWs2MTU=">ZeroJudge k615. 蝸牛的踩地雷攻略 2 (掃雷)<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPW43MDA=">ZeroJudge n700. 蝸牛的踩地雷攻略 3 (點方塊)<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>計算機科學</category>
        <category>圖論</category>
      </categories>
      <tags>
        <tag>筆記</tag>
        <tag>圖論</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>【筆記】stringstream 字串流</title>
    <url>/cs/cpp/stringstream/</url>
    <content><![CDATA[<h2 id="簡介"><a class="markdownIt-Anchor" href="#簡介"></a> 簡介</h2>
<blockquote>
<p>有一個類型叫 iostream，它同時是輸入流也是輸出流，而 stringstream 正是一種 iostream。它不像標準流，有固定的輸出去向或輸入來源，簡單來講，它就是一個流水線，你可以從任何地方放東西進去、然後再把裡面的東西拿出來到任何地方。像是你就無法在程式中把標準輸出流的緩衝區裡的東西拿出來，你只能在 terminal 或它導向的檔案裡見到你放進標準輸出流的東西（就是你輸出的東西）。<br />
<span class="exturl" data-url="aHR0cHM6Ly9jcC53aXdpaG8ubWUvc3RyaW5nc3RyZWFtLw==">WIWIHO 的競程筆記<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>簡單來說，就是可以將某個東西放進 stringstream，再把它拿出來，也不用判別它的資料型態。</p>
<h2 id="應用"><a class="markdownIt-Anchor" href="#應用"></a> 應用</h2>
<ul>
<li>是轉換資料型態的好幫手</li>
<li>可以做字串切割</li>
</ul>
<span id="more"></span>
<h2 id="宣告"><a class="markdownIt-Anchor" href="#宣告"></a> 宣告</h2>
<div class="note info"><p>記得先引入 <code>&lt;sstream&gt;</code></p>
</div>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string str = <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">stringstream ss1;</span><br><span class="line"><span class="function">stringstream <span class="title">ss2</span><span class="params">(str)</span></span>;</span><br><span class="line"><span class="function">stringstream <span class="title">ss3</span><span class="params">(str)</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h2>
<h3 id="字串轉整數"><a class="markdownIt-Anchor" href="#字串轉整數"></a> 字串轉整數</h3>
<p>如下，<code>num</code> 就被賦予值了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">stringstream ss;</span><br><span class="line">ss &lt;&lt; <span class="string">&quot;13934&quot;</span>;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">ss &gt;&gt; num;</span><br><span class="line">cout &lt;&lt; num &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>有趣的是，它一樣會根據空格做切割，也就是說，給它一個這樣的字串 <code>&quot;3 7 5&quot;</code>，流出一次就只會取到 <code>3</code>，所以如果要讀取全部數字，你需要跑三次。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">stringstream ss;</span><br><span class="line">ss &lt;&lt; <span class="string">&quot;3 7 5&quot;</span>;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">ss &gt;&gt; num;</span><br><span class="line">cout &lt;&lt; num &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">ss &gt;&gt; num;</span><br><span class="line">cout &lt;&lt; num &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">ss &gt;&gt; num;</span><br><span class="line">cout &lt;&lt; num &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight txt"><figcaption><span>Output</span></figcaption><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">7</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<p>但假設你不知道有多少數字，你可以用 EOF 的方式讀取：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">stringstream ss;</span><br><span class="line">ss &lt;&lt; <span class="string">&quot;1 5 6 2 7 2 8 0 1 3 5 7&quot;</span>;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="keyword">while</span> (ss &gt;&gt; num) &#123;</span><br><span class="line">    cout &lt;&lt; num &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight txt"><figcaption><span>Output</span></figcaption><table><tr><td class="code"><pre><span class="line">1 5 6 2 7 2 8 0 1 3 5 7 </span><br></pre></td></tr></table></figure>
<h3 id="整數轉字串"><a class="markdownIt-Anchor" href="#整數轉字串"></a> 整數轉字串</h3>
<p>其實使用方法都一樣，所以就不再多加贅述。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">stringstream ss;</span><br><span class="line">ss &lt;&lt; <span class="number">123</span> &lt;&lt; <span class="number">527</span>;</span><br><span class="line">string str;</span><br><span class="line"><span class="keyword">while</span> (ss &gt;&gt; str) &#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight txt"><figcaption><span>Output</span></figcaption><table><tr><td class="code"><pre><span class="line">123527</span><br></pre></td></tr></table></figure>
<p>不過這裡要注意的是，如過把數字連續放進去的話，會直接連起來。也就是說可以推測 stringstream 應該也是把數字當字串在處理。所以如果要將數字各個獨立存取，那就要加一個含空白字元（字串）來做切割，這樣就不會連在一起。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">stringstream ss;</span><br><span class="line">ss &lt;&lt; <span class="number">123</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="number">527</span>;</span><br><span class="line">string str;</span><br><span class="line"><span class="keyword">while</span> (ss &gt;&gt; str) &#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight txt"><figcaption><span>Output</span></figcaption><table><tr><td class="code"><pre><span class="line">123 527</span><br></pre></td></tr></table></figure>
<p>其實也能轉成其他資料型態例如：浮點數、布林值等等。</p>
<h3 id="字串切割"><a class="markdownIt-Anchor" href="#字串切割"></a> 字串切割</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string str;  <span class="comment">// 原字串</span></span><br><span class="line"><span class="comment">// 用 getline 是因為怕該字串有空格</span></span><br><span class="line"><span class="built_in">getline</span>(cin, str);</span><br><span class="line"></span><br><span class="line"><span class="function">stringstream <span class="title">ss</span><span class="params">(str)</span></span>;</span><br><span class="line"><span class="comment">// 指定分割字元</span></span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="comment">// 用 get 是因為可以輸入空白字元</span></span><br><span class="line"><span class="comment">// 若不會用到空白，也可以用 cin &gt;&gt; c;</span></span><br><span class="line">cin.<span class="built_in">get</span>(c);</span><br><span class="line"></span><br><span class="line">string substr;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(ss, substr, c)) &#123;</span><br><span class="line">    cout &lt;&lt; substr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight txt"><figcaption><span>Sample Input 1</span></figcaption><table><tr><td class="code"><pre><span class="line">apple banana cat</span><br><span class="line">a</span><br></pre></td></tr></table></figure>
<figure class="highlight txt"><figcaption><span>Sample Output 1</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">pple b</span><br><span class="line">n</span><br><span class="line">n</span><br><span class="line"> c</span><br><span class="line">t</span><br></pre></td></tr></table></figure>
<figure class="highlight txt"><figcaption><span>Sample Input 2</span></figcaption><table><tr><td class="code"><pre><span class="line">apple banana cat</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<figure class="highlight txt"><figcaption><span>Sample Output 2</span></figcaption><table><tr><td class="code"><pre><span class="line">apple</span><br><span class="line">banana</span><br><span class="line">cat</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>計算機科學</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>筆記</tag>
        <tag>C++</tag>
        <tag>string</tag>
        <tag>字串</tag>
        <tag>strigstream</tag>
        <tag>字串流</tag>
        <tag>字串切割</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】d075: Q-6-10. 置物櫃出租</title>
    <url>/solved/TCFSH_CIRC_Judge/d075/</url>
    <content><![CDATA[<h1 id="題目連結"><a class="markdownIt-Anchor" href="#題目連結"></a> 題目連結</h1>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWRnZS50Y2lyYy50dy9TaG93UHJvYmxlbT9wcm9ibGVtaWQ9ZDA3NQ==">d075: Q-6-10. 置物櫃出租<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a class="markdownIt-Anchor" href="#我的想法"></a> 我的想法</h1>
<p>我用子集合的方式，如：ZeroJudge <span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWE1MjI=">a522<i class="fa fa-external-link-alt"></i></span>，求出可退房間的數量，最後從 S 開始往上找是否有可退房數量的房間數。</p>
<h1 id="參考解答"><a class="markdownIt-Anchor" href="#參考解答"></a> 參考解答</h1>
<figure class="highlight cpp"><figcaption><span>d075</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, M, S;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; M &gt;&gt; S;</span><br><span class="line">    <span class="type">int</span> c[n], sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; c[i];</span><br><span class="line">        sum += c[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> h[M + <span class="number">1</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line">    h[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">bool</span> check[M + <span class="number">1</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= M; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (h[j] &amp;&amp; !check[j]) &#123;</span><br><span class="line">                <span class="comment">// 這裡是預防連續兩位客人占用的房間一樣</span></span><br><span class="line">                <span class="comment">// 所以會扣 6% 的隱藏測資</span></span><br><span class="line">                <span class="keyword">if</span> (h[j + c[i]] == <span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                h[j + c[i]] = <span class="literal">true</span>;</span><br><span class="line">                check[j + c[i]] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// S - (M - sum) 有可能為負數</span></span><br><span class="line">    <span class="comment">// 所以會扣 7% 的隱藏測資</span></span><br><span class="line">    <span class="type">int</span> x = S - (M - sum);</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt;= M; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (h[i]) &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>解題</category>
        <category>CIRC_Judge</category>
      </categories>
      <tags>
        <tag>APCS</tag>
        <tag>DP</tag>
        <tag>01背包</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】d002: 習題 Q-1-2. 合成函數(2) (APCS201902)</title>
    <url>/solved/TCFSH_CIRC_Judge/d002/</url>
    <content><![CDATA[<h1 id="題目連結"><a class="markdownIt-Anchor" href="#題目連結"></a> 題目連結</h1>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWRnZS50Y2lyYy50dy9TaG93UHJvYmxlbT9wcm9ibGVtaWQ9ZDAwMg==">d002: 習題 Q-1-2. 合成函數(2) (APCS201902)<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a class="markdownIt-Anchor" href="#我的想法"></a> 我的想法</h1>
<p>利用遞迴做函數的輸入及計算，同 <span class="exturl" data-url="aHR0cHM6Ly9qdWRnZS50Y2lyYy50dy9TaG93UHJvYmxlbT9wcm9ibGVtaWQ9ZDAwMQ==">d001: 例題 P-1-1. 合成函數(1)<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="參考解答"><a class="markdownIt-Anchor" href="#參考解答"></a> 參考解答</h1>
<figure class="highlight cpp"><figcaption><span>d002</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">eval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x, y, z;</span><br><span class="line">    <span class="type">char</span> token[<span class="number">5</span>];</span><br><span class="line">    cin &gt;&gt; token;</span><br><span class="line">    <span class="keyword">if</span> (token[<span class="number">0</span>] == <span class="string">&#x27;f&#x27;</span>) &#123;</span><br><span class="line">        x = <span class="built_in">eval</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * x - <span class="number">3</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (token[<span class="number">0</span>] == <span class="string">&#x27;g&#x27;</span>) &#123;</span><br><span class="line">        x = <span class="built_in">eval</span>();</span><br><span class="line">        y = <span class="built_in">eval</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * x + y - <span class="number">7</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (token[<span class="number">0</span>] == <span class="string">&#x27;h&#x27;</span>) &#123;</span><br><span class="line">        x = <span class="built_in">eval</span>();</span><br><span class="line">        y = <span class="built_in">eval</span>();</span><br><span class="line">        z = <span class="built_in">eval</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span> * x - <span class="number">2</span> * y + z;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">atoi</span>(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">eval</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>解題</category>
        <category>CIRC_Judge</category>
      </categories>
      <tags>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】d001: 例題 P-1-1. 合成函數(1)</title>
    <url>/solved/TCFSH_CIRC_Judge/d001/</url>
    <content><![CDATA[<h1 id="題目連結"><a class="markdownIt-Anchor" href="#題目連結"></a> 題目連結</h1>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWRnZS50Y2lyYy50dy9TaG93UHJvYmxlbT9wcm9ibGVtaWQ9ZDAwMQ==">d001: 例題 P-1-1. 合成函數(1)<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a class="markdownIt-Anchor" href="#我的想法"></a> 我的想法</h1>
<p>利用遞迴做函數的輸入及計算</p>
<h1 id="參考解答"><a class="markdownIt-Anchor" href="#參考解答"></a> 參考解答</h1>
<figure class="highlight cpp"><figcaption><span>d001</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">eval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> val, x, y;</span><br><span class="line">    <span class="type">char</span> token[<span class="number">5</span>];</span><br><span class="line">    cin &gt;&gt; token;</span><br><span class="line">    <span class="keyword">if</span> (token[<span class="number">0</span>] == <span class="string">&#x27;f&#x27;</span>) &#123;</span><br><span class="line">        x = <span class="built_in">eval</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * x - <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (token[<span class="number">0</span>] == <span class="string">&#x27;g&#x27;</span>) &#123;</span><br><span class="line">        x = <span class="built_in">eval</span>();</span><br><span class="line">        y = <span class="built_in">eval</span>();</span><br><span class="line">        <span class="keyword">return</span> x + <span class="number">2</span> * y - <span class="number">3</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">atoi</span>(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="built_in">eval</span>();</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>解題</category>
        <category>CIRC_Judge</category>
      </categories>
  </entry>
  <entry>
    <title>【解題】Zerojudge a013. 羅馬數字</title>
    <url>/solved/ZeroJudge/a013/</url>
    <content><![CDATA[<h1 id="題目連結"><a class="markdownIt-Anchor" href="#題目連結"></a> 題目連結</h1>
<p><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWEwMTM=">a013. 羅馬數字<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a class="markdownIt-Anchor" href="#我的想法"></a> 我的想法</h1>
<p>要注意的地方就是 4、9、40、90、400、900，這幾個數字都要用減法規則讀入或輸出</p>
<h1 id="參考解答"><a class="markdownIt-Anchor" href="#參考解答"></a> 參考解答</h1>
<figure class="highlight cpp"><figcaption><span>a290</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; mp = &#123;</span><br><span class="line">    &#123;<span class="string">&#x27;I&#x27;</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;V&#x27;</span>, <span class="number">5</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;X&#x27;</span>, <span class="number">10</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;L&#x27;</span>, <span class="number">50</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;C&#x27;</span>, <span class="number">100</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;D&#x27;</span>, <span class="number">500</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;M&#x27;</span>, <span class="number">1000</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">char</span>&gt; re_mp = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="string">&#x27;I&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">5</span>, <span class="string">&#x27;V&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">10</span>, <span class="string">&#x27;X&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">50</span>, <span class="string">&#x27;L&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">100</span>, <span class="string">&#x27;C&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">500</span>, <span class="string">&#x27;D&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1000</span>, <span class="string">&#x27;M&#x27;</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> int_mp[<span class="number">7</span>] = &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">500</span>, <span class="number">1000</span>&#125;;</span><br><span class="line"></span><br><span class="line">string s1, s2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = mp[s[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">        n += mp[s[i]];</span><br><span class="line">        <span class="keyword">if</span> (mp[s[i]] &gt; mp[s[i - <span class="number">1</span>]]) &#123;</span><br><span class="line">            n -= mp[s[i - <span class="number">1</span>]] * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ouo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; s1) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1 == <span class="string">&quot;#&quot;</span>) <span class="keyword">break</span>;</span><br><span class="line">        cin &gt;&gt; s2;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> n1 = <span class="built_in">solve</span>(s1);</span><br><span class="line">        <span class="type">int</span> n2 = <span class="built_in">solve</span>(s2);</span><br><span class="line">        <span class="type">int</span> n3 = <span class="built_in">abs</span>(n1 - n2);</span><br><span class="line">        <span class="keyword">if</span> (n3 == <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;ZERO\n&quot;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        deque&lt;<span class="type">char</span>&gt; ans;</span><br><span class="line">        <span class="type">int</span> power = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n3 != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> tmp = (n3 % <span class="number">10</span>) * <span class="built_in">pow</span>(<span class="number">10</span>, power);</span><br><span class="line">            <span class="keyword">switch</span> (tmp) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    ans.<span class="built_in">push_front</span>(re_mp[tmp + <span class="number">1</span>]);</span><br><span class="line">                    ans.<span class="built_in">push_front</span>(re_mp[<span class="number">1</span>]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                    ans.<span class="built_in">push_front</span>(re_mp[tmp + <span class="number">1</span>]);</span><br><span class="line">                    ans.<span class="built_in">push_front</span>(re_mp[<span class="number">1</span>]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">                    ans.<span class="built_in">push_front</span>(re_mp[tmp + <span class="number">10</span>]);</span><br><span class="line">                    ans.<span class="built_in">push_front</span>(re_mp[<span class="number">10</span>]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">90</span>:</span><br><span class="line">                    ans.<span class="built_in">push_front</span>(re_mp[tmp + <span class="number">10</span>]);</span><br><span class="line">                    ans.<span class="built_in">push_front</span>(re_mp[<span class="number">10</span>]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">                    ans.<span class="built_in">push_front</span>(re_mp[tmp + <span class="number">100</span>]);</span><br><span class="line">                    ans.<span class="built_in">push_front</span>(re_mp[<span class="number">100</span>]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">900</span>:</span><br><span class="line">                    ans.<span class="built_in">push_front</span>(re_mp[tmp + <span class="number">100</span>]);</span><br><span class="line">                    ans.<span class="built_in">push_front</span>(re_mp[<span class="number">100</span>]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    deque&lt;<span class="type">char</span>&gt; str_tmp;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">6</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                        <span class="keyword">while</span> (tmp / int_mp[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            str_tmp.<span class="built_in">push_back</span>(re_mp[int_mp[i]]);</span><br><span class="line">                            tmp -= int_mp[i];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i = str_tmp.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                        ans.<span class="built_in">push_front</span>(str_tmp[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            power++;</span><br><span class="line">            n3 /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : ans) &#123;</span><br><span class="line">            cout &lt;&lt; i;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>解題</category>
        <category>ZeroJudge</category>
      </categories>
      <tags>
        <tag>解題</tag>
        <tag>Zerojudge</tag>
        <tag>進位制</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】Zerojudge a290: 新手訓練系列 ~ 圖論</title>
    <url>/solved/ZeroJudge/a290/</url>
    <content><![CDATA[<h1 id="題目連結"><a class="markdownIt-Anchor" href="#題目連結"></a> 題目連結</h1>
<p><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWEyOTA=">a290: 新手訓練系列 ~ 圖論<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a class="markdownIt-Anchor" href="#我的想法"></a> 我的想法</h1>
<p>先將圖建好，再用 BFS 慢慢走訪，從訪問的起點開始，走過的地方都標記為 true ，若最後終點是 true，輸出 Yes!!!，否則 No!!!</p>
<h1 id="參考解答"><a class="markdownIt-Anchor" href="#參考解答"></a> 參考解答</h1>
<figure class="highlight cpp"><figcaption><span>a290</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> N, M;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; N &gt;&gt; M) &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; d[N];</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="type">bool</span> check[<span class="number">800</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">            <span class="type">int</span> a, b;</span><br><span class="line">            cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            a--;</span><br><span class="line">            b--;</span><br><span class="line">            d[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 將能走的路徑都設為 true</span></span><br><span class="line">        <span class="type">int</span> A, B;</span><br><span class="line">        cin &gt;&gt; A &gt;&gt; B;</span><br><span class="line">        A--;</span><br><span class="line">        B--;</span><br><span class="line">        q.<span class="built_in">push</span>(A);</span><br><span class="line">        check[A] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> temp = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : d[temp]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!check[i]) &#123;</span><br><span class="line">                    check[i] = <span class="literal">true</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 訪問 B 點是否能走到</span></span><br><span class="line">        <span class="keyword">if</span> (check[B]) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Yes!!!\n&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;No!!!\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>解題</category>
        <category>ZeroJudge</category>
      </categories>
      <tags>
        <tag>解題</tag>
        <tag>Zerojudge</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】Zerojudge d732: 二分搜尋法</title>
    <url>/solved/ZeroJudge/d732/</url>
    <content><![CDATA[<h1 id="題目連結"><a class="markdownIt-Anchor" href="#題目連結"></a> 題目連結</h1>
<p><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWQ3MzI=">d732: 二分搜尋法<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a class="markdownIt-Anchor" href="#我的想法"></a> 我的想法</h1>
<p>純純的二分搜尋</p>
<p>範例：找 <code>8</code></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">1<span class="number"> 2 </span>3<span class="number"> 4 </span>5<span class="number"> 6 </span>7<span class="number"> 8 </span>9</span><br><span class="line">↑       ↑       ↑</span><br><span class="line">l       m       r</span><br></pre></td></tr></table></figure>
<p><code>5 &lt; 8</code> 所以左邊往中點 +1 移動</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">1<span class="number"> 2 </span>3<span class="number"> 4 </span>5<span class="number"> 6 </span>7<span class="number"> 8 </span>9</span><br><span class="line">          ↑ ↑   ↑</span><br><span class="line">          l m   r</span><br></pre></td></tr></table></figure>
<p><code>7 &lt; 8</code> 所以左邊往中點 +1 移動</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">1<span class="number"> 2 </span>3<span class="number"> 4 </span>5<span class="number"> 6 </span>7<span class="number"> 8 </span>9</span><br><span class="line">              ↑ ↑</span><br><span class="line">              l r</span><br><span class="line">             (m)</span><br></pre></td></tr></table></figure>
<p><code>8 = 8</code> 所以結束二分搜</p>
<h1 id="參考解答"><a class="markdownIt-Anchor" href="#參考解答"></a> 參考解答</h1>
<figure class="highlight cpp"><figcaption><span>d732</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> *data, <span class="type">int</span> n, <span class="type">int</span> qq)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = n;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (data[mid] &lt; qq) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data[mid] &gt; qq) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; mid + <span class="number">1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="type">int</span> data[n], q[k];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        cin &gt;&gt; q[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="built_in">solve</span>(data, n, q[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>解題</category>
        <category>ZeroJudge</category>
      </categories>
      <tags>
        <tag>解題</tag>
        <tag>Zerojudge</tag>
        <tag>二分搜</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】Zerojudge d784. 一、連續元素的和</title>
    <url>/solved/ZeroJudge/d784/</url>
    <content><![CDATA[<h1 id="題目連結"><a class="markdownIt-Anchor" href="#題目連結"></a> 題目連結</h1>
<p><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWQ3ODQ=">d784. 一、連續元素的和<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="參考解法"><a class="markdownIt-Anchor" href="#參考解法"></a> 參考解法</h1>
<h2 id="第二次解-20230527"><a class="markdownIt-Anchor" href="#第二次解-20230527"></a> 第二次解 2023/05/27</h2>
<figure class="highlight cpp"><figcaption><span>d784</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="type">int</span> data[n];</span><br><span class="line">        <span class="type">int</span> mx = -INT_MAX;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            cin &gt;&gt; data[i];</span><br><span class="line">            sum += data[i];</span><br><span class="line">            mx = <span class="built_in">max</span>(mx, sum);</span><br><span class="line">            <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) sum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; mx &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第一次解"><a class="markdownIt-Anchor" href="#第一次解"></a> 第一次解</h2>
<figure class="highlight cpp"><figcaption><span>d784</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n1;</span><br><span class="line">    cin &gt;&gt; n1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n1--) &#123;</span><br><span class="line">        <span class="type">int</span> n2;</span><br><span class="line">        cin &gt;&gt; n2;</span><br><span class="line">        <span class="type">int</span> data[n2];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n2; i++) &#123;</span><br><span class="line">            cin &gt;&gt; data[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> sum = data[<span class="number">0</span>], max_sum = data[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n2; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) sum = <span class="number">0</span>;</span><br><span class="line">            sum += data[i];</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; max_sum) max_sum = sum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; max_sum &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>解題</category>
        <category>ZeroJudge</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>解題</tag>
        <tag>Zerojudge</tag>
        <tag>區間</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】Zerojudge e287. 機器人的路徑</title>
    <url>/solved/ZeroJudge/e287/</url>
    <content><![CDATA[<h1 id="題目連結"><a class="markdownIt-Anchor" href="#題目連結"></a> 題目連結</h1>
<p><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWUyODc=">e287. 機器人的路徑<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a class="markdownIt-Anchor" href="#我的想法"></a> 我的想法</h1>
<p>純屬 BFS</p>
<h1 id="參考解答"><a class="markdownIt-Anchor" href="#參考解答"></a> 參考解答</h1>
<figure class="highlight cpp"><figcaption><span>e287</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MN_const 1000001</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> G[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="type">bool</span> visit[<span class="number">105</span>][<span class="number">105</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="type">int</span> mn = MN_const;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            cin &gt;&gt; G[i][j];</span><br><span class="line">            <span class="keyword">if</span> (G[i][j] &lt; mn) &#123;</span><br><span class="line">                x = i;</span><br><span class="line">                y = j;</span><br><span class="line">                mn = G[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set boundary</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) visit[i][<span class="number">0</span>] = visit[i][m + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; i++) visit[<span class="number">0</span>][i] = visit[n + <span class="number">1</span>][i] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">int</span> nx, ny;</span><br><span class="line">        <span class="type">int</span> d_mn = MN_const;</span><br><span class="line">        ans += G[x][y];</span><br><span class="line">        visit[x][y] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> ix = x + dx[i], iy = y + dy[i];</span><br><span class="line">            <span class="keyword">if</span> (G[ix][iy] &lt; d_mn &amp;&amp; visit[ix][iy] == <span class="literal">false</span>) &#123;</span><br><span class="line">                nx = ix;</span><br><span class="line">                ny = iy;</span><br><span class="line">                d_mn = G[ix][iy];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (d_mn == MN_const) <span class="keyword">break</span>;</span><br><span class="line">        x = nx;</span><br><span class="line">        y = ny;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>解題</category>
        <category>ZeroJudge</category>
      </categories>
      <tags>
        <tag>APCS</tag>
        <tag>BFS</tag>
        <tag>Zerojudge</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】Zerojudge f377. 運算式轉換</title>
    <url>/solved/ZeroJudge/f377/</url>
    <content><![CDATA[<h1 id="題目連結"><a class="markdownIt-Anchor" href="#題目連結"></a> 題目連結</h1>
<p><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWYzNzc=">f377. 運算式轉換<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a class="markdownIt-Anchor" href="#我的想法"></a> 我的想法</h1>
<p>中序式轉後序式的基本題目，概念詳見：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nZ2Vya3VvLmdhLzAxMi1pbmZpeC1wb3N0Zml4Lw==">【筆記】前序式、中序式與後序式<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="參考解答"><a class="markdownIt-Anchor" href="#參考解答"></a> 參考解答</h1>
<figure class="highlight cpp"><figcaption><span>f377</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">order</span><span class="params">(<span class="type">char</span> cr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cr == <span class="string">&#x27;+&#x27;</span> || cr == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cr == <span class="string">&#x27;*&#x27;</span> || cr == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ouo;</span><br><span class="line">    string str;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">getline</span>(cin, str)) &#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; symbol;</span><br><span class="line">        string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                symbol.<span class="built_in">push</span>(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">&#x27;+&#x27;</span> || str[i] == <span class="string">&#x27;-&#x27;</span> || str[i] == <span class="string">&#x27;*&#x27;</span> || str[i] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (symbol.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    symbol.<span class="built_in">push</span>(str[i]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="built_in">order</span>(str[i]) &lt;= <span class="built_in">order</span>(symbol.<span class="built_in">top</span>())) &#123;</span><br><span class="line">                        ans += symbol.<span class="built_in">top</span>();</span><br><span class="line">                        symbol.<span class="built_in">pop</span>();</span><br><span class="line">                        <span class="keyword">if</span> (symbol.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    symbol.<span class="built_in">push</span>(str[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (symbol.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                    ans.<span class="built_in">push_back</span>(symbol.<span class="built_in">top</span>());</span><br><span class="line">                    symbol.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                symbol.<span class="built_in">pop</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isalpha</span>(str[i])) &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(str[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!symbol.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(symbol.<span class="built_in">top</span>());</span><br><span class="line">            symbol.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">            cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>解題</category>
        <category>ZeroJudge</category>
      </categories>
      <tags>
        <tag>解題</tag>
        <tag>Zerojudge</tag>
        <tag>後序式</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】Zerojudge f832: 隕石 (Meteorite)</title>
    <url>/solved/ZeroJudge/f832/</url>
    <content><![CDATA[<h1 id="題目連結"><a class="markdownIt-Anchor" href="#題目連結"></a> 題目連結</h1>
<p><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWY4MzI=">f832: 隕石 (Meteorite)<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a class="markdownIt-Anchor" href="#我的想法"></a> 我的想法</h1>
<p>貪婪演算法（Greedy），每一步都使用最佳的解，從而導致希望結果也是最佳的解。</p>
<p>就範例二而言</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">8</span> <span class="number">5</span> <span class="number">7</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">9</span> <span class="number">6</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p>機器之間或隕石之間，又或者是機器與隕石間無任關聯，我們將他們排序</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">5</span> <span class="number">7</span> <span class="number">8</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">6</span> <span class="number">6</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>
<p>當機器可抓取的最大能力是 9，先找到能符合小於 9 的對大數字是 8（此時就是這一步的最佳解），<code>sum += 8</code>，並且換另一台機器。<br />
當機器可抓取的最大能力是 6，先找到能符合小於 6 的對大數字是 5（此時就是這一步的最佳解），<code>sum += 5</code>，並且換另一台機器。<br />
當機器可抓取的最大能力是 6，先找到能符合小於 6 的對大數字是 1（此時就是這一步的最佳解），<code>sum += 1</code>，並且換另一台機器。<br />
沒石頭可以抓，輸出 <code>sum</code>，結束程式。</p>
<p>:::warning<br />
總和會大於 <code>2^32</code>，故 <code>sum</code> 要使用 <code>long long</code><br />
:::</p>
<h1 id="參考解答"><a class="markdownIt-Anchor" href="#參考解答"></a> 參考解答</h1>
<figure class="highlight cpp"><figcaption><span>f832</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> rock[n], robot[m];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; rock[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) cin &gt;&gt; robot[i];</span><br><span class="line">    <span class="built_in">sort</span>(rock, rock + n);</span><br><span class="line">    <span class="built_in">sort</span>(robot, robot + m);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> index_bot = m - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; index_bot &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (robot[index_bot] &gt;= rock[i]) &#123;</span><br><span class="line">            sum += rock[i];</span><br><span class="line">            index_bot--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>解題</category>
        <category>ZeroJudge</category>
      </categories>
      <tags>
        <tag>解題</tag>
        <tag>Zerojudge</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】Zerojudge j125. 4. 蓋步道</title>
    <url>/solved/ZeroJudge/j125/</url>
    <content><![CDATA[<h1 id="題目連結"><a class="markdownIt-Anchor" href="#題目連結"></a> 題目連結</h1>
<p><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWoxMjU=">j125. 4. 蓋步道<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a class="markdownIt-Anchor" href="#我的想法"></a> 我的想法</h1>
<p>尋找高度差的最小值，但線性搜尋會爆，所以用二分搜，找到此最大高度的最小值後再跑一次 BFS 算路徑長度。</p>
<h1 id="參考解答"><a class="markdownIt-Anchor" href="#參考解答"></a> 參考解答</h1>
<figure class="highlight cpp"><figcaption><span>j125</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> high = <span class="number">-1</span>, low = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> g[<span class="number">305</span>][<span class="number">305</span>];</span><br><span class="line"><span class="type">int</span> viewed[<span class="number">305</span>][<span class="number">305</span>];</span><br><span class="line">queue&lt;pair&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, <span class="type">int</span>&gt;&gt; todo;</span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bin_s</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">    todo.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, <span class="number">0</span>), <span class="number">0</span>));</span><br><span class="line">    viewed[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!todo.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> x = todo.<span class="built_in">front</span>().first.first;</span><br><span class="line">        <span class="type">int</span> y = todo.<span class="built_in">front</span>().first.second;</span><br><span class="line">        <span class="type">int</span> cnt = todo.<span class="built_in">front</span>().second;</span><br><span class="line">        viewed[x][y] = <span class="number">1</span>;</span><br><span class="line">        todo.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (x == n - <span class="number">1</span> &amp;&amp; y == n - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> nx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> ny = y + dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt;= n - <span class="number">1</span> &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt;= n - <span class="number">1</span> &amp;&amp; viewed[nx][ny] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span> h = <span class="built_in">abs</span>(g[x][y] - g[nx][ny]);</span><br><span class="line">                <span class="keyword">if</span> (h &lt;= m) &#123;</span><br><span class="line">                    viewed[nx][ny] = <span class="number">1</span>;</span><br><span class="line">                    todo.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(nx, ny), cnt + <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            cin &gt;&gt; g[i][j];</span><br><span class="line">            high = <span class="built_in">max</span>(g[i][j], high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find h</span></span><br><span class="line">    <span class="keyword">while</span> (high - low &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// queue.clear()</span></span><br><span class="line">        <span class="keyword">while</span> (!todo.<span class="built_in">empty</span>()) todo.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">// viewed init</span></span><br><span class="line">        <span class="built_in">memset</span>(viewed, <span class="number">0</span>, <span class="built_in">sizeof</span>(viewed));</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> m = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> check = <span class="built_in">bin_s</span>(m);</span><br><span class="line">        <span class="keyword">if</span> (check == <span class="number">-1</span>) &#123;</span><br><span class="line">            low = m;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            high = m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; high &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// print step</span></span><br><span class="line">    <span class="comment">// queue.clear()</span></span><br><span class="line">    <span class="keyword">while</span> (!todo.<span class="built_in">empty</span>()) todo.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="comment">// viewed init</span></span><br><span class="line">    <span class="built_in">memset</span>(viewed, <span class="number">0</span>, <span class="built_in">sizeof</span>(viewed));</span><br><span class="line">    cout &lt;&lt; <span class="built_in">bin_s</span>(high);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>解題</category>
        <category>ZeroJudge</category>
      </categories>
      <tags>
        <tag>APCS</tag>
        <tag>解題</tag>
        <tag>Zerojudge</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】Zerojudge j178: 手遊廣告 (Advertisement)</title>
    <url>/solved/ZeroJudge/j178/</url>
    <content><![CDATA[<h1 id="題目連結"><a class="markdownIt-Anchor" href="#題目連結"></a> 題目連結</h1>
<p><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWoxNzg=">j178: 手遊廣告 (Advertisement)<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a class="markdownIt-Anchor" href="#我的想法"></a> 我的想法</h1>
<p>水題。</p>
<h1 id="參考解答"><a class="markdownIt-Anchor" href="#參考解答"></a> 參考解答</h1>
<figure class="highlight cpp"><figcaption><span>j178</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> m, a;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; a;</span><br><span class="line">    <span class="type">int</span> T[m];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        cin &gt;&gt; T[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &lt;= T[i]) <span class="keyword">break</span>;</span><br><span class="line">        a += T[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>解題</category>
        <category>ZeroJudge</category>
      </categories>
      <tags>
        <tag>TOI</tag>
        <tag>解題</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】Zerojudge j179: 資料分類 (Classification)</title>
    <url>/solved/ZeroJudge/j179/</url>
    <content><![CDATA[<h1 id="題目連結"><a class="markdownIt-Anchor" href="#題目連結"></a> 題目連結</h1>
<p><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWoxNzk=">j179: 資料分類 (Classification)<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a class="markdownIt-Anchor" href="#我的想法"></a> 我的想法</h1>
<p>這題用到 <code>#include &lt;string&gt;</code> 裡的 <code>stoi()</code> 函式和 <code>to_string()</code> 函式。（如果你想自己寫出來這兩個函式也可以www）</p>
<p>然後其他照著題目敘述做應該可以吧！</p>
<h2 id="stoi-用法"><a class="markdownIt-Anchor" href="#stoi-用法"></a> stoi() 用法</h2>
<figure class="highlight cpp"><figcaption><span>use_stoi()</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str = <span class="string">&quot;01234&quot;</span>;</span><br><span class="line">    <span class="type">int</span> a = <span class="built_in">stoi</span>(str);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">輸出：</span><br><span class="line"><span class="attribute">a</span> <span class="operator">=</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure>
<h2 id="to_string-用法"><a class="markdownIt-Anchor" href="#to_string-用法"></a> to_string() 用法</h2>
<figure class="highlight cpp"><figcaption><span>use_to_string()</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">-1234</span>;</span><br><span class="line">    string str = <span class="built_in">to_string</span>(num);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str = &quot;</span> &lt;&lt; str &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">輸出：</span><br><span class="line"><span class="attribute">str</span> <span class="operator">=</span> -<span class="number">1234</span></span><br></pre></td></tr></table></figure>
<h1 id="參考解答"><a class="markdownIt-Anchor" href="#參考解答"></a> 參考解答</h1>
<figure class="highlight cpp"><figcaption><span>j179</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">solve</span><span class="params">(string num, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">stoi</span>(num), a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (len) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            a = n / <span class="number">100</span>;</span><br><span class="line">            b = n % <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">if</span> (a &gt; <span class="number">9</span>) a = (a / <span class="number">10</span>) * (a % <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span> (b &gt; <span class="number">9</span>) b = (b / <span class="number">10</span>) * (b % <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span> (a == <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">to_string</span>(b);</span><br><span class="line">            num = <span class="built_in">to_string</span>(a) + <span class="built_in">to_string</span>(b);</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            a = (n / <span class="number">100</span>) * ((n / <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">            b = ((n / <span class="number">10</span>) % <span class="number">10</span>) * (n % <span class="number">10</span>);</span><br><span class="line">            num = <span class="built_in">to_string</span>(a) + <span class="built_in">to_string</span>(b);</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            a = n / <span class="number">10</span>;</span><br><span class="line">            b = n % <span class="number">10</span>;</span><br><span class="line">            num = <span class="built_in">to_string</span>(a * b);</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string num;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (num.<span class="built_in">size</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">        num = <span class="built_in">solve</span>(num, num.<span class="built_in">size</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; num;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>解題</category>
        <category>ZeroJudge</category>
      </categories>
      <tags>
        <tag>TOI</tag>
        <tag>解題</tag>
        <tag>Zerojudge</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】Zerojudge j180: 戰備存糧 (Food)</title>
    <url>/solved/ZeroJudge/j180/</url>
    <content><![CDATA[<h1 id="題目連結"><a class="markdownIt-Anchor" href="#題目連結"></a> 題目連結</h1>
<p><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWoxODA=">j180: 戰備存糧 (Food)<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a class="markdownIt-Anchor" href="#我的想法"></a> 我的想法</h1>
<p>這題比較有趣，也有點像貪婪，涉及到每次食物下次減少時，倉庫的個數也要減少到最佳狀況（把倉庫減少當成守衛減少）。可以直接看我程式碼應該會比較好理解。</p>
<p>舉例</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>這筆測資食物總共有 12 個。</p>
<p>第一天減少 3 個（倉庫當前數量；守衛數量）：<code>12 - 3 = 9</code></p>
<p>確認剩下的食物是否可以塞進小於等於當前倉庫數量的大小（每次減少 -1）：<code>(3 - 1) * 4 = 8</code></p>
<p><code>9 &lt;= 8</code> 所以今天先不減小</p>
<p>第二天減少 3 個（倉庫當前數量；守衛數量）：<code>9 - 3 = 6</code></p>
<p>確認剩下的食物是否可以塞進小於等於當前倉庫數量的大小（每次減少 -1）：<code>(3 - 1) * 4 = 8</code></p>
<p><code>6 &lt;= 8</code> 所以今天倉庫數量減至 2</p>
<p>第三天減少 2 個（倉庫當前數量；守衛數量）：<code>6 - 2 = 4</code></p>
<p>確認剩下的食物是否可以塞進小於等於當前倉庫數量的大小（每次減少 -1）：<code>(2 - 1) * 4 = 4</code></p>
<p><code>4 &lt;= 4</code> 所以今天倉庫數量減至 1</p>
<p>最後四天相同做法（也可以判斷數量為 1 時，剩下食物個數加上前面 n 天之後，直接輸出 3 + 4 = 7 天，不過應該不影響答案）</p>
<h1 id="參考解答"><a class="markdownIt-Anchor" href="#參考解答"></a> 參考解答</h1>
<figure class="highlight cpp"><figcaption><span>j180</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; depositary;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        cin &gt;&gt; b;</span><br><span class="line">        depositary.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(a, b));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; depositary.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> days = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> food = depositary[i].first * depositary[i].second;</span><br><span class="line">        <span class="keyword">while</span> (food != <span class="number">0</span>) &#123;</span><br><span class="line">            food -= depositary[i].first;</span><br><span class="line">            days++;</span><br><span class="line">            <span class="keyword">while</span> (food &lt;= (depositary[i].first - <span class="number">1</span>) * depositary[i].second) &#123;</span><br><span class="line">                depositary[i].first--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; days &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>解題</category>
        <category>ZeroJudge</category>
      </categories>
      <tags>
        <tag>TOI</tag>
        <tag>解題</tag>
        <tag>Zerojudge</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】Zerojudge j605. 1. 程式考試</title>
    <url>/solved/ZeroJudge/j605/</url>
    <content><![CDATA[<h1 id="題目連結"><a class="markdownIt-Anchor" href="#題目連結"></a> 題目連結</h1>
<p><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWo2MDU=">j605. 1. 程式考試<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a class="markdownIt-Anchor" href="#我的想法"></a> 我的想法</h1>
<p>APCS 第一題純水題</p>
<h1 id="參考解答"><a class="markdownIt-Anchor" href="#參考解答"></a> 參考解答</h1>
<figure class="highlight cpp"><figcaption><span>j605</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> data[n][<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> max_num = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> max_num_time = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> error_times = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; data[i][<span class="number">0</span>] &gt;&gt; data[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (data[i][<span class="number">1</span>] &gt; max_num) &#123;</span><br><span class="line">            max_num_time = data[i][<span class="number">0</span>];</span><br><span class="line">            max_num = data[i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (data[i][<span class="number">1</span>] == <span class="number">-1</span>) &#123;</span><br><span class="line">            error_times++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> total = max_num - n - (error_times * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ((total &lt; <span class="number">0</span>) ? <span class="number">0</span> : total) &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; max_num_time &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>解題</category>
        <category>ZeroJudge</category>
      </categories>
      <tags>
        <tag>APCS</tag>
        <tag>解題</tag>
        <tag>Zerojudge</tag>
      </tags>
  </entry>
</search>
