<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>5 月 8 日 雲</title>
    <url>/20220508/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="1ead74ec3946df3d3107908626941ffcf243463b7e293f0d211bcfb4714a6f05">c4379dbc51520bb23a681c5b597ae53adf5b796ff3f8f773567ca1a18ef872955e626612fc462808cc63d71fd09b0396e096bc063e6acba7da8cf950b803d8554c780627c47bd313414aca95532ff03524cbe72333f4ac687c45accd0fef347865564c1fb1b20c6b7a3087847bea88ec818ae85b6f2f1b6fdc2ef02ef9604dc27d3cd271849359facfe6be875c9ee93b3d2364e2c95f501999469d104290dea44b76df872633b763a5575fb281a55b5b1d2f3fe658614a4d99c6a29be700d071ae6cfc3b31475373f7bfa3add8d0fb9a1e91dad745257a2e9bc3fd17552f5411bf8255e5c6f879088c8608f9e2b3895bdcc18d70c228b99fc20b32a4054b2cdfacef3f860017f5f42dd745b5efa62800422fa8c92cd54fdd620feb45460e7243aafc708e9716800df8b2c31d2b03abaf291cedcd71d59e060b8c7c05ac58f1cde2ca51c920eaf15ebadb36d997f7bf912b348eae31c21f16a071bcba411556d70c71abf2c38769d9bdd6e7dc6b4b19cd8d7903610e8953520f6571e3438ba6c44439813f95963183e3792409987783eaf2afb7fe8d8365492b6718e98393b785bbe60ceefbbbb2aa3410840e26683e942ae2c1c5d89c4effad1415370a6b3129a4544be439398c804d6e530d1eed528d27b2bf1536ac63076e504274e3000c3298fe83970547440428b637611bd5a1c665f7c60a4af2325e3147a5d1f694f3a09eb46f414db934d7492247a3c49acfa0fc1f92501272bd2f214275ae9e9e5f638022d44df8315d84797cd9d6dc73a4f3d9460ce0bbfed31a3941aced1e5091ff665902e3d69786e6f1eec023da1d7ebc5ffd4a1e8309cbe6c89aef908273f534dc533eab9840fe8e4f5d14adb6567e88c5ac786f2f33362e5a49fd9fcb66bc3ea7ea2f16d593ddbc2446276f124ec8b5e926cf7dc82b9a66b01612d2baa6fc85db14449d84efa365ed8298b0b1f113e1bdbb50284789a2c5d86a7bb0da5238d678470722b20f753ac40a5ed602da1e3054a1d57357428815f251614d7d95524db84e25b84f7496bfab66f067c9db8476c78c8bb82627015ea94c7711fbba2cc80e3cb89dcf49fd1d901b122d43c724d461105a1b57374d87e4acc3cba0ea6d1e2ee06600a379b33397dc27aa2d8971ad1bc18543d4ec6e16700e65ddda1215e8fad55df1fcdc9f3803020f7b40128fb49d0941be9748d11da05148551c03218a21b5aa7c5fef7d435731fe323113560358a34298a4701bdec93123992c607048787e2345803619cbb428e4ed446717e3142bd9f62c8029fd9fd7ff9f17b579e1f11909268a42c1321e728b19d57230de402e0b40c7aab113cf1ad74e1d003ee7e74e208002985e9384ff20d8fcbf03f2dc1f917c8573741be1bbe3589e16fdf38db7952da68d36ddd9ef2bbd5178b67b707c9996d5acb01497b6ec759d9254f9d95a7f4dae0de715fcfab945cc80e102819b72d0f72eca1f0a966409c46fdadf498c1f62b1a683a9826662b7ea8d240eb4498787ec156d92f93a74359c2166c902899f3ceb6d9938316e5c8c147b843b749320d2cec83d1834b7e5afa04edfd4089ee53ce3665bf47cf89b0ecef733139d7783497f7e1584d546dae47ba17b0d966b19f3fd1b605d2dbd11a3743d9dd137b5a259429e8bb12994c84b5afe7055f6a91b7ea925d2229df875d5f0322e9d503e717e50600131b21ea7d83ee5c3af2042ba740600098400161f768e557fd0c12b36b7c7e50bcf4a854a4c1aced35ee6283fb6719bc2a6c12abae57e2c2fa58dba4c021874f7e77100b934e633f09d6e6039cf8ecbc7b28732cee28dd3e7d50180bbfe559ce9e6244a2d4018bf5f204b42ec04ff821b26e3d54f69e28dd7adc1f9142bda845bfaf5d08fa18bbe11299ebf30223b4906b84803886f2d1fcca857cf384f079348ef5c0851b55f5561c4bd57e34dcf6c894898cc1e3d29a8d51d50f2777cc329fc6cc197b6b9b82a40b1542a5d98f00e25cdb6a17e12e83d365c8935824d1336313df47905a85c9e9f62a18acd185bef8345e17d63fde6f467068e527bb097e4a9af96003954d6c932cc32b5933a8ff2785689c79b451ba11d782b38490598abd65fbc6edd65b759b3e3e5fe4466c557191c41077bb2a87f42fca76eaa574a6c9c1731a6b004aa005f3aa4aa98f076b608d61c40821910c3d4c73a02ec1d8b3d50450d3fda213beb20408beaf684e46d8253d2db73e9b351f7cf8f78e75151d10c590178badd3ea526e199b14b91f695bbb0c4d6c1c7b4adb4df7b68e826bd5c68e4b3498c95d23da85c1dcb92c1d5687f79fa0f18f63a7b3cecf91f766150802c6ad7e1b60d49aea8135070932b2a5178f945322b3c46e996e2e10a7ace27b9e0df1efaba81ef843111ec5924b6456117b8431d6b5f33d50175d166d653424c28e234ce38a51cbaf7179a7ec716d3f2e49e236a4328a407301e87ca69fd504ba77972d03cf19a628f2170a39aa01d59104cae995bf128734e234fd18650d54a694fc5af3488e75762344994e26e3cba2ee86ea5f79496e20a41ecbc6b361b8dec46fb885b0d9b719bacce71684bc66d6d3d736e01f1727555692dc66252a75e343d1fdeb75d8083ae79b55936670730b6b9f1821f9f6ce36dff8f541f1824593c5e189e5393376ea798c6627546cbfe1e2a8dbce7d1d83a36f29dad8477813e156e63cab943a9e894f8b7dd4c670ac60629c38ee7a51a5abcfa275ccd2b2ba04b2613b76734ff0a8314f31f24c19ca415393e871d38e8dd998df7af5abb0f44addb1e1b7aacb9e9fc0320cd23193ab1a240fbf957f42ed5b8549431065a38eb854ec911254acc2cf590b05e0da6340dd5cb682a30762c72e7d4757e53bfb4378608181f975a21d357f9e196852769b40c7639880acccde44926ff8c841fa657b9ec463f1ed05f4eda7e24233eb2dd96ab95dd45d627cddcc007ce47100a961bb7377c6f0a7946d1257a2fd2ec6517620f0d27e2ba0d6c6953ba8ae3a96fb89166d976c6a1cbf9177b511e092ba5dcf426fd42cc295b2238fd0904656102ca265deed74b13f7b472fd3e579c1ab4a2febe13c6611ed4c6455da36ecc48776b9f80e3cb3b9e1ae56ff6e93260e8655946cf6d0a6523c1e220ceac9e7ecd6f39cf23e58afeed24f3d48bc66d4121878016515b67d343efd5a1fb46d8d306c359e9c12c37e08fef33b8e778f5063efb2e4d203bfdb26b68574039cbd1ac0a77bddc4d985dc1f768aaf4f1c846e8628495af30bb558565730fc444079df101cda76a57e1319f3f3e09a0e74d22e1fdf767f00acece6e48280f99fb1c1ca899368ec3b5088499188368313cd8d24cf908bb3f126b95c0517d46895d5193a285f798d6280598228bfc7775d90de08edd60b33e52146a4e78306289d9928158ac50eb64cd68864f090d87e11e77e721b003f88d63545dbc8396b7ccaba8141193b694558735afeb5b26a149dda4ac2a5a06e490470db6155c7f24d00f087991e19c65a131cc043b4940ca11d7d4c62c88d95085e346e8f333aca03d94f55238883b0d6516d1652cb596d96bedcb8642c9e17f6734fb7e43a74d07883a9075810ff30fd97f3377a1a27cd2aea604</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活點滴</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>5 月 10 日 小雨</title>
    <url>/20220510/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="8a6e24912af376c0beac810f2343fb5e42344daf322c63b4f77ec5d890d0bc43">c4379dbc51520bb23a681c5b597ae53a1869955313f65a29abd12e88faa2d4aa923b96bcaea208789f9d7c66f64cbcd89b2c9bc0328928b9e65676c9cc9763062c877fffb35fc17159827e588a610885459c58194f054a8a0344ae3d101b42a62505fb8e6ae277a52004327f29692c9c568722f4402cb961b6216cadbc9cf18c35857c144cf08cabd0eb5cc790ed5023ad616f583c927f4efd4eef55d42ba22fc4d62645940d8b781bd795b24ac921ff</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>5 月 11 日 雨</title>
    <url>/20220511/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="1330ecedd744b0ed0c89a1fd1ca508b0bbd85e60f194ed7165e5a6009620ae6d">c4379dbc51520bb23a681c5b597ae53a7fe50299f6833361f486c5fd07c541460e8edbabbd796e5c46e920b0099519aee2000b6c8968bcab753b43b9d8911c1f28e6bc4c5190eca8cc9ea8ade2ccd7672527bbfe5d4912386603681b4ac092c0e719a90ef0f346a3aef26700ce5890f26ea4c7d6078f1e8a898828cabf75460e91cfc154bcfb1467a7267243ef67f3197536db88aa7862587290a160c4c0a403b9d42a29142e9cc2ba5d7782e8d1076aa33b21d03afd7aeebf4aae6905a99912613826806de8cf1274b25e66986402b3cee8ac40abd20bf5583bcc56d136a085f28591eec5da485013c94e5cf5894e153f31a9688d7d1d112fb55a1cb96de3e8b1003f6e40b1805ae4b150e87da2087a2b99470a07588e81de0f79500da47e9040c2597625d147ccea16e0830ed1532fd6e6d2f3987ed1eaafa1b63ffcc7f826a36c6328e9ffdf87e4eb3ecade4df2dd833f6a247a01799e54d4820716ea2b9a66573ae363099242f77651450af517d6b581f656f64957819c0678b99432d410814077bc16bac7ebc5cf81f1b670057976732d5c2ced65cdaa7ed6a2090c0a016010c2f9a9c8bcb86ccd5dfe44a8f6ec9d93eccd609b660eb8c3088bfe27aec5cbae865c178fdd59055fe6e60ac72d0424d1951e6974ec83e44e8be4456bfeb74064e142dfbdccb993e48c6d31d196ebf19a76c56653c21ac8804c5b80950e88c5b42d5631539b361648e292452c216409d4ea985cd93810f17aa396db6904e10226f8e29c264dbc3a8714ce642aac9d8a57fa5f666e7e693d856d319cf5d2ab24921b656f3b2e087dd3fa5c5d87c7b8d55a7e5c1b237d08c5aafe376a93d2d8b338613769627a3fd5822c3b5874c13063daf2a1c511fa5137ee0bb5edcda3cb386598d8b7cd428bb02ce33d2af1ee0c8f73b7bf7391cbac7f3db03c976792e5492cf50eb04b55788c32571383958d28d51df8ce24d99e987493cf66c6d921bb25d01464ced52a387cb28b4248978da6978de0c60a7c153d45182d7c35e51474a453401821db77c7fd3a69dcef7e3a9c22cbe661a30b2d55db806042473d1c378150a06dd64efc836eadab563e406ccd1195c39f28495aebc686834d1d284cb511c6b9cd805ad1643e8553e8be072337e54a4a65ce2cc34afa7ad5d5f6c789f60d100d9d78ccc03325de13cd0ea11691449f83a8f6f8848c5208b0f7b6bc21dbe07076903626b62b0603324611038869524330f30086391a674714201ad0c675b4432d391579f44a242bcbce59cb69e40cb8ce31773797d8f1e94a7d664f0e6c0ac64c948878c6df257f18feb7ae846b987b15742ee8a4e7d97d3a6debdcceacba26c726a581263639aad91f73682b76030d0c4d63c6635116e1a0265796dfe0c196bc38cfaab18f4d4abe32e7a3476acf7ee0831c412465d3bd171c6e0dc5ce363033863afed46094c42414e3d79056ef483eacb27ee4feeceeb30c5934faa379910464dd1570f3a0b39e89c19743a71c484c34e40738ef5396f122f34d201464ff96f555e3570e92000c05539317a397b8cb8e91f64deb6b61d650a4fdbfc77969322e21f3f3e3bb42d9bb7cb8867c</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>5 月 24 日</title>
    <url>/20220524/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="f530252737f2749a6fa08a5f634e2d6095f5d1ea6ec877bd13751680356c5ab6">c4379dbc51520bb23a681c5b597ae53afcd71c255395340f680c5e0e1e6fc2c29190548a9cb49bc2bd0e055147b0521f854fcd8dda1f2d75d19efaa25053e1653c6450d6b294bc23dab3f63bb18dd61b900d2d744672b4998c6a3a479f281dbc35274b9cb50b6c6b0c95faba600384189589a4165e364719d68834d96b2d4b13d569fca54ab5c5ad2fc090962704f97215511e3f430e30e883f0e2a7adc0b71d78c3e9968aaf70499432f06613a68c5aadefc9cd9d0d9b78d90203bdff160e5c46dfc716b72eb107615a5df270d86f7ae906c7b65de64238ce2bbc2f7a72252a3482fe8c75a52afa85d89c3033ad04abb3e5ac9725fb6992955fe99df25be9a312875c52b02bdca2478b09e33bbdeeb8ddd93e2ae47bd7251c7f32ff085794ec81832d270a9c6108b2b28047564f788c2bb466a73fb180b1981739805c767860b7053a93100a639171aedfc1821bc8954e78822ffe71605c483a3a39636485efa4528bfa39474883130f6ce0a1d987bb85eea0150b0100c7bc3a7ee5112b2e7c75501363f62f7bac494c39c11052d016139709d2aafac21b9c8a0a857695326ffd5388e52aa3157b090d817082fcbdec5830f2c83c8fd775e7052a78df0f16905e20cb14ca25a69dfd781511c0247a6f88088be35b8021a83fe6b92c3c76d85f49ca48956a776a7b47e25854d42dd158a56974ad1bd3e95595d95e4f96374991c0ef6b5125aae2129ac9840ed1505d6730b9521bc22655b87b6f78f0bc7a240a5fd067a0747a261586b75b37ba06ffa02e69cce26f871e344860065a49271ba37663b2b2298929beb67ba5345691b3987e8b5dd90ee8c1a74ab20ddf8e74c63a0ea87252551e07e845be49e1870d1e5deb2f4b076dbc9779e035697226725e4de8612f2b2ab78c2555e1918538f5f85389480303face8bc100dcdd4c3bcd98d1c9737b3c9087b482437af260c6995e9433e8ebdf652a9449a873f78889550275c3e8e1c46bf930307bb57fd31c3fbd05</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>5 月 9 日 陰</title>
    <url>/20220509/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="01851a9b321f9efe9c2d1cd2dfbd5f6017518011f343bdacd4816d380d3e6b62">c4379dbc51520bb23a681c5b597ae53a5071089899c950bb8cc7414f7845b427bdf2c9ce0465a0e0d08ac59a646fe6d0b0461646f505ef7e6bd27b2b5d6a0209a22203efd990c603e974289d119755f46e163f885943a6179496140a08a8a1dbe5c16ff83c50f433bb9c09bbddf99c6265eac72acec7bd3419b928e1ae52f0c0f4e447800e772fe094cabfdfa698c7587177ab20f8a68ced6ad6a10d030f5ae5cce1746e55186ec950bd14e6f7ab8e34d93be00e1f3a1eb70b6a0908ba1712be25311faaf8183128a109a2bd62c1410753bfb1ed61bb24138816d7603869f52b51c1323c245757348462cad9a5acdb68dc56dc6e912de89a4b2a33263928b73320e6d943574d91d4dce061fc826f6f5d94eefaa5edbfed6d6b69878461d80d4a83e24ff229cb1484c47d5b4e0e8b5b75bb0a1e11996c39a5767aefb3ca023663b24f8af34f297d90f2406795e160f58d80de4eb4e3a2bb2bb223cd1d520d1cea176e630ade704eb8188816eb63d5f2b153c395b0ff00762f30e0b4ce132cb11480e8f41dfa1a742130de73d8d5825240286d48019a10aafbc75e5b6d2a7ba80cc33bf3ff1e6bf234c3048ff682c5b4bcd02b2a4a1ef308706dfe7dc04b70d2e4af7e5bd57faa6783f822bd1bff58ad706f3e5c92d6e0525af061154267640d965e2c8e3a3c6045a7566ea32ceb96b4b95d8d05a12d841fa8634a713d875495d2a38efb94dba9f65903b7d11cb4950f93a8abe0bd4dc5fbf9624a212151c38e6c7586d6bf4fbe49a9bee136d93861b210723dee377dd9870cc26c23dc999ce446ec424487b0856384293ba8ccba36387c6c3aeb10692a197b5ab5312a6a82fa2c0d5395e10c53d798d7e80ae20aaef680549166e1a82a524c781949bf9b0d135c525140a40f489b7e817a29724e58da324fd5a98468982cdf72cecb64b7fbbde6a7d457c0dadb480fb243181cb569b099b00dcb4014229076deffd2b6e96ec2ece1914f0df43d26d1e6baa80fda0a628dda17fb02fbd7b0aa6ff587bfdacc497963de8107e1729e87da83202b463304220138d06278611afdc5452325d4eddf8897cf5f6a473fd909672aa562350b4abdeb82c47069b146c18fed397d5f2169635882e9f7466d46af3fc2e69b7dabf757da34e0be7d92186f8c38b867bec5284c4d2786d9f36e8001119a8ab4b4ff55beb2e5fd257a32476ef8872ecae8c569cac83d24a36eeb8bb9c86ddaa84004bb259f1915150c8184a1b594794aca77d671</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】無題</title>
    <url>/20221113/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="e4e0d7cfba7f4345a31004e98cc106c24ab56d0b67ad3ca34dc63030778e2ac7">c4379dbc51520bb23a681c5b597ae53a2aaeab1cae9a21943aaccdcc72d88e4fc00d10a2673cb18e615d780814dde88cae83e14af9f2d54ab9a5428aa07d405925711dfd4c82d2728d9851baa8e9b27fdd04fb6f4db16a2c3d43396745f6a9970aa8f3f65cd11020572487e2ade90a8615230d54c9bdd035af98e7e5d3dec968f0c5c0c1bbdd58edc0461e7a5b17854104d591985ed18ca481b74808deb425749a085e499950dd9fa33ec124432bcce46187937fb3be0f76b990f8dba4433b43f7d9f719516ace9c641b27a6b362c01817994631752fd4a5f584011d0c4af31cd48390268a42cf2ed3b4b0fbd99b93d206b0901011569ef424eda8290924537698fc020fee369d3bcf4c159abe7c02caefdb2398faa543dce46b3f1e859bc0283a90cb08abf16344de3a180d7d0bcb09e2870df27fa522b6a0c89fc01d6edcd7</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>5 月 12 日 雨</title>
    <url>/20220512/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="2b4bddda203c33dce185085bc23807974699a1cfd7d6d03be7d0fc32192d82e7">c4379dbc51520bb23a681c5b597ae53a756d9c806c58b9ee8e50462704426c28b913582215f7cd543dac6eef4415db46619c1ffa985d4cf9b814ea16e487c64a026613f94533d4e3b37eb79fdf80eed24e92fc5401e85c10bcec4f2ba38e63d7759c5f9d932edf1417d1de1802e2a80a1e2786b7921fdc088814bc193078a699b9c3fad174607e5e2899dc4066e183eef5973b3747bbebcb3179e5a4174b33e830acd12faedd60c33564d9d3329ee35c7b1d26a7ea06386650a41db303b8255cf9472add67531877225de2101acb098a0da2ddbdb893f85bba5bda86cb458837d51843cc6132304f35d6a20ab934b6361b850153709680b170aba4be9795a4c31d326d81fc2bd75bf8f59ecadbcdafff6f3e89232a6c8197a96aed039f1e6dc6a3c8663aee18911115a598727895668f97f47e73677718471175765ef9539e6e9c475ba289d7bd05baa6d10538a30928df7afc96bf98eb895c0aaf60ca6107056d3513d4264a46e88af22c391b775c3bf5fc2dee412bd847b24b4cb425d6ffe332a6332ffff60e4d4a635bb1160d39093fc9e3168646adac4c7c0789a9eb831a8256670c8b3cb1526efdbf68092711e5b1c97cdf40a788e9563fc21610342cbf0d1fd2e43b23ed1ed10e6e8275802d0758f2b6170235de5c527266805d29692608f2ace9c1505535433afb09940fa4d2637bb4f2f3dfa0b56713f0754f4d6d1d0d63511a55dc8582436528840737c4f2e4c5bb79f64f75b5260ee7456342d34a1a79764187dc8995e9d8097cbdeab12dc7ba1e8ed8b29f26fb4802ed069030cf9210a7429b5d18acc86a8db7ab5ee31aabcc30cf5aedbedfdbf4e61d05ec6acf7a4b32a4c8bc1f921cbc079af5b2bcb3e00e1204f931e4af545d2dd6c7af53038697fcbb8a80ea7ac247b73f67415fcc8b0d693fb4445a0d9805449be6518960eb90047283a54f60d05c1834c9869f6c6924943850c15ff1e3c177eaab76daa55dc81239d61961b6b8c4025c4554adeb5564396a223b2d67cacddea41944870c15be05c2a5abde0ba2407ec399269244efc6ded9c20741fc6641d8420dff1fef</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>【資培】20221117</title>
    <url>/20221117/</url>
    <content><![CDATA[<h2 id="HackMD-課堂連結"><a href="#HackMD-課堂連結" class="headerlink" title="HackMD 課堂連結"></a>HackMD 課堂連結</h2><p><span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vdVZFOFNINGpSMEtjcjVsSGRxaDAyQT92aWV3">容器<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="Zerojudge-題目"><a href="#Zerojudge-題目" class="headerlink" title="Zerojudge 題目"></a>Zerojudge 題目</h2><ol>
<li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWMxMjM=">c123: 00514 - Rails<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<p>這是之前寫的，我知道用 <code>goto</code> 很醜，但…好爽:)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    ouo:</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">            <span class="type">int</span> train;</span><br><span class="line">            <span class="type">int</span> point = <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> high = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                cin &gt;&gt; train;</span><br><span class="line">                <span class="keyword">if</span> (train == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">goto</span> ouo;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = point; i &lt;= train; i++) &#123;</span><br><span class="line">                    st.<span class="built_in">push</span>(i);</span><br><span class="line">                    point++;</span><br><span class="line">                    high++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (st.<span class="built_in">top</span>() == train) &#123;</span><br><span class="line">                    st.<span class="built_in">pop</span>();</span><br><span class="line">                    high--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWU0NDc=">e447: queue 練習<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> times;</span><br><span class="line">    cin &gt;&gt; times;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">        <span class="type">int</span> word;</span><br><span class="line">        cin &gt;&gt; word;</span><br><span class="line">        <span class="keyword">switch</span> (word) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="type">int</span> num;</span><br><span class="line">                cin &gt;&gt; num;</span><br><span class="line">                a.<span class="built_in">push</span>(num);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">if</span> (a.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                cout &lt;&lt; a.<span class="built_in">front</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">if</span> (a.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                a.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Leetcode-題目"><a href="#Leetcode-題目" class="headerlink" title="Leetcode 題目"></a>Leetcode 題目</h2><ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdmFsaWQtcGFyZW50aGVzZXMv">20. Valid Parentheses<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<p>好。。。我直接暴力解。。。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; check;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (check.<span class="built_in">empty</span>() &amp;&amp; (i == <span class="string">&#x27;)&#x27;</span> || i == <span class="string">&#x27;]&#x27;</span> || i == <span class="string">&#x27;&#125;&#x27;</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="string">&#x27;)&#x27;</span> &amp;&amp; check.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;]&#x27;</span> &amp;&amp; check.<span class="built_in">top</span>() != <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; check.<span class="built_in">top</span>() != <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;(&#x27;</span> || i == <span class="string">&#x27;[&#x27;</span> || i == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                check.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                check.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (check.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbnVtYmVyLW9mLXN0dWRlbnRzLXVuYWJsZS10by1lYXQtbHVuY2gv">1700. Number of Students Unable to Eat Lunch<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<p>比較沒有那麼暴力的暴力解 XD</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countStudents</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; students, vector&lt;<span class="type">int</span>&gt;&amp; sandwiches)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> j;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sandwiches.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; students.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sandwiches[i] == students[j]) &#123;</span><br><span class="line">                    students[j] = <span class="number">9</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == students.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">return</span> students.<span class="built_in">size</span>() - i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>資培</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】我看了一些演算法:D</title>
    <url>/20221121/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="2bc6064737fc94fc672d135e95bf26a3d4f0744b0d4893873f8f850d38161400">c4379dbc51520bb23a681c5b597ae53ae83953acc4205c882fe5f1b87eb724f04f0ec6be04a3d9dacb712b346a37066193fb14029df22f80df181ea5b96ae6267872ed5bd5f89348dec802cad6c15cdc59537c818c0e36d8c0c55fe8e41fabd6273aff5f65d601deae206724e6cdeb21c3ceb52e6ab39e594588bc3516dd0e85fd975cb0df991677eb6e3c99ffe06a17ce04e43b566ec27c26ab6e3f53bf8a7240701aac2ef2f1a099de7c501e41a7579eb9a69bdf3fdbc16352446a26099076a754895e38d328ca3d730d17e531f158a71c89c7793403aa72f489a613867df16e4cd98873655318bb2e8529216b1ce088388f79e1b7e59af659ba705153374bab41af21caefc4f97fd43f34b3c907bbe2eb83c918388f76eb2b485337719f7422da3656b11fc7d7b7ebb468e5abb8df5790940589f8fb8f5254301390a1281330f14b59e37022a8cf9c8fa675b15c70aeaa2eff6db6b67be2b2e90c227b5eb121bd2382d0edb1c326dc7c10a67c7a78b47ca1689454ecfd00dfbb3f923a7222b21c1b949b5491a5318aac1b751be9afea57219a0b810dc66b7bb193628301855241d7d319933e23a1f04df04aaf9efd57fee311085a4b2538e26ce866a3d1ddf87be1ca88cbfa9c3d11c040aa512e00c27f0f46b26a226c9753f1d30875e5cc26190e577af7e59709b5b66c40fe79d50c156e255c1933cd949de5192525923b42cee5e8a38081ee8864c37206b7834c83ceb6c898884e3d7740ababb10c33a4ed2048bcb77ea8feb0b1d319b557a6a0bf680ca2a89c55298799fd5e3b562ff5f66efa621955f4c83ebda72388bbbe4e637065ba38a6dc4333e30e17c72c9356</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】20221130</title>
    <url>/20221130/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="89d0adba15536e5851bb584ab26a80cab3d549259fefa322252a2f6ecc959a37">c4379dbc51520bb23a681c5b597ae53ae83953acc4205c882fe5f1b87eb724f04f0ec6be04a3d9dacb712b346a37066193fb14029df22f80df181ea5b96ae6267872ed5bd5f89348dec802cad6c15cdc59537c818c0e36d8c0c55fe8e41fabd60e2e2d6f412b314ebdf0a40a25eaad211b2fdc0ab8fb4547b13fdee13b63a3c64411db4eb5226d36f7a9dc7a6043d07945a4c6565921e5c4fcfc1072d5722ac5a1d5701127b620423f054ceab9d78856e62c57a4d28ea262310b566165c43fe1f1c1d5e1b42ce23bbb59fa7bec618d0bf8d2b34cfa50539b1f7ac87fbcda07689bc9d4a4006f479600005024ce71929ff8f7499a1a98a6218132702bb7c6e09a915917879227b6f164a2634e104e8ddbc927d6b3b9cc24aa6445a9a75eaca30728dd44eb589da11f02cfd33b7f953eeef88d846f998a0ce344eefea8e2627c764e35ab95ac4be2343a5f9f385d4f049c230cd8dae7874240c2ed1fe27e4da30568bc3b665a417f29208b16003be5a67bbc2620bb820fab938565105772db009315d5efd368c18581d2cfa4412b1ebc277d1d2701f00fbae37404f4159f7a4f2f563735c4557463da59f11f215be1cda0b2ead71c42eecbe8ad48618dd0f25b938d2d567d07ff308d7d4e7ebd097c785ce85f80892d8db2478e3b0587e493611e3b2c2323cb65a51226dac239e561d1763e9c782cd585725f7758b8f98a515d8d38649d7141fcd1bee5d8d4ab70f76f562b439f570d10962ba4164bbf694a20360fe1ec7df17ada75c67ec81cbbdcd657854a01d617a09713ce9f19a6781c6e567c36f758d61eae6ab88d47776faeba2aa1ba65389a16771ca806204eec37e18d858fe3337d82e459c75e5419870dfab92fe8de1a45a0207d3f53ddf8f433841c2107589939e2a0384275dec714a04c9b52ab2fecc4e154dacf18fd9722ea3659ee4053264b4b29a6252d6909fbfccdb942a119b38d8ce39aead14cc38ebb4efe40de68a7359f027567632eae592e6618abd18780f5c903ae47b2ddf62f518430b97a4328a501d4fccbcc059a29ce0668b8481e6c089c4bd7442a067724e9956ee3959e6ca888c327c9373e77c94c6a7dee8d00079d2f7b19f1d2334e4deb8ed0a68f123a2c542b1867c543d9528a028354d2e9d580800b8801a0766b01b4639d09fe1eb907f64cccd6f14ba4354b6e960493ca25d223550ddd9ad812be74383ab9579150a7bd2e77bcbb02c0cd0c62057e81650b1e1ba7bf68cf601a4a5a145b36fbfbbdcd36480b955868643f7683c40780bf45522f5415317917564d7448366f44456c076f612382d864d5f859b4086f6be1e5f40d34ae5a826c28e27d16d51e95d585a966bf54892c2a77642c256c9a23a4e64fc62aa447b67ae25a710043b2cc8c79b9520c7a25a1fe263c72c45d03610aab0a38adb04b3bd11bf56a774f2ccbfa7ae31e9173fd97e1b15a06dda35c96adc7baffae76574c934ae11d20c6ce7c2245558b19ed7c21c9964db55646652be9ef9dda07a9fe1bb897118f9447e9562987ec38d29f4251e74bd430071e735b7d77f01a76d151612e122cd09938d00707450e2b7877c565953af41366ce5b2e8b2070711e575cf6900f6eb62a5e971f5dec6480666adc507b85e4f9a5a01b743bb41611c590490f3995cd24720f0300d6293c0a01995f154f52b0153ef867cb3c70e4dfa503f9e4bbea8e53e6b480da325dfafe77dc41c5cc25c3cde6e85d7f8d4e4f9ed4e7d25f0c4ec3176b72dfa126abab3bc676c906364a0d964c3d019973847f7737d14093b8afa56c9a89524b29d68aef81f34fef6721e7bf718bff347abfe6f5dfb4671152953229acaa37b84f50dd75f8205db583e3690bf7551f1181177e998ba94dcb57b85bd1a4b0734cf6ccebb25489db0892662498b5bd6c3f558cea4ab77e43b53e7c6c21c5a6eae4871ff97e439663ecc6a8747ec7594261ad11381b8b534bd36399319d1be455573bc560f3c555a57a90bb511f21532b904d253fec46258b5a0bfc177b2e58fc545c4cc3647566d2ca499b496f377f98eb2b90d2549f0dc00a5a2e575113aa32c5d04c19bbbf5b0c6efc546ee597f3fa659c30e5d95eda23573b56d390cc606b6d634075f846a983162269ba1cb6cfd59f930942ac3c81fe412793554276622a947306ec5a128e409dfd76817f6a03e7a6c38e310ec1662e2df32fc3964357521f98d922c49c522345335c90527803e8d5396af7f2457045987cb7b32e6ebe166d6b89990bcb07907c6e7a66dfd771543668be297b5566271a28f05fbebfe5dfe05fee899a39eb35754660d6c077ae734c8b7dd63633b1ca3fa0d19924621fedcd8320ae96f6a43438f7e8abd826b1aa74b2d06a14a12e1f7d964a94d98cfae921c73a3829c4d76bbfeff3241c70f71ad53a7eca92d630428ea733b053cb6279e815ff9e66521776bf76b47d28242ad222b8ca5458e5aa223b7686048b9edd27694a23b96af537741ed5d08f5d6f6c2fa1eda60668345bb00c46d3e04261fc78e2feacc3a31827c35ab335e3fc6204</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>【測試】需密碼文章</title>
    <url>/20221208/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="c5f962a59016e1a6ecfe828b27d27df2e5f89b624e75c40addf0dd3622642acb">bd25ed9264b080267271e137e33d0ce1276c06c30ad3349bc1fd0ac9ef1064dce1362436ca4a0a173a8501aa56c1212bbb76dd99a1a7ec98efdab7ba17bd4d9a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密碼是 test</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】我確診了</title>
    <url>/20221210/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="4ec171f4a4453ef8a9e07d849e5a5f35db1ad668764b9609a45f900a450a38ab">be2ff43f5a505a2494fffb6aa39cbe27b7cadae70a3c0c0413bbbf23fd16904a381701f73fbaa8fa5726ef00f2325b6ed413ce1c36ed363b10403fafdb9f4c84edf00bdd3ffd111f5d691d95a8a8fd7be81a6e929008e770c5a5966e6bac328cd042917076f1c2563db12c6a78fd082f3908827c1a81b3943cc7976b0511f0306bd12de30772406752a8256f676ccc91dff561f1a876793a43b78946977fe36e28345d697da12dfb882c13d8db54d5aa60797bf22dbeb30586f893dd26b18ef9ab422b4eef5e7229ac80e93b3b749065f0a0ab7c5dbed02ff81bb711494dcc79cb02e8694f45b24d8731c7a346743bbb8de02c1b017a9c1990cabc2f762d5cd851f77fa9e046a5062fdda9355de85301a67c1b6930acb436ea5160287dc24e2d8a09525d8703e869f5141b2efcc047137f9ee821deb40a5e1d5aa1a4f6ee63ae08c062536ac6c7fe2ce298465bb37c8acef55a8a9739e2ba3f0bdb1fcffa368e31df97a7100c1d67d4bc35e7b7001855f6ea4b2952ade47f41b508e2c9f0de342148273d896d4c1cd50c25cb966e170aaee617df4f1825729a0c8b0b7257c3e10bbf43f2b41daf13610e7b09d063456fe6484502632eccb439fd8bba15f56c1875bd10b81b4bc45769a6dbb504fba5245d7233187cecb462be1eaa348b6b6c877fe3fed29187e37768d3d5c7011a3ca1e7e17099a33197e70c42e64068a24c53b422b83b9053e477b057d4227f9da13ee8609a3e8d0ea381802ffd472a9e443dbee7619339b6a3d3cae3ed53cb2ef365011de8df7b9f683492d9d1c7fca8113dd1fcb77085a4f30df29ce4b263783899cde7681089f18d5c9c98bd7da8680349e740a3a7ece9349bdcfcf00782f3b7d4b477f7386d1963ac2077f7f66e84f3b7127eb0c8a7b07468336a5e9fa54fa7c71487700d0f1b142bdef5cf6c730a7372c8e624906be62ad41e974f03c1172d3c3956d07536ccdb22d14e6860ef91b6f78ca4de8b8a11bccfacc469b0aeddd6322034faaa2c70532b9c0024ac43e2345be77cf515239a0701d6b03cfa851542c1d4ba202e2c05af20bd8a74bd81f68c65b62e1b5b74d0a81967d358defaa5404dcee705a7be51194906c4b856f24bc8800a21760ad3d56e23ecd0759b381711a88f6459cb7ebce83af782f85f73b1563808373fc38d7414afe9af835cdf06b85fcbb3f41447aaf06efdc7c5611dd5f6a33eb354909f63a46d47faa87ab90d5cb7521ef44a28cd700af845dbdc8e117af26e4d50d6fb289184aa68ce555b103cd235060a0e05103b5f25b7c7f9b7fb05957025080b8f074cfb92766603150af0202a2e5b976d8823afa8000a000bfd80275fe45ab0de6b0274328489a548afc3e3adf874e7ac570e4c14d3877686976e7c211e9fd790c8bff8b6b9b5564d8d7f6949cbd85b9b84d73b9d98300f72be20567a3a5235f5efa74bd53c97a06fae514cc2489ec7453cee9b94ac53751be97e6f9d03616d3bf9fe2b0efb046d3a3377bff51b7926f08bc75abf65c84496f747f8e7ebe1257a8bf4768d4929885f82a8814700d6006b27ddc43dafd9ab74388839f4d463aa8a52e9735b020badd5d87695f1cdf840d06a6b361d8a7e43bca62934f8ff9e5a343a33cea3766cefbe28d894e795e82a865cb268d538b8789ed31ca7f9a6a3564528146f50ff446484b41f9a32ab9af61179c50b94b901a46e6cbe73b3fd766a842cb7eed1b017e997b4132570fcb562ea43c965546ebb6f8cc253047678f89916e7ade22de3f13e8d88beee90acf2468decc24ab9d9d84260d8d5486c9212fe87e077db5ab6af21d64ed85fb378b7e67cd42a74c6b10fa62037e59dbdf24eed9686484b7ae6e3512c2361e7b77661d3771d521125b285fffad2a1cc933821f2ce64b99315dbbe7c7b97118e389b6a4a535932dfef7a4d683895821858696bd137391f7d6b4c1489bf21d98071aa0a48a64fb8c87e76552f065a4194e0f81ec6046e4e53da5d87318ac5937dc6691b0827ce59abc1ca8cd0afd6475cca15ff7f06350007294b9c49a8c0472fe89346381fbac71a493a078302fe7164980d2aed02493649a35ca0bb3d8cf37623e4503dfa5b284ec32d27644a5351c704096ccf37f90296105d384543478a05a319a1f515d95c75183b35ab3d5cd51c1bfee961b0a9b844de0f5727f412ae7857ab53c115d05e4d223532aed99fa6c6d238b68cb729e8698565a2a5d080a7984d053ca3a32d54213a72f852ec703aa12401753ab781e7fb237fa621cde5f10fe13fb0519ea99e6f0655bf14ff878a6e8bbc93ec8ac0cb0e36786988333af41711b6189b183cf55af9adb46d294598874ad6238d36813649f00f7f61d2a45f9610a30fdd2f74d1c84da0742bb6d2da0254249c178588e00cbd1a315d90bafd563630d1d696c12aa7a0696e2a4a92c1ed2be15f973e8de4f8abbc72ed66fabd8b9450d1d7ac5f6c99fb1996d6eca6b4abffa4430168fae7e582422ff16d7df58d413a2f04f1e9f7c22e2749f486b0d2981258d4b23d35f864c4f7d9301feb851f404960f1b0d525836f53e8d827502e670d276258993677ea7005015e3ba4934a779dc679cecd6985fe343d622a297c303afd9eb6b39f01854eed73aeeed86a47d09fe4afac3200b626a1486a99fb3f6cc30104166002b7d1a45e557ad565bb641e335640ef7e97088642f0931f894eba5c2d6bb1364513aea5cd4ab2745be255e3da029695efe79c0fb4313a85f0fb1ab134c066387785d9db7ce8a916a8a05e8af51fc716327e8f8ef7d93c9fe9ae06eb3eb4ed7809949540ccb9d5f0014d581e03e1544e1c8d2d6457b0c45add5ffdf509ba12222fb16d8bb16cae84593745db3b03d13ed432188d15065327672ea8c01a7875c8c34a4c56c31c7b110882c6fcb3d15af67576e219045763f37a6340d9a04425092903036e08057f1322865d73733e6f6ba00a225c25cc6ce8082e107389a6487dcfe884d07fa122b6d1e2be444bae2349a3d32c41016414e55d6b0c6380f1332ef8b96686783ff094f501b70a3374268daa81e5e0c1fd71ea1b5d93999694d6ba0ef69a7c147e215fc740066f98b1c24e45bb7ca2d470b08baf4415</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活點滴</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】給一整年的自己</title>
    <url>/20221218/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="8516f8d3c2daa8550c49965d95f88215f3b733918f50c0f84e1efd33bc47f458">c4379dbc51520bb23a681c5b597ae53ae83953acc4205c882fe5f1b87eb724f0db7821c81a8f713bf47d53f3e044b088b1eafeda41ce906483f8917dcd188bed3b3557738c903b7c587143b7204e44e47d56335e4e54810645d04242c59594765a365d03a7ce2b9d6b2e9d5da3614a3b838ab4b7a7e0b58bfb5c5a9e5a0c3229598b2d3fb8fef6e436f52c24da783cf3ce71d2f54b6bcce68bf14ab2c0ffde78083f7b7931e97b87d28d7ea3c50c1e804448f4249cdc62fdef5583761f522c3e27af80a3736543795457453036efb262acd5eb9574d00c70cf1b5bfe64c55570ac10307fe9946265fae2f40aa46b6435d727788c27797183d8d163d18ebad64eb37441fcee38059f2ce5df22a8248292d338a4de825c81995244d3775b215401e521907e7fbad32bf2de93d34bea3491c650a39bbe638c6e51a3b3f76cd70c1d5f5f81d53d15379ef12e9d413e121f7120dd2d6a6006e40ed678b07c835403fb018867711501a232d2fadf5065c477ee0c3f3470dd40fd7bff78a40eaee3c9e601ddd725053cdbcf3549ba23c07635cd4a3db97524c758c657700a0d44233988d7d56dba16cf729d686b6b79e268a87fdceb81f6fedd9082c7bb50b1b7d24f8c2b895456be39f7a65c0e4951a9c059f90c66f45e03e26e13367110ef672fa0ed6fd5ce43fffd05902426086e920d7d54c390b13c601fc73a4af647eba50c62c25c12968c9f09ad472af0c02eba5599ac10f3b59e280d4e753f4fa9badb390cc6fc69c664b1fdac2060705153f6e47fe858921856475c4bc588f995e5d1e1e7d22646e147a2b1ffc7e971aa34a82e306de65c547c8e6403ab5068235a404dfcf603c0d081f1f4e79b45ace8690fffe35a62c1fcb45ad4a08abb0f8ae6c92a8dfa85c418c37a78cf80ed4d2313c2017d7d223055b901dfb334e13562ef367276e231a9fdcc73940f3e82fd58536c5f37a3009bc47a74d8fd1e549790f74bc91499ec3add160ae2790c3b885559c58208a098373d102f5c30569451c396c501a8db1c8422b7d4a7b076408ce0b11e8ddcae24c19e7931c65749dbe00b89786a2eb2cb1e14636f0dc419f8d36946635e5a00e755e935c103ad6a100a39966366fefed98cac92f54402b85a9055e9d9d3f9fff8fdfc6f6b035742393b1aa6b0f005150a04a5cb2d89f636a54971f874f1db6cdd4f35fc308c85dc8f0c64154617b8054edcf398c4834b1da8789b2728ab56e47a98f1de05bc35e714488f9b44112840daab1c0ebf6aa00bf73e598b9e4afe17b07d1cb72a3bc123183d765c327033e44abfd20f6e0d4d714ab17ea8b97986ec86d90c6ed1905601b554bfeeaca393fcfb8996c8a252e23e8572be34c3dc431cc3cf91380cc9f23ff07f461015fd2e1592b73e3c2fe7b4970a495b0bf91d99a5540ce4fe0b1fbf0d3dfe69a024c82971b7298c4b0a41c93a7593b13ea9a4eaf4d37d6aef9d06f5b81cca3d91556016356be6b4a98575196000c2c41d9c8bbb07892d473cc29c5cbee88fc8fb9fe1b20b3d09344e0da3cd530be293f0f99381e747f2da38facf229cd158ce8344c558b65058e61664f11ef47a4e82a2bbbf28d7417db828b04fac76b5cc4cb58a2d41db51fb151dbf728fcffa497fa9fd5de38fd7eae919eaa0cfebe38146e6c4c4dcb74c6d983b4fc0ef11780e148b3af564ff5cca998c63a72eab31f4011b4fe95452a264e9a44557cd896b96cc16c2a115d4be4d73ea5cef2e22e5a4dd895265f174ed47412304a2bdc481be8e085d753dc1878dc48ab14f8e3b9dce727c42f89d37805f7e9bf9aee58337eaf7920a8582ffe3b6fc8f5ffddb920cddfa21cbd832e463ee2d824c796d36cec70556b95fea3dc433df671e1a6d15f007d0eb7f428a09bf3d9237e512859d20447b002c87f86f2338c83d8e4013e0dda12652dcb00bdcfa8f5ebfdd682aaa60744d0f78fd0c67ac8add1b9f37058ddd87bc051ddb26fc08e5af00611fb17550f8d7efb4beabf3c053cce37ad65952b462c113501327a23d90d9df496f08a39467f81c189528bc907b457053589624f2b25d697fc77a9c8981cabf603e241c6ced60eb1a9f3c8aadfcde4697491eaf8c010ef36ecbad3f2430cd8cb6e78c67ffccd27e3234f8e82f12907eb8073b871deb66931065031462b0a1adb090d3791e1e2a27795661edf327a8214ff53886f28039ce914f5042ba952631261f68c84d664e2560ebb9096c4be4aadcc167886e88fd412a3a973ce2f7c598278d6fc852f65a88d2e285d659dc89a32c54ce0a6b0ca41fba4b33b7760a984660eee67f85df695600757201adb3fa32812206dd834acc1b1fcc8d9263a2548362499ecec63d712de0604a0c825b131812944d8024176c67b7c3d46b2f584473c7dcafff97ddc74cee3eb7117227a93b46c1074b0b3af62693223fafc8cec47e4287c0ce41009f804dff1fe0f07ea85e5f4ac5be915a011ee1082a67b4e17e204ef810a2f4b36b69be1aa79282144f5f7de86c6b82af48e661ca34a4b3f5497557ffe0c0c80d62982f052c9e9c79fd9288bd48ce49ddd5831dfa1d3f3a6f9796f14fb50c43373a7ed3edac7cadc93c7f7623a1f7cd575b52847fa9e5fa0cb3635b9b5287c097e0b61c10215cf32397b09ef1e10818d7f1b6e34e3a040512235f81846f3ea773073e19afe6061ee1d79679fa466638dc2e8ce7a067105e794997607c713e84ec3e07e95ad357f6fb28c432391bc76234231d53569b6c6f7cd0410164da21780c3bbc4f9878d26ebcc656bcb264683896f78b46ae51eec320be170a86e827b68d142864ccf34192722338f31c247a2ea588563b496c3241bf99053f2ef80d55e98081a5fb99157a1201d6fb75835238a5cc2ce577db0dc22a7b9abc9c2858bf3a5046062fa596560b9749b73f3280c0aa9991f9d6be1281a3259b3f721e51efff1fb916e2d97d70780b58aa4984e3593b8fc21e028fdd2e125b792bfb1b2744f8e76b8e5fdb1bfba9780ef2c3f5f5c32ab87553c1e7def9a61fba03b9b4516ad93429f4b4e3868a8d0553a86f6cfc674e0707f3ab939d6536542fbe3c46e55b92eb8782ad03e9d48da06c3787164591fc14131f5853ad25138b7143dd6338659c637c363bb02a442ad1cca6138060df6601206cac254a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活點滴</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>【日常】想死，不是一天兩天的事了</title>
    <url>/20221216/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="6bf08092f9b32738934cd428942f3991b3e6940437782204cc09d12d906e31d6">c4379dbc51520bb23a681c5b597ae53ae83953acc4205c882fe5f1b87eb724f09bbc98be5e1d92693a4af559e3cd39be921ae0af4e6f57bbbf6b6b1abf078e74dac5c39f38cb0d6fb0c850df08174e45b24260de2155037020e1b1bf03f7197ead85f617e65d645ee37f650bcb734779dcd2532e888eb1876e174c33735323b037cf685fec262f4f0e5d4e257d904254d91910e302fc8ee28852f938e7f72b9755adeeb6d5b31e8a56f66e4a1854e94c29337726d2b42d294f3fb5bdf96f437bdebac78579e640d14a301d9a0f7e761a054f5b49659c56c4ed51f68c1178ddc4ac4a873d9fb5e0f88bfea68fa3afd6716025f94c2c40b5c1fd6adc7f0c360b1aeba9f95907f34e31bbeda45ec9c8a14068dcc76821c6ef958ec93ac85ab77f5050676f9395d21c28c05a3d5fc52e21342ca871a691ff129abf11c75736fc632c1496420101bae01b8d22eb73979795692bfa0fceb98acfa9551ad9ba5fae73888fb484c482a722a342225b086bbf42a1c90c8855fe9134ae878e84b574c71ec0c6753741675f43dc1974fe1728da0211d339289a7ebc9b59a5bf5a2170bd2f779708cad584574c180519e93fd6d3900d088b25867275501fe51d831b80016ecb673340cf0a3fc9feb6fd23cc23ebf71c33f18a14753a29149ef4f775f25c56dd8f29d118527c13efc81564df8c05f51647a740d30b82eb4e4004455f4bbbff1e1e5936e77f4e621e254a2b46d43f885267597fa59527c0dd21d63fb337812938f93cf6ea8ca57a286a208279bcd52b093d566dd352e2e111d0db2bd1c5ff85b490f60e9b60c96d93f055f3724a9ebc54978dbb648c5adc592e244085f286592062df495e1985ca81ada3c65e902609e78578ec7533b8d2652e8892d766d461aa2117800936627b42431ec432e1900b2b03c7956b009b4d2b8d1e2f819dfc1ae2351796379fb73e2c69814be320c39ea53861078c2da4d21e7040d476cff8c1e70d0c401c003d2e40707272878bc7140d4a76b790f5cb80f557ba73e9e367faacfed49f66a7566fda7547c6cf18c17df050c3ffe35f0c4beb1845d49c15c95513416f424b3be0fcb203c8ce4b80bb33b324841f8b2b8694cacaa230b994a545e730c606e43c9b987ef5dbaf9f5f81b6cb74e862e0c2443812571cf9a7fd0425e0e6aad4373ef283f85aae7c46a2baaa0c8c2689e63ee3fc67cb80deb8e664bf668512363ec4e5434f222c98d580ae30c8bd8b9d28b1d2322857024317818a7f301a1c0eb1f00ac0e94d4243c71fce05c3aff95b97d74d07a444878e13d9bc1929265a7db3ec03e52067afbbfa16ff2b1a4dff5a8f9a76e78147d983507329239b538698b754df00a4e19072ff71211b1bd0d27cd78b931995802c4c74a4028919e7d743eb0b2d90d03d4123ebd3f654981c0bce0cdacd0819ee4ae2ada5d33b957e1dbf441300174883c741568008fea9290475c2eaef143eeecd4c7b17f4468c68edf93e26508fa756d64e917e9d8ee9aa91d31d0f417cb874f1002d8d1f4e4dccd8e3dc28ec21cbec7a8f3d5ce578e475b193458ff341cf0a1214c74ba39b8891e2591d2a551a7fc544117864c117cd79d8ac005410a3566cf1896c0a765f218c6d0707ad26fc98c828f075bd50e92a1b4f267da10b275f68a1f035a47daa8a9c309f058bf2a2518aab3aed8dbe1d2dd7756da7efcb099fad25f01386b23c60ab3518930517f13251b921dfe1b80384de609afa20311b46082e60d876256c7c29a9fa988ac88a990b50d81023c03e6084d99c89523552a35e4b84e87b7cbd4b029d465419850cbb651c51614b2530a2f10565ab80e045918c90956b6387b0a34f1aafce795556e44668856b236348a26f97fe466ddfcea236a54c3375db534b10031c0e66406c7fa766de1f010e5da5b636bd8b512eb34f3d61fa7753bd985331b0074eeb70b0a0877f95c39bfabefafae2eeb0110d3e096ba6d068446cea2ce9a8a74081ec4f9a9239d958b7967d0522a7505a385f743e8e1f1f14ef4df0071233e3ee2037bbcd81758f04cfaa713c08a5fb5b9323e555c1d1315914cc7ac7e7b45bb79773481ab0e7ba3e864605f9b401255318e90fc1dd8b1f2724d576fedc7fae288e565c82f89b0293ee82d14cfdf3412204768ab61f1f8de5891753e9fe669bfd113d3942bd924bc1fb31ee5e68e91ec333c1b16387130590cc0c9a770525f9a0f11cdce874bfe4a75011131def78df87be42dec9c411a8bc9c457bd91f0574391cc580290feae482de5d72aaa6648d50265762b25982dacb816ed75a2953077770e7aa783e9d0ba3caf20c54154916e715475a246d9183eed885796f29492cbc985d6915f3237f291588d1cb0e8209e79a349ea434af3e689b69fa3e8e98fd8f19fd28fe9078ab507001db2804dede162c50ffd7de54ff5a106893813a7bdc3f7be8e59959b48c8ad6cec0eace832b79278f105c931631aa38867015f20d94de2e261da527319b3dfc03844079d2937907d9ad936bd9fa0c2c692754c7e20d5fedbcc43d991b7ec7094042577122c8c6008e479ced5af2294a37d747a8455ecc68eb5c11b4947ab7f2ad1b4797253fdca909f0e0ff75bf0b75ea2653f2edc44e7af1bf0a1cf0fe066cc298a340cdc2d434ba64836cabd8e12e9e1f0de65065b6814891a476d84919db3a32a5c5a80f74dfe5724186dba8312750acdd23c5b674400ed522dab3364deaab6ba86700a93c72510a1a6e0ee2b5e4194e37631d3a1adc0f5af698f7a6fa925144439b690b59506112e792d49433263e4e5f475b82918d023c367a6abbae20ffe8e15697c867788f779eefd73585543f0bfdcd144671d87e0c4371e7e5b67cc8fd7deaa0ee3f023e4fead40f505927b9a0d51a4cd611620952e58479fb2465af6c78efdb15f6d5d11ae254dbab2c97a7a54fdf814de3970a7ff9422aca7a28d3a2f70626b1b30b3479180ddce4e724be8ca2f4763a2497d1e7b0f1adc4895c103b7687a3d381b2346de12a237a34e33169ab86c72aa24cdc564440ef73de64c1823c690cb8a8494ee5415ae89d763019cb29a104982f0b8057d067e1405c92719a9f90f7c1430657168c00ab45a56dd037ca136a2c4bdca97044eee20ead2613813501e3efa7e932107568990af561ee2fdae737aad097839bac50b9823cdc0336aea3f45ca56b5106dfc15b50d3b60be6feb54591bd4cbf6321ff5b8f078afc5224fe58fd6416321e1f479a2a9336fc624e37e051adbe27ed34a233dcdfd8f30fdda389bae4860dfbe97fb874ca351f4536f485a6470d7ee940f361df5e8a824b57ee1c6e33e3fd1b7c610f2c9a380d2bdbf925df456086b822cf239c08e14c1ac46f7dfb0d5e85f8e8efbd5f3fe8d1bbb6d25e257bb7ac29d7edce1c4849bb664d77c67c1c34c017e14f84c5fc6bdfb6661203824ebe53f1936c929d1fd8549b7947520a9a7c405fb52fba02ceef79785508399e39d1c370d02ed9bdcf505f0b2c8f7f475d259317a88038a8e6a21a0c75e6e0f5cbf7c689d7492dd2888ef7868e95942ba7d644e2672463ff91f97d591083e1186e95668a63c57b458f049d49e1c0151e8c150722d9f9e9b81dfb5e7aac292e0e4737b994a12c7bb870e675aa16b698b4a03df8cf2f811c6233da4c685e455cde1428546ce42cb99a618ee90771e900ed3b81c074dd4108242cbde9cfc0c2a247a876fa03ae8db63c13cea29a6f830cdecae581af7696988a497d98a7e169a4f5ea7fb7417b7ce7b0720324163add0b3acfd19c0265520c19246cfb44df169e6b42e70e875fa0dc43ea70d03fe4ef3e5a21f3506a0f0c5b5cd99e25cacea9990e54ac382a5165f9ccc3940321aadcf680f4341ccc1a2337331988e6e08fdae61bb1a14888bdb756c4f08c34086e6f995af046f72057373a7591f8c4fc1d8341b18af3ea0c224486a2cb1286b8cacfb0debddb93a63884d58a3c86b3d2185e7b7a8380dc34cc97f4bb99d68b7e12cfb992818b71ad7de7e5e4a2d51b6e747f50ad1b0a59920f812eed2e0558be4d9f6a4e0c071613432591f860c9284e0bf267f99124c7f5146c8070b572f8d5e27bc577fdfc7df1a89d6cf0a72f0410caa172a58475db72bca4de9ea8ac65e363f0267f374ca045170296ab39cd876e0444408c0be0adbc52be523192527fef3a2707869acd56f124f36a6ca0282628e57311ac8a7f3153107c8aa0aadf67dd82318ae90d5e1dcd105408bd55b3e3bea4de281177f1d38c2685e0ff6dfd5ad1f9dc49cf7c21b01f62af5af9cc692c9f1d605e3d8057c78aa2f365f4b7b7f795d0486e2ff3262d4522d6561f3c7ad4343e01b8cc79024ddc1561e792098a2d1f461d7072c9d6b139edb366eb42c2dc84d91c35cecf3f3185e1c24f386fb6d321bac354428ad56cc7bb0db243f1810e78a8cc7f1a417f1f7e92131705c539101bcc312422bf4bed428281fe365ccbb9ac98ba98495461b208563a6c0c9d92a69cf58bf77e47dc6f85edceb14f7b9086a9632d6b7255c6cea5e15466114289405608</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活點滴</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>【筆記】APCS 2022 年 6 月場</title>
    <url>/APCS-2022-01/</url>
    <content><![CDATA[<p>這是我第一次去考 APCS（誰叫你之前都忘記報），當天考觀念時肚子真的痛得要命，直到中午才去宣洩…我的考場在台北大學三峽校區，令我意外的是男女比沒有到很重，但是大佬倒是挺多的。考實作題時，不知道是不是緊張，就是一直在 debug…最後是寫到第三題寫了一點就結束了。我那天超孤單😢，我朋友給我請假…說他抽考沒讀，我也沒讀啊🤬。反正最後考了 4 &#x2F; 3 還蠻理想的。</p>
<h2 id="數字遊戲（易）"><a href="#數字遊戲（易）" class="headerlink" title="數字遊戲（易）"></a>數字遊戲（易）</h2><p>ZJ 連結：<span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWkzOTk=">https://zerojudge.tw/ShowProblem?problemid=i399<i class="fa fa-external-link-alt"></i></span></p>
<p>輸入：3 個 1 ~ 9 的數字</p>
<p>輸出：先輸出數值出現最多的次數，再輸出三個數，且去除重複，由大到小。</p>
<p>想法：既要去掉重複又要排序，我的第一想法就是使用 set。set 是一個容器，它具有資料的唯一性，也就是不可重複，且容器內也會排序，跟 map 一樣。第一筆輸出我會用 4 - set 長度，這樣恰好是重複的個數，再用反向迭代器輸出 set 容器即可。</p>
<p>實作：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> data[<span class="number">3</span>];</span><br><span class="line">    cin &gt;&gt; data[<span class="number">0</span>] &gt;&gt; data[<span class="number">1</span>] &gt;&gt; data[<span class="number">2</span>];</span><br><span class="line">    <span class="function">set&lt;<span class="type">int</span>&gt; <span class="title">myset</span><span class="params">(data, data + <span class="number">3</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="number">4</span> - myset.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = myset.<span class="built_in">rbegin</span>(); it != myset.<span class="built_in">rend</span>(); ++it) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; *it;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字串解碼（中）"><a href="#字串解碼（中）" class="headerlink" title="字串解碼（中）"></a>字串解碼（中）</h2><p>想法：就…純粹的暴力解吧…，還有注意題目需求，這題要你解密，不是加密（我朋友不小心…）</p>
<p>實作：未更新（懶）</p>
]]></content>
      <tags>
        <tag>APCS</tag>
        <tag>筆記</tag>
      </tags>
  </entry>
  <entry>
    <title>112 學測字彙題</title>
    <url>/20230212/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，這組密碼似乎有些錯誤，請再試試。" data-whm="抱歉，這篇文章不能被校驗，不過您還是能看看解密後的內容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="437fb53e04734cee87e1f2b260c161dc44a0507b75ce19d4da618e298a290b00">c4379dbc51520bb23a681c5b597ae53ae83953acc4205c882fe5f1b87eb724f0e52cbaeded9772aa1d163808d1e2b678f6a5e91533371d2ccba82a5917a357ae1f228f4dc67b0a152a6edd30d9d967ef42147eb33ff24559eecaa9864194ffa6705f9faf06dfb9cd98b37d3ee34447d7884ab1171987fffd4ce8da4d91fa8d8241e3f3ce3b177a19cbb65db6fe7751eecd604d4dc02da0e6363c9129556247b4ac55334dfb42d5fc3940b1699f012f6906ff3a9a0e8486683d0842ea38e4fbbc0454dc87a8fb390074dbe228682661001378dd84858698f722c05554bf778e217ed68f496b10ad65853999b32d0bbeaafffacd900078f1f966240aa29c6bac6d93444636ec00ca29386efc1ca03ada6ff76cdb8b740d2b70340e4ea300f4f8bf1366af78e73d8cbd51c0069c2db499a569c5ba63f13745a763d8701ce36705f4f48a09978f544da48e749dd7b6e76612dc0c5230220e076ecf6b8bd9208df2af27bc56c335366a3e8229d9a2159eb49eedccf02ab4d81451ea94090c221d7886d8e2a2723e8d69110623a207b3a8c9852fe18c59ca139d57a2846161e28dd07ee2e13bc67157044188647d4d58aa42088deca02887dbd2e8a8d1e7832746d4ff23ecee9fd228731c33806a17156f52e570e08be1a3ddc049f8c5158b0d1173a00d432f40197cbd4bfac918049324be4c8b339cdd5c1061727627d22418d2d419ea6985effa81a182fdc503fb12a7f6af9e802175c7303fa1559389a477f3b961d3d53e0ca00b048f8013cd256431fbbeca672c2cc6cc7ca146ea41f86ec12552436f6ceb2c0b8c826359364a6b287d640b6a963a85cc0db3108e14fa8c59e167852b5be8914a386d9da0cc4fbef4882b194b32782b27f7c80d073c5ad2ac8cec102f754190ebb6de9a43c9e02b0adf6e574e065d2713d9dd2ba62f8d3c092805612adf086b0d424f5bb293349d7924019646c47a92d5db6eaef2073d07a52a3f14db3cea22f495fed9a021edc6608c63be62c1ce048b2bdd27de3a24a5687893c2d34c00cf35432115f1978ace4fd9db906603cb21ba53323651a1647e5badba7297ca1b32a5292124df5c81c629326283b868399d4ea14f068b83fea5295943f0a2012a6edec913e6964354a5395bbf3897819cfd070f4065707b7c399b30d90c2f43133799ad78f52e70117e0b2d15ce180c957681cfb55dc353881664fce2862f20c0638f1f766438f939d82f2d6ad907a653a5f5d87d1352c0fcc7a0ce2ff32b0194f1fd49b97aa2c51214c1493efc84eab1154fc537c8beb1abfa51ad56f08baf2939d56f19b5d5f7d897004e13fced33f0859bf672362691eaf9ff66b23f7a0c08979ed432b0fc08ab0045574040829f46c6fe09bc5d0dafd172ffa8d647cb9ceacb68ce286202e0b83bf816af70b1ff2445625d0748d9b645a43df38dae418c7223b92244d4beabf0dd6622aecce0684f0becfe6bc3e2f6e289bef1c85165aeb889e03f05e473eae1d58413d83ca1276aa2407ce7299de026f1a1c6973e14aa2908401805f348754e8c6a847a5c89d52f613651c48a7f184d50f8871ce1eb78aa30b4095e139e44f1efffd02d6a42790245fb76e86755d77f818ef4ec66d1302b17eeaa9390ea41ffa118cd09d9b0fa020f5ef3db14378014d1d1a77269c5c8d354e546a87e1e6fe7e8d2a62bdc3d95af12307d45299a20a1715498f78ac8df6df150f9f083cbaaef62aef22a651fda758b39782e78121229f2867d40b59f081a8e0c2bd34231ebddef40d4c712c16c8c7a4badbcf25c76e18e1c13ff969bb8ab7b9ad19d65a11d3f09b3a35ad752a023b6398ef9025ad59ef780a525031429b728b648711bfdc414ea361741c497463370ef283047bbe189443dd40cfe9e2db7dfc682dd7de328eb3a2460d5e0af5d8849081bf33cc765c50c4f1dc463d550d286e0a4c5df5838100039748d689279da9c33da147f9554b98f270759b730d1aca1b909e04feeb5de74631b81574aa37d9d77ad1d30771ce5f18b0a21b720ffc488692fac09008dea8f7ffe697743c7dc87fb9ee34d584a3a7714b33caeba16df2c8552a5bdb47fbc25b8cb4535f71b4251be1c58aa804ae1ef5beaee2a0213b079389cc11a8f630a0a70631f1b2173e28040bbf05cdcc49a162084d5b87fcad9d9f4ba5d2a85162bf3890071b25f0d2491f453bdb780b8d8b8301aefd9a7259f375de6594b2aa9dfa031e9d13deb5712bdc411bd1e2aa099126171f7fbb97842bbace94f24f77ae8dd8a6e0230dc34346a7ace746be3f5b419d7901e328e0b4c664fe7109426e26fc2afe409e1f724139d1629cccfb67aee910f961a435ce1c86da80217ba4c07ffd3fdb9343f3e88239951c9e8595ab1cac5eadefa6b366526927010f44e1e84cd7338c41e41c5ff5280d50689c095653a05bb98af8015211582356127d446519bbaae08967563bdc6d336ccba75914ae7aa8537810d73824b8e8d9736b8295b2737f3819103b553b7d8e6d32e6718af2aec3562fdf434de061dba24219752be9f5d2d76ed02b579c593a41e45a25b4e1656eb1e7fcc9aa8641319410c3b1b8c11434700c504cea9d11370bd2814249ad20647c4edd99ff5db657889914d062154c6dcdfd70c8ecb59f1676ba707b4977157e06bd36751302fd130d9f8e687bdaad91377f3454c269c5493b4f0344cb508b933f88d2850d3b2e43c3ef30460857c61ee0309c6369cddc8fd7f9510fcd35e77bf132a086cd90619d1438e44e44d68f1a0065e7063f63484ff603a40a865f551c09fc0d4edcc5ef0028c811aed1dc2df5a3cabd706e1ad8ec774a7ad2ec661d406f23c2a098a039f8a7c69bca10608e06dfcdda9601e15426a53959e610f67096f0e0b07abe572b6621bafdd5f42ead72a7ae88a0e8e838660e04605fc2d24c59ef295f139f606fd5a0d11df4c60a239b682fd196d1039b08065420ad83297efdfdc887d6f14e7943d2313f907b7615a298fd528175b6da7ee926099c66edf0daf0fcc612fc7e43bd54de56d5b26a475f51efa86ac563c4431fe615710e1660a1b2e194bac88ad368fc8068db14234de3bb65e02979300822df815a10cfdec81016ba2</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Oops! 這裡似乎需要密碼</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>學測</tag>
      </tags>
  </entry>
  <entry>
    <title>APCS 2024 1 月場</title>
    <url>/APCS-2024-01/</url>
    <content><![CDATA[<h1 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h1><p>第 4 題還在研究~</p>
<h2 id="1-遊戲選角"><a href="#1-遊戲選角" class="headerlink" title="1. 遊戲選角"></a>1. 遊戲選角</h2><details class="note default"><summary><p>展開程式碼</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">p</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> d;</span><br><span class="line">    <span class="type">int</span> ability;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(p a, p b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.ability &gt; b.ability;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ouo;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    p player[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; player[i].a &gt;&gt; player[i].d;</span><br><span class="line">        player[i].ability = player[i].a * player[i].a + player[i].d * player[i].d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(player, player + n, cmp);</span><br><span class="line">    cout &lt;&lt; player[<span class="number">1</span>].a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; player[<span class="number">1</span>].d;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="2-蜜蜂觀察"><a href="#2-蜜蜂觀察" class="headerlink" title="2. 蜜蜂觀察"></a>2. 蜜蜂觀察</h2><details class="note default"><summary><p>展開程式碼</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m, n, k;</span><br><span class="line"><span class="type">int</span> amount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">    string arr[m];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> p_x = m - <span class="number">1</span>, p_y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> alpha[<span class="number">2</span>][<span class="number">26</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">0</span>; t &lt; k; t++) &#123;</span><br><span class="line">        <span class="type">int</span> d = <span class="number">-1</span>;</span><br><span class="line">        cin &gt;&gt; d;</span><br><span class="line">        <span class="type">int</span> d_x = <span class="number">0</span>, d_y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (d) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                d_x -= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                d_y += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                d_x += <span class="number">1</span>;</span><br><span class="line">                d_y += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                d_x += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                d_y -= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                d_x -= <span class="number">1</span>;</span><br><span class="line">                d_y -= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p_x + d_x &lt; m &amp;&amp; p_x + d_x &gt;= <span class="number">0</span> &amp;&amp; p_y + d_y &lt; n &amp;&amp; p_y + d_y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            p_x += d_x;</span><br><span class="line">            p_y += d_y;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; arr[p_x][p_y];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr[p_x][p_y] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; arr[p_x][p_y] &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">            alpha[<span class="number">0</span>][arr[p_x][p_y] - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[p_x][p_y] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; arr[p_x][p_y] &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">            alpha[<span class="number">1</span>][arr[p_x][p_y] - <span class="string">&#x27;A&#x27;</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (alpha[i][j] == <span class="literal">true</span>) amount++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">         &lt;&lt; amount;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>


<h2 id="3-邏輯電路"><a href="#3-邏輯電路" class="headerlink" title="3. 邏輯電路"></a>3. 邏輯電路</h2><p>參考 <span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQFlvdXRvbmcwODI2L3pqX205OTM=">@Youtong0826<i class="fa fa-external-link-alt"></i></span> 的思路，原本只有做 DFS 的部分但會超時，所以改成用 DP 紀錄已經跑過的邏輯閘。</p>
<details class="note default"><summary><p>展開程式碼</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> type;  <span class="comment">// 1: AND, 2: OR, 3: XOR, 4: NOT</span></span><br><span class="line">    <span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> p, q, r, m;</span><br><span class="line">vector&lt;node&gt; vc;</span><br><span class="line">vector&lt;<span class="type">bool</span>&gt; visited;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; g;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; dp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pair&lt;int, int&gt; = &#123;result, delay&#125;</span></span><br><span class="line"><span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">dfs</span><span class="params">(<span class="type">int</span> idx)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (idx &lt;= p) &#123;</span><br><span class="line">        visited[idx] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> dp[idx] = &#123;vc[idx].result, <span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 輸出節點必只有一個輸入端</span></span><br><span class="line">    <span class="keyword">if</span> (idx &gt; p + q &amp;&amp; idx &lt;= p + q + r) <span class="keyword">return</span> <span class="built_in">dfs</span>(g[idx][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (visited[idx]) <span class="keyword">return</span> dp[idx];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do</span></span><br><span class="line">    visited[idx] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">auto</span> a = <span class="built_in">dfs</span>(g[idx][<span class="number">0</span>]);  <span class="comment">// 先取得第一個輸入端</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (vc[idx].type == <span class="number">4</span>) <span class="keyword">return</span> dp[idx] = &#123;!a.first, a.second + <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> b = <span class="built_in">dfs</span>(g[idx][<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (vc[idx].type == <span class="number">1</span>) <span class="keyword">return</span> dp[idx] = &#123;(a.first &amp;&amp; b.first), <span class="built_in">max</span>(a.second, b.second) + <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (vc[idx].type == <span class="number">2</span>) <span class="keyword">return</span> dp[idx] = &#123;(a.first || b.first), <span class="built_in">max</span>(a.second, b.second) + <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (vc[idx].type == <span class="number">3</span>) <span class="keyword">return</span> dp[idx] = &#123;(a.first != b.first), <span class="built_in">max</span>(a.second, b.second) + <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;vc[idx].result, <span class="number">0</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ouo;</span><br><span class="line">    cin &gt;&gt; p &gt;&gt; q &gt;&gt; r &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    vc.<span class="built_in">resize</span>(p + q + r + <span class="number">1</span>);</span><br><span class="line">    visited.<span class="built_in">assign</span>(p + q + r + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">    g.<span class="built_in">assign</span>(p + q + r + <span class="number">1</span>, &#123;&#125;);</span><br><span class="line">    dp.<span class="built_in">resize</span>(p + q + r + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= p + q; i++) &#123;</span><br><span class="line">        vc[i].result = <span class="number">0</span>;</span><br><span class="line">        vc[i].type = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// in</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= p; i++) &#123;</span><br><span class="line">        cin &gt;&gt; vc[i].result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// logic</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span><br><span class="line">        cin &gt;&gt; vc[p + i].type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// graph</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        g[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> delay = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = p + q + <span class="number">1</span>; i &lt;= p + q + r; i++) &#123;</span><br><span class="line">        <span class="keyword">auto</span> f = <span class="built_in">dfs</span>(i);</span><br><span class="line">        ans.<span class="built_in">push_back</span>(f.first);</span><br><span class="line">        delay = <span class="built_in">max</span>(delay, f.second);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; delay &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : ans) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>


]]></content>
      <categories>
        <category>APCS</category>
      </categories>
      <tags>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>TOI 練習賽 202404 新手組</title>
    <url>/TOIP-202404-beginner/</url>
    <content><![CDATA[<h1 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h1><p>這次 TOIP 只涉及到一維陣列，暴力解就行了。</p>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><h2 id="1-電影院（Cinema）"><a href="#1-電影院（Cinema）" class="headerlink" title="1. 電影院（Cinema）"></a>1. 電影院（Cinema）</h2><details class="note default"><summary><p>展開程式碼</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> arr[n];</span><br><span class="line">    <span class="type">int</span> hr, min;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; hr &gt;&gt; min;</span><br><span class="line">        arr[i] = hr * <span class="number">60</span> + min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(arr, arr + n);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; hr &gt;&gt; min;</span><br><span class="line">    <span class="type">int</span> now = hr * <span class="number">60</span> + min;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt;= now + <span class="number">20</span>) &#123;</span><br><span class="line">            cout &lt;&lt; ((arr[i] / <span class="number">60</span> / <span class="number">10</span> == <span class="number">0</span>) ? <span class="string">&quot;0&quot;</span> : <span class="string">&quot;&quot;</span>) </span><br><span class="line">                 &lt;&lt; arr[i] / <span class="number">60</span> &lt;&lt; <span class="string">&quot; &quot;</span> </span><br><span class="line">                 &lt;&lt; ((arr[i] % <span class="number">60</span> / <span class="number">10</span> == <span class="number">0</span>) ? <span class="string">&quot;0&quot;</span> : <span class="string">&quot;&quot;</span>)</span><br><span class="line">                 &lt;&lt; arr[i] % <span class="number">60</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Too Late\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h2 id="2-撲克（Poker）"><a href="#2-撲克（Poker）" class="headerlink" title="2. 撲克（Poker）"></a>2. 撲克（Poker）</h2><details class="note default"><summary><p>展開程式碼</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, mx = <span class="number">-1</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">52</span> + <span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> tmp;</span><br><span class="line">        cin &gt;&gt; tmp;</span><br><span class="line">        arr[tmp]++;</span><br><span class="line">        mx = <span class="built_in">max</span>(mx, arr[tmp]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mn = INT_MAX;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">52</span>; i++) mn = <span class="built_in">min</span>(mn, arr[i]);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; mn &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; (mx - mn) * <span class="number">52</span> - (n - mn * <span class="number">52</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h2 id="3-熱門商品（Commodity）"><a href="#3-熱門商品（Commodity）" class="headerlink" title="3. 熱門商品（Commodity）"></a>3. 熱門商品（Commodity）</h2><details class="note default"><summary><p>展開程式碼</p>
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> k, n;</span><br><span class="line">    cin &gt;&gt; k &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> arr[k];</span><br><span class="line">    <span class="type">int</span> goods[<span class="number">1005</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">        goods[arr[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mx = <span class="number">0</span>, favorite = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (goods[arr[i]] &gt; mx) &#123;</span><br><span class="line">            mx = goods[arr[i]];</span><br><span class="line">            favorite = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> shop[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; shop[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mn = INT_MAX, flag = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> q = <span class="number">0</span>; q &lt; shop[i]; q++) &#123;</span><br><span class="line">            <span class="type">int</span> quetion;</span><br><span class="line">            cin &gt;&gt; quetion;</span><br><span class="line">            val += goods[quetion];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (val &lt; mn) &#123;</span><br><span class="line">            mn = val;</span><br><span class="line">            flag = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ans</span></span><br><span class="line">    cout &lt;&lt; favorite &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; flag + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>]]></content>
      <categories>
        <category>TOIP</category>
      </categories>
      <tags>
        <tag>TOI</tag>
        <tag>TOIP</tag>
        <tag>新手組</tag>
      </tags>
  </entry>
  <entry>
    <title>【心得】少有人走的路：心智成熟的旅程</title>
    <url>/The-Road-Less-Traveled/</url>
    <content><![CDATA[<p>這本書在講的是自律、愛、心智成長、信仰、恩典等各個問題。主要在於心智的成長</p>
<h3 id="自律"><a href="#自律" class="headerlink" title="自律"></a>自律</h3><p>作者要求我們要做到 推遲滿足感、承擔責任、忠於事實、保持平衡 並細心理解其中道理。</p>
<p>我們其實早已得知何為推遲滿足感，又或稱延遲享受。最早可推至小時候，那時的我們總能聽到大人說：「去寫完功課再去玩手機」「完成家事後，才能看電視」「被完單字才能睡覺」這都是先苦後樂的道理，而自律就是基於這個道理去執行的。我很常聽到：「要怎麼自律？」其實我也不清楚，我只知道，自律使人充滿幹勁，他會義無反顧的完成他的任務。自從我有了平板、手機的四年級起，我就開始每天玩著諸如此類的 3C 產品，甚至連電視也不跟爸媽搶著看了。說實話，這樣的行為，早已打破了自律。自律是從小就該培養的東西，而父母正是傳遞自律的途徑。在出生不到一歲嬰兒的意識裡，不存在爸媽的形象，只知道這兩個人會不斷的出現在自己眼中，然後供給自己生活所需。因此父母是我們一生的依賴，我們從小就在他們身上學到所有行為，包含吵架方式、打掃方式、溝通方式等處理事務的能力。所以自律也不例外，它是需要被培養的，它能使我們面對問題。</p>
<blockquote>
<p>解決人生問題的首要方案，乃是自律，缺少了這一環，你不可能解決任何麻煩和困難。局部的自律只能解決局部的問題，完整的自律才能解決所有的問題。<br>《少有人走的路》Page 18</p>
</blockquote>
<p>而它關聯性較強的無非是爸媽的愛，爸媽的愛告訴我們：有他們在，我可以不怕前方恐懼，進而得到勇氣，因為我們知道我們是被愛的，所以不怕被拋棄、遺棄，充滿著安全感。這安全感能讓我們面對問題、正視問題。</p>
<p>倘若沒有了愛，那我們面對世界會變得恐懼、不敢面對，導致常常逃避問題，把問題把在一旁，時常提醒自己要解決它，但都是以不想弄、懶得弄、今天好累不想做、之後有時間再弄作為結尾。</p>
<blockquote>
<p>美國開國先哲本傑明．富蘭克林說過：「惟有痛苦才會帶來教益。」面對問題，聰明者不因害怕痛苦而選擇逃避，而是迎上前去，直至將其戰勝為止。<br>《少有人走的路》Page 19</p>
</blockquote>
<p>作者還提到人生的意義是甚麼，也正如他所說：許多人應該都答不太出來。或許人生的意義就是遇到問題，然後解決問題，再遇到新的問題，繼續解決它，反覆無常，使我們意識裡得到了許多感悟並從問題中成長，或許這就是人生的意義吧。</p>
<p>而作者特別將沒辦法自律多推究給父母親。通常爸媽面對孩子的不斷詢問後的反應總是不耐煩的說：「你再吵，我就不要你了」這種威脅會不斷出現在孩子的回憶裡，不斷重演，也包括我的過去，爸媽的責怪、罵聲，總能讓我重回當下的陰影裡揮之不去。但幸虧於那些慘不忍睹的記憶，我告誡自己：我不要成為和自己父母一樣的大人。至此之後，我總是一個人在房間度過自己和自己相處的時光，作業、課本似乎一動也沒動，因為我腦中出現太多畫面，根本沒有機會去想我還有甚麼事情沒做，就算想起自己還有一堆課業要顧，但每每還是沒辦法有那動力去學習，不斷的困住自己。</p>
<blockquote>
<p>父母同樣是指揮官，其使命和管理企業一樣複雜。正像軍隊指揮官那樣，大多數父母面對孩子的問題束手無策，連續數月乃至數年都無任何舉措，只可一味拖延。<br>《少有人走的路》Page 37</p>
</blockquote>
<p>我不怪罪於父母，他們的養育我感恩在心。若父母都不自律，我為甚麼還要與父母親計較，我若有能力自律，我大可不必大吵一架之後，委屈自己還打破家庭的平靜，說實話我不知道甚麼是錯甚麼是對，所謂的叛逆又是什麼，是我們的頂嘴還是與大人之間的爭吵，難道大人都是對的，我們都是錯的，或許並非如此。所以我再次告訴自己：要學會與自己和解，才能與家人和解，到現在我仍過意不去，明明是因為幫你抬瓶汽水，我覺得重所以才嘆口氣，你卻要說我：「你這甚麼態度！」現在才覺得我父親挺可笑的……未釐清事實真相，就血口噴人，我為何要受這委屈呢？我當時若有我現在的想法那有多好啊！我多恨我父親啊！所以即使爸媽沒有自律，我也要變的自律，才有辦法洗掉那些慘痛的經歷。這不是說大話，這位心理學作者接觸過的病人，即變成年了，也沒有能力自律，我同意它所說的。</p>
<p>所以作者希望我們能學會的四個要素</p>
<ol>
<li>推遲滿足感</li>
<li>承擔責任</li>
<li>忠於事實</li>
<li>保持平衡</li>
</ol>
<p>我也大都能理解了。</p>
]]></content>
      <tags>
        <tag>心得</tag>
      </tags>
  </entry>
  <entry>
    <title>作者使用的 C++ 編譯器</title>
    <url>/cpp-compiler/</url>
    <content><![CDATA[<h2 id="線上"><a href="#線上" class="headerlink" title="線上"></a>線上</h2><ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9yZXBsaXQuY29tL34=">Repl.it<i class="fa fa-external-link-alt"></i></span><br><strong>優點</strong>：線上編譯，可以在不同地方不同電腦上寫 code ，可隨時新增不同程式語言的專案。打好的 code 可以直接複製網址給其他人（放心，其他人更改不了你的 code ）。<br><strong>缺點</strong>：帳號的存放大小有限，不過對方變性就已經不錯了。以及部分功能需付費。<em>雖不用按下你的 ctrl + s ，但是如果網站剛好卡住就沒辦法隨時存檔。 （作者曾經歷過…）</em></li>
</ol>
<h2 id="應用程式"><a href="#應用程式" class="headerlink" title="應用程式"></a>應用程式</h2><ol>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v">Visual Studio Code<i class="fa fa-external-link-alt"></i></span><br><strong>優點</strong>：可自行下載延伸模組，自由度較高<br><strong>缺點</strong>：也許是作者還不夠理解，新手可能對這個有點難因為還有環境的配置，作者的同學也編譯不了 C++，不過作者本人有成功，但就是在這上面研究許久…</p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvbWluZ3ctdzY0L2ZpbGVzL21pbmd3LXc2NC9taW5ndy13NjQtcmVsZWFzZS8=">MinGW<i class="fa fa-external-link-alt"></i></span><br><strong>特點</strong>：提供一個可執行 gcc 程式開發環境，整合了許多 windows 下可運行的標頭檔案和檔案庫，為 c++ 的開發提供了良好基礎支援，他不是一種編輯器，是一個提供環境做編譯的程式，非常重要。</p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvb3J3ZWxsZGV2Y3BwLw==">Dev-C++<i class="fa fa-external-link-alt"></i></span><br><strong>特點</strong>：使用 MinGW32&#x2F;gcc 編譯器，可高亮度語法顯示，以減少編輯錯誤。</p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY29kZWJsb2Nrcy5vcmcvZG93bmxvYWRzL2JpbmFyaWVzLw==">Code Blocks<i class="fa fa-external-link-alt"></i></span><br><strong>特點</strong>：也是使用 MinGW 做編譯的，擴充性強大，也適合開發應用程式。</p>
</li>
</ol>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>作者目前使用的是 Repl.it 和 VScode，其他編輯器我也只有在學校電腦上使用，所以還不知道他們的特性。線上的編譯器和延伸模組多到用不完的編輯器真的很好用，包括我撰寫的這篇文章也是用 VScode 編輯出來的，他的延伸模組之後也會出一篇來推薦幾個好用的，提供大家使用。</p>
]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>編譯器/編輯器</tag>
      </tags>
  </entry>
  <entry>
    <title>【筆記】前序式、中序式與後序式</title>
    <url>/infix-postfix/</url>
    <content><![CDATA[<h1 id="電腦怎麼進行四則運算？"><a href="#電腦怎麼進行四則運算？" class="headerlink" title="電腦怎麼進行四則運算？"></a>電腦怎麼進行四則運算？</h1><p>電腦其實很笨，所以計算機在做運算時，只會依你的命令順序做運算。</p>
<p>比如題目為 3 + 2 * 4</p>
<p>若照著順序按，得到的答案是 20。但以四則運算來說這很明顯已經錯了，答案應該為 11。</p>
<p>那前中後序的差別就是運算子的先後順序，可電腦有更好的方法進行四則運算，那就是後（前）序式。</p>
<p>後序式如：3 2 4 * +</p>
<p>數字在前，而運算子在後。在中序轉後序時，運算子會在過程中有比對先後順序，而非直接把運算式按順序放置後方。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">運算子 數字 數字  // 前序</span><br><span class="line">數字 運算子 數字  // 中序</span><br><span class="line">數字 數字 運算子  // 後序</span><br></pre></td></tr></table></figure>

<p>所以如果要讓電腦看得懂四則運算的規則必須要讓電腦知道每個符號的有先順序<br>如：<br><code>*</code> <code>/</code> 大於 <code>+</code> <code>-</code><br><code>(</code> <code>)</code> 大於 <code>*</code> <code>/</code></p>
<h1 id="中序式轉後序式"><a href="#中序式轉後序式" class="headerlink" title="中序式轉後序式"></a>中序式轉後序式</h1><p>若遇到數字則直接輸出或放入字串，遇到運算子就判斷後放進 stack 裡。<br>若 <code>stack.top()</code> 的運算子權重小於讀取的運算子，如：<code>+</code> <code>-</code> 小於 <code>*</code> <code>/</code> 直接 <code>stack.push(運算子)</code>，<br>若 <code>stack.top()</code> 的運算子權重大於讀取的運算子，如：<code>*</code> <code>/</code> 大於 <code>+</code> <code>-</code> 則先輸出或放入字串 <code>stack.top()</code>，再 <code>stack.pop()</code>，最後才 <code>stack.push(運算子)</code>。<br>若符號是 <code>(</code> 則直接放入，繼續進行程式直到遇到 <code>)</code>，才把 stack 到 <code>(</code> 裡的符號輸出或放入字串，記得最後也要把 <code>(</code> pop 掉。</p>
<table>
<thead>
<tr>
<th>中序式元素</th>
<th>stack</th>
<th>後序式</th>
</tr>
</thead>
<tbody><tr>
<td>(</td>
<td>(</td>
<td>無</td>
</tr>
<tr>
<td>3</td>
<td>(</td>
<td>3</td>
</tr>
<tr>
<td>+</td>
<td>(+</td>
<td>3</td>
</tr>
<tr>
<td>2</td>
<td>(+</td>
<td>32</td>
</tr>
<tr>
<td>)</td>
<td></td>
<td>32+</td>
</tr>
<tr>
<td>*</td>
<td>*</td>
<td>32+</td>
</tr>
<tr>
<td>(</td>
<td>*(</td>
<td>32+</td>
</tr>
<tr>
<td>4</td>
<td>*(</td>
<td>32+4</td>
</tr>
<tr>
<td>-</td>
<td>*(-</td>
<td>32+4</td>
</tr>
<tr>
<td>1</td>
<td>*(-</td>
<td>32+41</td>
</tr>
<tr>
<td>)</td>
<td>*</td>
<td>32+41-</td>
</tr>
<tr>
<td></td>
<td></td>
<td>32+41-*</td>
</tr>
</tbody></table>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">order</span><span class="params">(<span class="type">char</span> sy)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sy == <span class="string">&#x27;+&#x27;</span> || sy == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sy == <span class="string">&#x27;*&#x27;</span> || sy == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; str) &#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; symbol;   <span class="comment">// stack 放運算子</span></span><br><span class="line">        string postfix = <span class="string">&quot;&quot;</span>;  <span class="comment">// 後序式</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&#x27;(&#x27;</span>) &#123;  <span class="comment">// 符號處理</span></span><br><span class="line">                symbol.<span class="built_in">push</span>(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">&#x27;+&#x27;</span> || str[i] == <span class="string">&#x27;-&#x27;</span> || str[i] == <span class="string">&#x27;*&#x27;</span> || str[i] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (symbol.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    symbol.<span class="built_in">push</span>(str[i]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">int</span> a = <span class="built_in">order</span>(symbol.<span class="built_in">top</span>()), b = <span class="built_in">order</span>(str[i]);</span><br><span class="line">                    <span class="comment">// 若 a 是 *, b 是 -, 則權重大的先放進後序式</span></span><br><span class="line">                    <span class="keyword">while</span> (a &gt;= b) &#123;</span><br><span class="line">                        postfix.<span class="built_in">push_back</span>(symbol.<span class="built_in">top</span>());</span><br><span class="line">                        symbol.<span class="built_in">pop</span>();</span><br><span class="line">                        <span class="keyword">if</span> (symbol.<span class="built_in">empty</span>()) <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    symbol.<span class="built_in">push</span>(str[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (symbol.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                    postfix.<span class="built_in">push_back</span>(symbol.<span class="built_in">top</span>());</span><br><span class="line">                    symbol.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                symbol.<span class="built_in">pop</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 數字處裡</span></span><br><span class="line">                postfix.<span class="built_in">push_back</span>(str[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 將未拿出的符號提出</span></span><br><span class="line">        <span class="keyword">while</span> (!symbol.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            postfix.<span class="built_in">push_back</span>(symbol.<span class="built_in">top</span>());</span><br><span class="line">            symbol.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 後序式輸出</span></span><br><span class="line">        cout &lt;&lt; postfix &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>筆記</category>
      </categories>
      <tags>
        <tag>筆記</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Hexo 在 GitHub 架站吧</title>
    <url>/make-a-blog-with-hexo/</url>
    <content><![CDATA[<h1 id="Blog-是什麼？"><a href="#Blog-是什麼？" class="headerlink" title="Blog 是什麼？"></a>Blog 是什麼？</h1><blockquote>
<p>是一種線上日記型式的個人網站，藉由張貼文章、圖片或影片來記錄生活、抒發情感或分享資訊。部落格上的文章通常根據張貼時間，以倒序方式由新到舊排列。<br>by <span class="exturl" data-url="aHR0cHM6Ly96aC5tLndpa2lwZWRpYS5vcmcvd2lraS8lRTclQjYlQjIlRTglQUElOEM=">維基百科<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h1 id="為何要寫-Blog？"><a href="#為何要寫-Blog？" class="headerlink" title="為何要寫 Blog？"></a>為何要寫 Blog？</h1><p>部落格可以為自己記錄成長軌跡，不只是日常稱活的趣事，也可以是科普文章，主題由自己策劃，選擇自己喜歡或擅長的領域，發布一篇文章，使更多人看到。別人既可以從文章中得到娛樂與知識，自己也可以得到寫作的提升，以及規劃文章的能力和選擇客群的能力。</p>
<h1 id="如何用-Hexo-在-GitHub-架站呢？"><a href="#如何用-Hexo-在-GitHub-架站呢？" class="headerlink" title="如何用 Hexo 在 GitHub 架站呢？"></a>如何用 Hexo 在 GitHub 架站呢？</h1><h2 id="什麼是-Hexo？"><a href="#什麼是-Hexo？" class="headerlink" title="什麼是 Hexo？"></a>什麼是 Hexo？</h2><p>進入 <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLXR3Lw==">Hexo 官網<i class="fa fa-external-link-alt"></i></span> 後，中間的大字足以描述什麼是 Hexo。</p>
<blockquote>
<p>快速、簡單且強大的網誌框架<br>by Hexo</p>
</blockquote>
<p>沒錯！它是一個可以幫你快速搭建部落格網頁的工具。</p>
<h2 id="什麼是-GitHub？"><a href="#什麼是-GitHub？" class="headerlink" title="什麼是 GitHub？"></a>什麼是 GitHub？</h2><p>GitHub 是一個商業網站，是目前全球最大的 Git Server。你可以在上面分享你的程式碼、結交相同志趣的朋友、貢獻自己的程式碼將一個專案做的越來越好。當然別人也可以給你回饋，有如一個程式碼的社群，而且上面的環境很乾淨。<br>同時，這個網站也是開發者最好的履歷，因為做過的專案、寫過的 code、做了什麼貢獻、有什麼勳章，都可以一目瞭然。</p>
<p>Git 與 GitHub 差別在哪？</p>
<p>Git 是工具，GitHub 是網站。<br>Git 是一個版本控制系統，簡單來說就是一個可以把檔案的狀態作為更新歷史記錄保存起來，<br>而 GitHub 就是一個提供 Git Server 的網站平台。</p>
<p>所以現在就來用 Hexo 做做看自己的網站吧！</p>
<h2 id="創建-GitHub-帳號-設置專案"><a href="#創建-GitHub-帳號-設置專案" class="headerlink" title="創建 GitHub 帳號 + 設置專案"></a>創建 GitHub 帳號 + 設置專案</h2><p>進入 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLw==">GitHub 官網<i class="fa fa-external-link-alt"></i></span> 後，註冊 <code>Sign up</code> 並登入 <code>Sign in</code><br><img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/image.png"></p>
<p>進到 GitHub 首頁應該長這樣<br><img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/github-homepage.png"></p>
<p>右上角有個加號點下去之後，選擇 <code>New repository</code>，進入後的畫面如下<br><img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/new_repo.png"></p>
<p>於 <code>Repository name</code> 那一欄填上 <code>使用者名稱.github.io</code>。忘記使用者名稱的話，其實就在左側一欄。<br><img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/new-repository.png"></p>
<p>接著就按下綠色的創建鍵 <code>Create repository</code> 即可。</p>
<p>進入專案後，點擊 <code>setting</code> 選項。<br><img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/github-io-setting.png"></p>
<p>並設置主題，後續會更改，可以不用考慮太多，選擇其一即可。<br><img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/github-io-theme.png"><br><img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/choose-theme.png"></p>
<p>你完成了你的網站啦！！！網址為：<code>https://使用者名稱.github.io/</code>，不過剛創建的網站可能要稍後才會顯示。</p>
<h2 id="選定好部落格的位置"><a href="#選定好部落格的位置" class="headerlink" title="選定好部落格的位置"></a>選定好部落格的位置</h2><p>由於我們會存文章在電腦裡面，所以先選好位置。<br>我的部落格位置是</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">D 槽</span><br><span class="line">└── Blog    // 直接新建一個資料夾放你的 Hexo 文件</span><br></pre></td></tr></table></figure>

<h2 id="Hexo-登場！"><a href="#Hexo-登場！" class="headerlink" title="Hexo 登場！"></a>Hexo 登場！</h2><p>我們的主角是 Hexo，當然，也有其他的部落格工具可以使用，如：Hugo, Gatsby, Vuepress, Jekyll… 等。<br>Hexo 的主題多，且擴充的外掛也很多，所以才使用它當我們的工具，但缺點是當文章足夠多時，上傳速度會明顯比 Hugo 慢很多（超多），不過看在主題好看的誘惑下，我還是選擇了 Hexo。<br>接下來，來配置 Hexo 環境吧！</p>
<h3 id="前置安裝"><a href="#前置安裝" class="headerlink" title="前置安裝"></a>前置安裝</h3><p>在使用 Hexo 之前，請先下載：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==">Node.js<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<p>  我們選擇穩定的版本，Hexo 官方有提醒至少要大於 10.0 的版本，我們選左邊的 16.15.0，直接安裝即可。<br>  <img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/node-download.png"></p>
<ol start="2">
<li><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS8=">Git<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<p>  也是直接安裝即可。<br>  <img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/git-download.png"></p>
<ol start="3">
<li><span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v">Visual Studio Code<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<p>  這是一個具有很多外掛的文字編輯器，一樣也是直接安裝即可。<br>  <img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/vscode-download.png"></p>
<h3 id="初始設置"><a href="#初始設置" class="headerlink" title="初始設置"></a>初始設置</h3><p>接著我們來當駭客（誤）<br>我們開啟 <code>Blog</code> 位置的終端機。輸入 cmd<br><img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/hexo-blog.png"></p>
<p>在 cmd 裡輸入下面指令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>等待下載後，輸入 <code>hexo -v</code> 也就是 <code>hexo version</code> （想也知道你們會選 hexo -v）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<p>有出現各項版本就確定安裝好了！<br><img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/hexo-v.png"></p>
<p>接著配置 Hexo 相關初始套件，輸入下方指令。一行一行複製，<code>&lt;資料夾名稱&gt;</code> 記得改掉，我建置的名稱是 MyBlog。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init &lt;資料夾名稱&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;資料夾名稱&gt;</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>第 1 行：新建一個資料夾<br>第 2 行：選擇資料夾並進入該資料夾<br>第 3 行：安裝 Hexo 相關初始套件<br>第 4 行：安裝 Git 部屬套件</p>
<p>你常用的資料應該有</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">D 槽</span><br><span class="line">└── Blog</span><br><span class="line">    └── MyBlog</span><br><span class="line">        ├── package.json # 各項模組版本</span><br><span class="line">        ├── scaffolds    # post, page 和 draft 模板</span><br><span class="line">        ├── source       # 資源（資料）</span><br><span class="line">        |   └── _posts   # 文章資料夾，你所有的文章都在這</span><br><span class="line">        ├── themes       # 主題（後續會教如何使用其他主題）</span><br><span class="line">        └── _config.yml  # 部落格配置</span><br></pre></td></tr></table></figure>

<p>這樣你就完成 Hexo 的配置了。有沒有覺得自己超棒 (●’◡’●)</p>
<h2 id="設置-Blog-相關訊息"><a href="#設置-Blog-相關訊息" class="headerlink" title="設置 Blog 相關訊息"></a>設置 Blog 相關訊息</h2><p>接下來就要用到 VS code 啦～<br>右鍵 D:&#x2F;Blog&#x2F;MyBlog，選擇 <code>以 code 開啟</code> 圖標示 VS code 的那個選項，就可以開始編輯屬於自己的部落格啦。<br><img src="https://raw.githubusercontent.com/huangmayor0905/image-hosting/main/img/open-by-code.png"></p>
<p>在 6 ~ 12 行編輯部落格訊息</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Blog</span> <span class="string">test</span>                <span class="comment"># 部落格標題</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;這是一個簡單的部落格&#x27;</span>  <span class="comment"># 副標題，以單引好包起來</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span>                 <span class="comment"># 描述，以單引號包起來</span></span><br><span class="line"><span class="attr">keywords:</span>                       <span class="comment"># 關鍵詞，直接輸入字詞，以半形逗點隔開</span></span><br><span class="line"><span class="attr">author:</span>                         <span class="comment"># 作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-TW</span>                 <span class="comment"># 語言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span>                    <span class="comment"># 空白以使用系統時間</span></span><br></pre></td></tr></table></figure>

<p>在 16 行編輯網站網址</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://username.github.io/</span></span><br></pre></td></tr></table></figure>

<p>接著設定部屬訊息，這通常在最下面</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>接著部屬看看，組合技：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>終於完成了，文章有任何問題，或是不清楚的地方歡迎留言</p>
]]></content>
      <categories>
        <category>Hexo 部落格</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>部落格</tag>
      </tags>
  </entry>
  <entry>
    <title>【C++】 認識 Hello World</title>
    <url>/meeting-hello-world/</url>
    <content><![CDATA[<h1 id="第一個程式，認識-Hello-world"><a href="#第一個程式，認識-Hello-world" class="headerlink" title="第一個程式，認識 Hello world"></a>第一個程式，認識 Hello world</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>說到程式語言，Hello World 想必是程式入門時最常見的詞，它是什麼時候出現的，那為甚麼會被廣泛流傳呢？</p>
<p>首先，大部分人認為是《C 程序設計語言》此書作者之一，Brian Kernighan 在 1973 年出版的《程式語言 B 教程導論》裡首次提到。以下是當時首次提到 Hello World 的程式碼：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">  extrn a,b,c;</span><br><span class="line">  <span class="title function_">putchar</span>(a); <span class="title function_">putchar</span>(b); <span class="title function_">putchar</span>(c); <span class="title function_">putchar</span>(<span class="string">&#x27;!*n&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">a <span class="string">&#x27;hell&#x27;</span>;</span><br><span class="line">b <span class="string">&#x27;o, w&#x27;</span>;</span><br><span class="line">c <span class="string">&#x27;orld&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>但不幸的是他受訪時，他無法準確的講述原因跟時間。「我只記得，我好像看過一幅漫畫，講述一枚雞蛋和一隻小雞的故事，在那副漫畫中，小雞說了一句：『Hello World』。」他是這樣說的。</p>
<p>結論，Hello World 的起源應該是 Brian Kernighan 小時候曾看過的漫畫。</p>
<hr>
<h2 id="用-C-實作吧！"><a href="#用-C-實作吧！" class="headerlink" title="用 C++ 實作吧！"></a>用 C++ 實作吧！</h2><p>說了這小小的故事，其實 Hello World 也代表著程式的運行無礙，那我們也可以開始動手做看看 C++ 世界裡的 Hello World 啦！</p>
<ol>
<li>你可以使用 <span class="exturl" data-url="aHR0cHM6Ly9yZXBsaXQuY29tLw==">Repl<i class="fa fa-external-link-alt"></i></span> 線上的編譯器，註冊後，按下右上角的加號，在 Template 那一欄打上 C++，並選擇好 C++ 的環境模板。 </li>
<li>在右邊 Title 欄打上這個程式專案的名稱，若是練習通常我會打上今天的日期，如：20220326，除非是特別的專案才會特別取名，如果不取名，你的專案會在左邊的側邊欄 My Repls 的 Unnamed。</li>
</ol>
<figure class="highlight cpp"><figcaption><span>程式範例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先我們可以觀察看看，C++ 有人麼特別之處？如：句尾的共同處、有大括弧、小括弧等。那作者我就開始一一介紹吧！</p>
<ol>
<li><p>標頭檔：程式裡 <code>#include &lt;iostream&gt;</code> 就像是工具箱，它可以叫出你想用的工具，在這裡，我們使用 <code>cout</code> ，所以每當我們使用輸出時，就會使用到這個 <code>&lt;iostream&gt;</code> 標頭檔。</p>
</li>
<li><p>命名空間： <code>using namespace std;</code> 叫做命名空間，它的用處就像是你在學校裡，可能會有同名的人，所以我們會叫「某班的」誰誰誰，這個「某班的」，就是我們的 std 。若我們不先在程式裡輸入這行，程式碼就要在 cout 前面多打 std:: ，這樣就會變得更複雜。所以為了方便，我們習慣在程式一開始就先打 <code>using namespace std;</code> 。簡單來說，工具也會被重複命名到，然而我們只需要用到其中一個，所以直接在程式上打 <code>using namespace std;</code> 可以免去不斷撰寫的麻煩。</p>
</li>
<li><p>main 函式：我們也可以說它是主程式，用來執行你撰寫的程式。我們會在一對大括號內撰寫。int 是變數型態，表整數（integer）之意，在函式前的變數型態與回傳值有關，如下兩行的 <code>return 0;</code> 。</p>
</li>
<li><p>輸出 cout：用來輸出箭頭後方箭頭後的字串、變數和值。</p>
</li>
<li><p>return 0：表示回傳值為 0，也就是程式正常結束，但現在的編譯器都會在編譯時偷偷幫你補上這行，不過！還是要多多保持多打這行的習慣會比較好。</p>
</li>
</ol>
<h2 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h2><p><span class="exturl" data-url="aHR0cDovL2Jsb2cuZnVqaWppLmNvbS90aGUtaGlzdG9yeS1vZi1oZWxsby13b3JsZC8=">Hello World 程序的起源与历史<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>tag plugins 測試文章</title>
    <url>/tag-plugins-test/</url>
    <content><![CDATA[<div class="note "><h4 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h4><p>(without define class style)</p>
</div>

<div class="note default"><h4 id="Default-Header"><a href="#Default-Header" class="headerlink" title="Default Header"></a>Default Header</h4><p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo!<i class="fa fa-external-link-alt"></i></span></p>
</div>

<div class="note primary"><h4 id="Primary-Header"><a href="#Primary-Header" class="headerlink" title="Primary Header"></a>Primary Header</h4><p><strong>Welcome</strong> to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo!<i class="fa fa-external-link-alt"></i></span></p>
</div>

<div class="note info"><h4 id="Info-Header"><a href="#Info-Header" class="headerlink" title="Info Header"></a>Info Header</h4><p><strong>Welcome</strong> to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo!<i class="fa fa-external-link-alt"></i></span></p>
</div>

<div class="note success"><h4 id="Success-Header"><a href="#Success-Header" class="headerlink" title="Success Header"></a>Success Header</h4><p><strong>Welcome</strong> to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo!<i class="fa fa-external-link-alt"></i></span></p>
</div>

<div class="note warning"><h4 id="Warning-Header"><a href="#Warning-Header" class="headerlink" title="Warning Header"></a>Warning Header</h4><p><strong>Welcome</strong> to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo!<i class="fa fa-external-link-alt"></i></span></p>
</div>

<div class="note danger"><h4 id="Danger-Header"><a href="#Danger-Header" class="headerlink" title="Danger Header"></a>Danger Header</h4><p><strong>Welcome</strong> to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo!<i class="fa fa-external-link-alt"></i></span></p>
</div>

<div class="note info no-icon"><h4 id="No-icon-note"><a href="#No-icon-note" class="headerlink" title="No icon note"></a>No icon note</h4><p>Note <strong>without</strong> icon: <code>note info no-icon</code></p>
</div>

<details class="note primary"><summary><p>This is a summary</p>
</summary>
<h4 id="Details-and-summary"><a href="#Details-and-summary" class="headerlink" title="Details and summary"></a>Details and summary</h4><p>Note with summary: <code>note primary This is a summary</code></p>

</details>

]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>這是我的第一篇文章</title>
    <url>/test-artical/</url>
    <content><![CDATA[<p>hi~ 我是國國，身為高一的我想要深入探索程式世界，也歡迎大家與我分享、交流。</p>
<p>以下是 2022-4-29 更新的測試內容</p>
<h2 id="標題二"><a href="#標題二" class="headerlink" title="標題二"></a>標題二</h2><h3 id="標題三"><a href="#標題三" class="headerlink" title="標題三"></a>標題三</h3><h4 id="標題四"><a href="#標題四" class="headerlink" title="標題四"></a>標題四</h4><h5 id="標題五"><a href="#標題五" class="headerlink" title="標題五"></a>標題五</h5><h6 id="標題六"><a href="#標題六" class="headerlink" title="標題六"></a>標題六</h6><hr>
<h2 id="渲染器的各種操作"><a href="#渲染器的各種操作" class="headerlink" title="渲染器的各種操作"></a>渲染器的各種操作</h2>]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>【心得】被討厭的勇氣</title>
    <url>/the-Courage-to-Be-Disliked/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>心得</tag>
        <tag>被討厭的勇氣</tag>
      </tags>
  </entry>
  <entry>
    <title>【筆記】Array 陣列</title>
    <url>/computer-science/cpp/array/</url>
    <content><![CDATA[<h1 id="基本介紹"><a href="#基本介紹" class="headerlink" title="基本介紹"></a>基本介紹</h1><p>當我們需要存取一堆數據或資料時，總不能直接建立千個或上萬個變數吧！若這些數據具有相關性、型態一樣，可以使用 <code>Array</code> 來存取。陣列具有連續的記憶體位址，所以我們可以從頭走到尾來讀取 <code>Array</code> 中的數據。既可以減少變數的命名，還可以讓程式變得精簡、提高可讀性。</p>
<h1 id="如何宣告"><a href="#如何宣告" class="headerlink" title="如何宣告"></a>如何宣告</h1><p>先引入標頭檔 <code>#include &lt;array&gt;</code></p>
<h2 id="基礎宣告"><a href="#基礎宣告" class="headerlink" title="基礎宣告"></a>基礎宣告</h2><figure class="highlight cpp"><figcaption><span>基礎宣告範例</span></figcaption><table><tr><td class="code"><pre><span class="line">array&lt;<span class="type">int</span>, 10&gt; arr;</span><br></pre></td></tr></table></figure>

<p>從上方範例可知 <code>arr</code> 是一個長度為 10 的整數陣列</p>
<div class="note info"><p>在任何程式語言裡，陣列的第一項編號必為 <code>0</code>（編號我們通常稱之 index 索引）。所以若有一個長度為 <code>10</code> 的陣列，內容物的索引範圍為 <code>0~9</code>。</p>
</div>

<h2 id="設定初始值"><a href="#設定初始值" class="headerlink" title="設定初始值"></a>設定初始值</h2><figure class="highlight cpp"><figcaption><span>設定初始值範例</span></figcaption><table><tr><td class="code"><pre><span class="line">arr&lt;<span class="type">int</span>, <span class="number">5</span>&gt; arr_A&#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line">arr&lt;<span class="type">int</span>, <span class="number">5</span>&gt; arr_B&#123;&#125;;  <span class="comment">// 表示初始化 arr_B 元素皆為 0</span></span><br></pre></td></tr></table></figure>

<div class="note danger"><p>注意！若陣列未做初始值，其中元素可能為亂數。</p>
</div>

<h1 id="基礎使用"><a href="#基礎使用" class="headerlink" title="基礎使用"></a>基礎使用</h1><table>
<thead>
<tr>
<th>array 函式</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>begin()</code>, <code>end()</code>, <code>cbegin()</code>, <code>cend()</code></td>
<td>提供正向跌代器</td>
</tr>
<tr>
<td><code>rbegin()</code>, <code>rend()</code>, <code>crbegin()</code>, <code>crend()</code></td>
<td>提供反向跌代器</td>
</tr>
<tr>
<td><code>size()</code></td>
<td>返回陣列大小</td>
</tr>
<tr>
<td><code>max_size()</code></td>
<td>返回陣列最大大小（由於 <code>array</code> 為固定序列，故返回值與 <code>size()</code> 一樣）</td>
</tr>
<tr>
<td><code>at()</code>, <code>operator[]</code></td>
<td>取得元素</td>
</tr>
<tr>
<td><code>front()</code></td>
<td>返回第一個元素</td>
</tr>
<tr>
<td><code>back()</code></td>
<td>返回最後一個元素</td>
</tr>
<tr>
<td><code>data()</code></td>
<td>返回元素的指標</td>
</tr>
<tr>
<td><code>fill()</code></td>
<td>填滿陣列</td>
</tr>
<tr>
<td><code>swap()</code></td>
<td>交換兩個陣列元素</td>
</tr>
</tbody></table>
<p><span class="exturl" data-url="aHR0cHM6Ly9jcGx1c3BsdXMuY29tL3JlZmVyZW5jZS9hcnJheS9hcnJheS8=">查看更多可參考 cplusplus 官網<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="各種遍歷"><a href="#各種遍歷" class="headerlink" title="各種遍歷"></a>各種遍歷</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正向遍歷</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    cout &lt;&lt; data[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : data) &#123;</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = data.<span class="built_in">begin</span>(); iter != data.<span class="built_in">end</span>(); ++iter) &#123;</span><br><span class="line">    cout &lt;&lt; *iter &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 反向遍歷</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">9</span>; i &lt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    cout &lt;&lt; data[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = data.<span class="built_in">rbegin</span>(); iter != data.<span class="built_in">rend</span>(); ++iter) &#123;</span><br><span class="line">    cout &lt;&lt; *iter &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>計算機科學</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>筆記</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>【筆記】二分搜尋樹（Binary Search Tree）</title>
    <url>/computer-science/cpp/binary-search-tree/</url>
    <content><![CDATA[<h1 id="基本介紹"><a href="#基本介紹" class="headerlink" title="基本介紹"></a>基本介紹</h1><h2 id="定義"><a href="#定義" class="headerlink" title="定義"></a>定義</h2><ul>
<li>父節點的左子節點（left node）皆小於父節點。</li>
<li>父節點的右子節點（right node）皆大於父節點。</li>
<li>任意節點的左右子樹都符合 BST 的定義。</li>
<li>不存在等值的資料。</li>
</ul>
<p>圖例：</p>
<p><img src="https://i.imgur.com/cTf49p0.png" alt="Imgur"></p>
<h2 id="時間複雜度"><a href="#時間複雜度" class="headerlink" title="時間複雜度"></a>時間複雜度</h2><table>
<thead>
<tr>
<th align="center">演算法</th>
<th align="center">平均</th>
<th align="center">最差</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>空間</strong></td>
<td align="center">O(n)</td>
<td align="center">O(n)</td>
</tr>
<tr>
<td align="center"><strong>搜尋</strong></td>
<td align="center">O(log n)</td>
<td align="center">O(n)</td>
</tr>
<tr>
<td align="center"><strong>插入</strong></td>
<td align="center">O(log n)</td>
<td align="center">O(n)</td>
</tr>
<tr>
<td align="center"><strong>刪除</strong></td>
<td align="center">O(log n)</td>
<td align="center">O(n)</td>
</tr>
</tbody></table>
<p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJBJThDJUU1JTg1JTgzJUU2JTkwJTlDJUU1JUIwJThCJUU2JUE4JUI5">了解更多點我<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span>* left;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span>* right;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;left);</span><br><span class="line">        cout &lt;&lt; root-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">add_node</span><span class="params">(Node* new_node, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (new_node == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        new_node = <span class="keyword">new</span> Node;</span><br><span class="line">        new_node-&gt;data = n;</span><br><span class="line">        new_node-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">        new_node-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> new_node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> new_node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BST 的遞迴</span></span><br><span class="line"><span class="function">Node* <span class="title">input_data</span><span class="params">(Node* btree, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (btree == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        btree = <span class="built_in">add_node</span>(btree, n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n &lt; btree-&gt;data) &#123;</span><br><span class="line">        btree-&gt;left = <span class="built_in">input_data</span>(btree-&gt;left, n);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &gt; btree-&gt;data) &#123;</span><br><span class="line">        btree-&gt;right = <span class="built_in">input_data</span>(btree-&gt;right, n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> btree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node* binary_tree = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        binary_tree = <span class="built_in">input_data</span>(binary_tree, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">inorder</span>(binary_tree);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>計算機科學</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>筆記</tag>
        <tag>C++</tag>
        <tag>BST</tag>
        <tag>資料結構</tag>
        <tag>進階資料結構</tag>
      </tags>
  </entry>
  <entry>
    <title>【筆記】set</title>
    <url>/computer-science/cpp/set/</url>
    <content><![CDATA[<h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><ul>
<li>使用前，需引入 <code>&lt;set&gt;</code> 標頭檔。</li>
<li>通常是用紅黑樹實作的。</li>
<li>set 容器內的元素是唯一的（不重複）。 </li>
<li>set 容器具有排序性。</li>
<li>set 容器內的值不可被修改。</li>
</ul>
<h2 id="常用用法"><a href="#常用用法" class="headerlink" title="常用用法"></a>常用用法</h2><div class="note warning"><p>以下 <code>st</code> 皆為 set 容器的變數</p>
</div>

<h3 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h3><p>插入元素</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; st&#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br><span class="line">st.<span class="built_in">insert</span>(<span class="number">7</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;i : st) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">2 5 7 9</span><br></pre></td></tr></table></figure>

<h3 id="erase"><a href="#erase" class="headerlink" title="erase()"></a>erase()</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; st&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>&#125;;</span><br><span class="line">set.<span class="built_in">erase</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;i : st) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">4 6 8</span><br></pre></td></tr></table></figure>

<div class="note info"><p>可以刪除不存在的元素，但回傳值為 0</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; st&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>&#125;;</span><br><span class="line">cout &lt;&lt; st.<span class="built_in">erase</span>(<span class="number">3</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure></div>

<h3 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; st&#123;<span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">if</span> (st.<span class="built_in">find</span>(<span class="number">1</span>) == st.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Cannot be found.&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The value is in this set.&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Cannot be found.</span><br></pre></td></tr></table></figure>

<h3 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h3><p>也可以當作查詢是否有元素來使用，因為 set 每個值只會存在一個，因此使用 <code>count()</code> 會回傳 1（即存在）或 0（即不存在）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; st&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">cout &lt;&lt; st.<span class="built_in">count</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure>
<h3 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; st;</span><br><span class="line"><span class="keyword">if</span> (st.<span class="built_in">empty</span>())  <span class="comment">// .empty() 的回傳值為 true/false</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;It is a empty set.&quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;It is not empty.&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">It is a empty set.</span><br></pre></td></tr></table></figure>

<h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; st&#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>&#125;;</span><br><span class="line">st.<span class="built_in">clear</span>();  <span class="comment">// 清空 set</span></span><br><span class="line"><span class="keyword">if</span> (st.<span class="built_in">empty</span>()) cout &lt;&lt; <span class="string">&quot;It is empty.&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">It is empty.</span><br></pre></td></tr></table></figure>

<h2 id="遍歷-Set"><a href="#遍歷-Set" class="headerlink" title="遍歷 Set"></a>遍歷 Set</h2><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><h4 id="第一種"><a href="#第一種" class="headerlink" title="第一種"></a>第一種</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (set&lt;<span class="type">int</span>&gt;::iterator it = st.<span class="built_in">begin</span>(); it != st.<span class="built_in">end</span>(); it++) cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="第二種（第一種的簡化）"><a href="#第二種（第一種的簡化）" class="headerlink" title="第二種（第一種的簡化）"></a>第二種（第一種的簡化）</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = st.<span class="built_in">begin</span>(); it != st.<span class="built_in">end</span>(); it++) cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="第三種"><a href="#第三種" class="headerlink" title="第三種"></a>第三種</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;i : st) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="反向迭代"><a href="#反向迭代" class="headerlink" title="反向迭代"></a>反向迭代</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = st.<span class="built_in">rbegin</span>(); it != st.<span class="built_in">rend</span>(); it++) cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="unordered-set-vs-set"><a href="#unordered-set-vs-set" class="headerlink" title="unordered_set vs set"></a>unordered_set vs set</h2><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><table>
<thead>
<tr>
<th align="center"></th>
<th align="center"><code>set</code></th>
<th align="center"><code>unordered_set</code></th>
</tr>
</thead>
<tbody><tr>
<td align="center">Ordering</td>
<td align="center">increasing  order (by default)</td>
<td align="center">no ordering</td>
</tr>
<tr>
<td align="center">Implementation</td>
<td align="center">Self balancing BST</td>
<td align="center">Hash Table</td>
</tr>
<tr>
<td align="center">search time</td>
<td align="center">O(log(n))</td>
<td align="center">O(1) -&gt; Average</br>O(n) -&gt; Worst Case</td>
</tr>
<tr>
<td align="center">Insertion time</td>
<td align="center">log(n) + Rebalance</td>
<td align="center">Same as search</td>
</tr>
<tr>
<td align="center">Deletion time</td>
<td align="center">log(n) + Rebalance</td>
<td align="center">Same as search</td>
</tr>
</tbody></table>
<blockquote>
<p>by <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmcvc2V0LXZzLXVub3JkZXJlZF9zZXQtYy1zdGwv">set vs unordered_set in C++ STL<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<details class="note default"><summary><p>詳細資料</p>
</summary>
<h3 id="Use-set-when"><a href="#Use-set-when" class="headerlink" title="Use set when"></a>Use <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmcvc2V0LWluLWNwcC1zdGwv">set<i class="fa fa-external-link-alt"></i></span> when</h3><ul>
<li>We need ordered data.</li>
<li>We would have to print&#x2F;access the data (in sorted order).</li>
<li>We need predecessor&#x2F;successor of elements.</li>
<li>Since set is ordered, we can use functions like <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmcvYmluYXJ5LXNlYXJjaC1mdW5jdGlvbnMtaW4tYy1zdGwtYmluYXJ5X3NlYXJjaC1sb3dlcl9ib3VuZC1hbmQtdXBwZXJfYm91bmQv">binary_search(), lower_bound() and upper_bound()<i class="fa fa-external-link-alt"></i></span> on set elements. These functions cannot be used on unordered_set().</li>
<li>See <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmcvYWR2YW50YWdlcy1vZi1ic3Qtb3Zlci1oYXNoLXRhYmxlLw==">advantages of BST over Hash Table<i class="fa fa-external-link-alt"></i></span> for more cases.</li>
</ul>
<h3 id="Use-unordered-set-when"><a href="#Use-unordered-set-when" class="headerlink" title="Use unordered_set when"></a>Use <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmcvdW5vcmRlcmRfc2V0LXN0bC11c2VzLw==">unordered_set<i class="fa fa-external-link-alt"></i></span> when</h3><ul>
<li>We need to keep a set of distinct elements and no ordering is required.</li>
<li>We need single element access i.e. no traversal.</li>
</ul>

</details>

<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>有大量且極端的數據時，使用 <code>set</code> 可以有效的增加效率。<br>相反地，如果是小量數據，可以使用 <code>unordered_set</code>。</p>
<h2 id="參考資料-1"><a href="#參考資料-1" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zaGVuZ3l1NzY5Ny5naXRodWIuaW8vc3RkLXNldC8=">C++ std::set 用法與範例<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmcvc2V0LXZzLXVub3JkZXJlZF9zZXQtYy1zdGwv">set vs unordered_set in C++ STL<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jcGx1c3BsdXMuY29tL3JlZmVyZW5jZS9zZXQvc2V0Lw==">set - C++ Reference<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>計算機科學</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>筆記</tag>
        <tag>C++</tag>
        <tag>set</tag>
      </tags>
  </entry>
  <entry>
    <title>【筆記】Vector</title>
    <url>/computer-science/cpp/vector/</url>
    <content><![CDATA[<h1 id="基本介紹"><a href="#基本介紹" class="headerlink" title="基本介紹"></a>基本介紹</h1><p><code>vector</code> 是一個可以改變大小的容器，可以說是升級版的陣列，<code>vector</code> 更能夠高效地對記憶體進行管理及動態增長。</p>
<h1 id="如何宣告"><a href="#如何宣告" class="headerlink" title="如何宣告"></a>如何宣告</h1><p>先引入標頭檔 <code>#include &lt;vector&gt;</code></p>
<h2 id="基礎宣告"><a href="#基礎宣告" class="headerlink" title="基礎宣告"></a>基礎宣告</h2><figure class="highlight cpp"><figcaption><span>基礎宣告範例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>vec</code> 為存取 <code>int</code> 型別的 <code>vector</code>，且裡面沒有元素，所以 <code>size</code> 為 <code>0</code>。</p>
<h2 id="設定初始值"><a href="#設定初始值" class="headerlink" title="設定初始值"></a>設定初始值</h2><p>我們可以使用其內建函式把元素丟進去</p>
<figure class="highlight cpp"><figcaption><span>設定初始值範例</span></figcaption><table><tr><td class="code"><pre><span class="line">vecotr&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">1</span>);  <span class="comment">// vec = &#123;1&#125;;</span></span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">3</span>);  <span class="comment">// vec = &#123;1, 3&#125;;</span></span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">5</span>);  <span class="comment">// vec = &#123;1, 3, 5&#125;;</span></span><br></pre></td></tr></table></figure>

<p>也可以直接寫成一行</p>
<figure class="highlight cpp"><figcaption><span>設定初始值範例</span></figcaption><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight cpp"><figcaption><span>設定初始值範例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;)</span></span>;</span><br></pre></td></tr></table></figure>

<p>若想要複製一份相同的 <code>vector</code>，可以這樣做</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vec_1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">vecotr&lt;<span class="type">int</span>&gt; vec_2 = vec_1;</span><br><span class="line"><span class="comment">// 當然這句也可以寫成</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec_2</span><span class="params">(vec_1)</span></span>;</span><br></pre></td></tr></table></figure>

<p>也可以複製一份陣列</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> data[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(data, data+<span class="number">3</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<p>還可以複製其中一段就好</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vec_1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec_2</span><span class="params">(vec_1.begin() + <span class="number">2</span>, vec_1.end() - <span class="number">1</span>)</span></span>;  <span class="comment">// vec_2 = &#123;5, 7&#125;;</span></span><br></pre></td></tr></table></figure>

<p>陣列也可以複製其中一段</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> data[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(data+<span class="number">2</span>, data+<span class="number">4</span>)</span></span>; <span class="comment">// vec = &#123;5, 7&#125;;</span></span><br></pre></td></tr></table></figure>

<h1 id="基礎使用"><a href="#基礎使用" class="headerlink" title="基礎使用"></a>基礎使用</h1><p>下方為 <code>vector</code> 可用的函式，有誤還請多指教</p>
<table>
<thead>
<tr>
<th>vector 函式</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>begin()</code>, <code>end()</code>, <code>cbegin()</code>, <code>cend()</code></td>
<td>提供正向跌代器</td>
</tr>
<tr>
<td><code>rbegin()</code>, <code>rend()</code>, <code>crbegin()</code>, <code>crend()</code></td>
<td>提供反向跌代器</td>
</tr>
<tr>
<td><code>size()</code></td>
<td>返回 <code>vector</code> 大小</td>
</tr>
<tr>
<td><code>max_size()</code></td>
<td>返回 <code>vector</code> 最大大小（因為 <code>vector</code> 的大小是隨者元素的多寡而增加，所以數字極大）</td>
</tr>
<tr>
<td><code>resize()</code></td>
<td>配置 <code>vector</code> 大小，且補滿 <code>0</code></td>
</tr>
<tr>
<td><code>capacity()</code></td>
<td>返回目前 <code>vector</code> 配置大小</td>
</tr>
<tr>
<td><code>empty()</code></td>
<td>判斷 <code>vector</code> 是否為空</td>
</tr>
<tr>
<td><code>reserve()</code></td>
<td>配置 <code>vector</code> 大小</td>
</tr>
<tr>
<td><code>shrink_to_fit()</code></td>
<td>釋放 <code>vector</code> 未使用的空間</td>
</tr>
<tr>
<td><code>at()</code>, <code>operator[]</code></td>
<td>取得元素</td>
</tr>
<tr>
<td><code>front()</code></td>
<td>返回第一個元素</td>
</tr>
<tr>
<td><code>back()</code></td>
<td>返回最後一個元素</td>
</tr>
<tr>
<td><code>data()</code></td>
<td>返回元素的指標</td>
</tr>
<tr>
<td><code>assign()</code></td>
<td>配置 <code>(0~n)</code> 的數值</td>
</tr>
<tr>
<td><code>push_back()</code></td>
<td>先複製一份要 <code>push_back</code> 的元素，再貼在 <code>vector</code> 後面</td>
</tr>
<tr>
<td><code>pop_back()</code></td>
<td>刪除最後一個元素</td>
</tr>
<tr>
<td><code>insert()</code></td>
<td>插入元素</td>
</tr>
<tr>
<td><code>erase()</code></td>
<td>刪除一個或一段元素</td>
</tr>
<tr>
<td><code>clear()</code></td>
<td>清空 <code>vector</code> 內的元素</td>
</tr>
<tr>
<td><code>swap()</code></td>
<td>交換兩個 <code>vector</code> 元素</td>
</tr>
</tbody></table>
<p><span class="exturl" data-url="aHR0cHM6Ly9jcGx1c3BsdXMuY29tL3JlZmVyZW5jZS92ZWN0b3IvdmVjdG9yLw==">查看更多可參考 cplusplus 官網<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="基礎操作"><a href="#基礎操作" class="headerlink" title="基礎操作"></a>基礎操作</h1><h2 id="正向遍歷"><a href="#正向遍歷" class="headerlink" title="正向遍歷"></a>正向遍歷</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>&#125;)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = vec.<span class="built_in">begin</span>(); it &lt; vec.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反向遍歷"><a href="#反向遍歷" class="headerlink" title="反向遍歷"></a>反向遍歷</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>&#125;)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = vec.<span class="built_in">rbegin</span>(); it &lt; vec.<span class="built_in">rend</span>(); it++) &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="size-與-max-size-差異"><a href="#size-與-max-size-差異" class="headerlink" title="size() 與 max_size() 差異"></a>size() 與 max_size() 差異</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>&#125;)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;max_size: &quot;</span> &lt;&lt; vec.<span class="built_in">max_size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">輸出：</span><br><span class="line"><span class="symbol">size:</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">max_size:</span> <span class="number">4611686018427387903</span></span><br></pre></td></tr></table></figure>

<h2 id="size-與-capacity-差異"><a href="#size-與-capacity-差異" class="headerlink" title="size() 與 capacity() 差異"></a>size() 與 capacity() 差異</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(&#123;<span class="number">1</span>&#125;)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">輸出：</span></span><br><span class="line"><span class="attribute">vec size</span><span class="punctuation">:</span> <span class="string">1</span></span><br><span class="line"><span class="attribute">vec capacity</span><span class="punctuation">:</span> <span class="string">1</span></span><br><span class="line"><span class="attribute">vec size</span><span class="punctuation">:</span> <span class="string">2</span></span><br><span class="line"><span class="attribute">vec capacity</span><span class="punctuation">:</span> <span class="string">2</span></span><br><span class="line"><span class="attribute">vec size</span><span class="punctuation">:</span> <span class="string">3</span></span><br><span class="line"><span class="attribute">vec capacity</span><span class="punctuation">:</span> <span class="string">4</span></span><br><span class="line"><span class="attribute">vec size</span><span class="punctuation">:</span> <span class="string">4</span></span><br><span class="line"><span class="attribute">vec capacity</span><span class="punctuation">:</span> <span class="string">4</span></span><br><span class="line"><span class="attribute">vec size</span><span class="punctuation">:</span> <span class="string">5</span></span><br><span class="line"><span class="attribute">vec capacity</span><span class="punctuation">:</span> <span class="string">8</span></span><br><span class="line"><span class="attribute">vec size</span><span class="punctuation">:</span> <span class="string">6</span></span><br><span class="line"><span class="attribute">vec capacity</span><span class="punctuation">:</span> <span class="string">8</span></span><br><span class="line"><span class="attribute">vec size</span><span class="punctuation">:</span> <span class="string">7</span></span><br><span class="line"><span class="attribute">vec capacity</span><span class="punctuation">:</span> <span class="string">8</span></span><br></pre></td></tr></table></figure>

<p>可以發現，使用 <code>size()</code> 時，元素個數及為 <code>size</code>，而使用 <code>capacity()</code> 時，回傳目前 <code>vector</code> 預先給予的空間大小，且如果超過預先給予的空間大小，空間會再給予 &#x3D;&#x3D;兩倍&#x3D;&#x3D; 的空間。</p>
<h2 id="reserve-預先配置-vector-如器大小"><a href="#reserve-預先配置-vector-如器大小" class="headerlink" title="reserve() 預先配置 vector 如器大小"></a>reserve() 預先配置 vector 如器大小</h2><p>若想要預先給予固定的空間大小，可以使用 <code>reserve()</code>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(&#123;<span class="number">1</span>&#125;)</span></span>;</span><br><span class="line">vec.<span class="built_in">reserve</span>(<span class="number">3</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vec capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">輸出：</span></span><br><span class="line"><span class="attribute">vec size</span><span class="punctuation">:</span> <span class="string">1</span></span><br><span class="line"><span class="attribute">vec capacity</span><span class="punctuation">:</span> <span class="string">3</span></span><br><span class="line"><span class="attribute">vec size</span><span class="punctuation">:</span> <span class="string">2</span></span><br><span class="line"><span class="attribute">vec capacity</span><span class="punctuation">:</span> <span class="string">3</span></span><br><span class="line"><span class="attribute">vec size</span><span class="punctuation">:</span> <span class="string">3</span></span><br><span class="line"><span class="attribute">vec capacity</span><span class="punctuation">:</span> <span class="string">3</span></span><br><span class="line"><span class="attribute">vec size</span><span class="punctuation">:</span> <span class="string">4</span></span><br><span class="line"><span class="attribute">vec capacity</span><span class="punctuation">:</span> <span class="string">6</span></span><br></pre></td></tr></table></figure>

<p>可以再次發現，若元素長度大於預先設置的空間大小，<code>capacity()</code> 依舊以 &#x3D;&#x3D;兩倍的方式增大&#x3D;&#x3D; 。</p>
<h2 id="使用-shrink-to-fit-將未使用的空間釋放"><a href="#使用-shrink-to-fit-將未使用的空間釋放" class="headerlink" title="使用 shrink_to_fit() 將未使用的空間釋放"></a>使用 shrink_to_fit() 將未使用的空間釋放</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"><span class="comment">// 使用 shrink 前</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---使用 shrink 前---\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">reserve</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">// 使用 shrink 後</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---使用 shrink 後---\n&quot;</span>;</span><br><span class="line">vec.<span class="built_in">shrink_to_fit</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;size: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;capacity: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight ldif"><table><tr><td class="code"><pre><span class="line">輸出：</span><br><span class="line"><span class="literal">-</span>--使用 shrink 前---</span><br><span class="line"><span class="attribute">size</span>: 0</span><br><span class="line"><span class="attribute">capacity</span>: 10</span><br><span class="line"><span class="attribute">size</span>: 2</span><br><span class="line"><span class="attribute">capacity</span>: 10</span><br><span class="line"><span class="literal">-</span>--使用 shrink 後---</span><br><span class="line"><span class="attribute">size</span>: 2</span><br><span class="line"><span class="attribute">capacity</span>: 2</span><br></pre></td></tr></table></figure>

<h2 id="resize-配置大小，並將新的空間設為-0"><a href="#resize-配置大小，並將新的空間設為-0" class="headerlink" title="resize() 配置大小，並將新的空間設為 0"></a>resize() 配置大小，並將新的空間設為 0</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">vec.<span class="built_in">resize</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : vec) &#123;</span><br><span class="line">    cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">輸出：</span><br><span class="line">0<span class="number"> 0 </span>0<span class="number"> 0 </span>0<span class="number"> 0 </span>0<span class="number"> 0 </span>0<span class="number"> 0 </span></span><br></pre></td></tr></table></figure>

<p>可以發現原本空的 <code>vector</code> 使用 <code>size()</code> 後，預設為 <code>0</code>，但如果不想預設為 <code>0</code>，可以這樣做。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">vec.<span class="built_in">resize</span>(<span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : vec) &#123;</span><br><span class="line">    cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">輸出：</span><br><span class="line">5<span class="number"> 5 </span>5<span class="number"> 5 </span>5<span class="number"> 5 </span>5<span class="number"> 5 </span>5 5</span><br></pre></td></tr></table></figure>

<h1 id="課堂小考"><a href="#課堂小考" class="headerlink" title="課堂小考"></a>課堂小考</h1><p>對空的整數型態 <code>vector</code> 使用 <code>resize(10.5, 3.3)</code> 後，<code>capacity()</code> 變為多少，且元素設定為多少。<br>    A. capacity: 11，且元素皆為 4<br>    B. capacity: 11，且元素皆為 3<br>    C. capacity: 10，且元素皆為 3<br>    D. capacity: 10，且元素皆為 4<br>    E. Run Time Error</p>
<details class="note default"><summary><p>解答</p>
</summary>
<p>選項 C</p>

</details>]]></content>
      <categories>
        <category>計算機科學</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>筆記</tag>
        <tag>C++</tag>
        <tag>vector</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】d001: 例題 P-1-1. 合成函數(1)</title>
    <url>/solved/TCFSH_CIRC_Judge/d001/</url>
    <content><![CDATA[<h1 id="題目連結"><a href="#題目連結" class="headerlink" title="題目連結"></a>題目連結</h1><p><span class="exturl" data-url="aHR0cHM6Ly9qdWRnZS50Y2lyYy50dy9TaG93UHJvYmxlbT9wcm9ibGVtaWQ9ZDAwMQ==">d001: 例題 P-1-1. 合成函數(1)<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a href="#我的想法" class="headerlink" title="我的想法"></a>我的想法</h1><p>利用遞迴做函數的輸入及計算</p>
<h1 id="參考解答"><a href="#參考解答" class="headerlink" title="參考解答"></a>參考解答</h1><figure class="highlight cpp"><figcaption><span>d001</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">eval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> val, x, y;</span><br><span class="line">    <span class="type">char</span> token[<span class="number">5</span>];</span><br><span class="line">    cin &gt;&gt; token;</span><br><span class="line">    <span class="keyword">if</span> (token[<span class="number">0</span>] == <span class="string">&#x27;f&#x27;</span>) &#123;</span><br><span class="line">        x = <span class="built_in">eval</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * x - <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (token[<span class="number">0</span>] == <span class="string">&#x27;g&#x27;</span>) &#123;</span><br><span class="line">        x = <span class="built_in">eval</span>();</span><br><span class="line">        y = <span class="built_in">eval</span>();</span><br><span class="line">        <span class="keyword">return</span> x + <span class="number">2</span> * y - <span class="number">3</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">atoi</span>(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="built_in">eval</span>();</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>解題</category>
        <category>CIRC_Judge</category>
      </categories>
  </entry>
  <entry>
    <title>【解題】d075: Q-6-10. 置物櫃出租</title>
    <url>/solved/TCFSH_CIRC_Judge/d075/</url>
    <content><![CDATA[<h1 id="題目連結"><a href="#題目連結" class="headerlink" title="題目連結"></a>題目連結</h1><p><span class="exturl" data-url="aHR0cHM6Ly9qdWRnZS50Y2lyYy50dy9TaG93UHJvYmxlbT9wcm9ibGVtaWQ9ZDA3NQ==">d075: Q-6-10. 置物櫃出租<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a href="#我的想法" class="headerlink" title="我的想法"></a>我的想法</h1><p>我用子集合的方式，如：ZeroJudge <span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWE1MjI=">a522<i class="fa fa-external-link-alt"></i></span>，求出可退房間的數量，最後從 S 開始往上找是否有可退房數量的房間數。</p>
<h1 id="參考解答"><a href="#參考解答" class="headerlink" title="參考解答"></a>參考解答</h1><figure class="highlight cpp"><figcaption><span>d075</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, M, S;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; M &gt;&gt; S;</span><br><span class="line">    <span class="type">int</span> c[n], sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; c[i];</span><br><span class="line">        sum += c[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> h[M + <span class="number">1</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line">    h[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">bool</span> check[M + <span class="number">1</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= M; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (h[j] &amp;&amp; !check[j]) &#123;</span><br><span class="line">                <span class="comment">// 這裡是預防連續兩位客人占用的房間一樣</span></span><br><span class="line">                <span class="comment">// 所以會扣 6% 的隱藏測資</span></span><br><span class="line">                <span class="keyword">if</span> (h[j + c[i]] == <span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                h[j + c[i]] = <span class="literal">true</span>;</span><br><span class="line">                check[j + c[i]] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// S - (M - sum) 有可能為負數</span></span><br><span class="line">    <span class="comment">// 所以會扣 7% 的隱藏測資</span></span><br><span class="line">    <span class="type">int</span> x = S - (M - sum);</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt;= M; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (h[i]) &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>解題</category>
        <category>CIRC_Judge</category>
      </categories>
      <tags>
        <tag>APCS</tag>
        <tag>DP</tag>
        <tag>01背包</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】d002: 習題 Q-1-2. 合成函數(2) (APCS201902)</title>
    <url>/solved/TCFSH_CIRC_Judge/d002/</url>
    <content><![CDATA[<h1 id="題目連結"><a href="#題目連結" class="headerlink" title="題目連結"></a>題目連結</h1><p><span class="exturl" data-url="aHR0cHM6Ly9qdWRnZS50Y2lyYy50dy9TaG93UHJvYmxlbT9wcm9ibGVtaWQ9ZDAwMg==">d002: 習題 Q-1-2. 合成函數(2) (APCS201902)<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a href="#我的想法" class="headerlink" title="我的想法"></a>我的想法</h1><p>利用遞迴做函數的輸入及計算，同 <span class="exturl" data-url="aHR0cHM6Ly9qdWRnZS50Y2lyYy50dy9TaG93UHJvYmxlbT9wcm9ibGVtaWQ9ZDAwMQ==">d001: 例題 P-1-1. 合成函數(1)<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="參考解答"><a href="#參考解答" class="headerlink" title="參考解答"></a>參考解答</h1><figure class="highlight cpp"><figcaption><span>d002</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">eval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x, y, z;</span><br><span class="line">    <span class="type">char</span> token[<span class="number">5</span>];</span><br><span class="line">    cin &gt;&gt; token;</span><br><span class="line">    <span class="keyword">if</span> (token[<span class="number">0</span>] == <span class="string">&#x27;f&#x27;</span>) &#123;</span><br><span class="line">        x = <span class="built_in">eval</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * x - <span class="number">3</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (token[<span class="number">0</span>] == <span class="string">&#x27;g&#x27;</span>) &#123;</span><br><span class="line">        x = <span class="built_in">eval</span>();</span><br><span class="line">        y = <span class="built_in">eval</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * x + y - <span class="number">7</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (token[<span class="number">0</span>] == <span class="string">&#x27;h&#x27;</span>) &#123;</span><br><span class="line">        x = <span class="built_in">eval</span>();</span><br><span class="line">        y = <span class="built_in">eval</span>();</span><br><span class="line">        z = <span class="built_in">eval</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span> * x - <span class="number">2</span> * y + z;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">atoi</span>(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">eval</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>解題</category>
        <category>CIRC_Judge</category>
      </categories>
      <tags>
        <tag>APCS</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】a013. 羅馬數字</title>
    <url>/solved/ZeroJudge/a013/</url>
    <content><![CDATA[<h1 id="題目連結"><a href="#題目連結" class="headerlink" title="題目連結"></a>題目連結</h1><p><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWEwMTM=">a013. 羅馬數字<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a href="#我的想法" class="headerlink" title="我的想法"></a>我的想法</h1><p>要注意的地方就是 4、9、40、90、400、900，這幾個數字都要用減法規則讀入或輸出</p>
<h1 id="參考解答"><a href="#參考解答" class="headerlink" title="參考解答"></a>參考解答</h1><figure class="highlight cpp"><figcaption><span>a290</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; mp = &#123;</span><br><span class="line">    &#123;<span class="string">&#x27;I&#x27;</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;V&#x27;</span>, <span class="number">5</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;X&#x27;</span>, <span class="number">10</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;L&#x27;</span>, <span class="number">50</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;C&#x27;</span>, <span class="number">100</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;D&#x27;</span>, <span class="number">500</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;M&#x27;</span>, <span class="number">1000</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">char</span>&gt; re_mp = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="string">&#x27;I&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">5</span>, <span class="string">&#x27;V&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">10</span>, <span class="string">&#x27;X&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">50</span>, <span class="string">&#x27;L&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">100</span>, <span class="string">&#x27;C&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">500</span>, <span class="string">&#x27;D&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1000</span>, <span class="string">&#x27;M&#x27;</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> int_mp[<span class="number">7</span>] = &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">500</span>, <span class="number">1000</span>&#125;;</span><br><span class="line"></span><br><span class="line">string s1, s2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = mp[s[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">        n += mp[s[i]];</span><br><span class="line">        <span class="keyword">if</span> (mp[s[i]] &gt; mp[s[i - <span class="number">1</span>]]) &#123;</span><br><span class="line">            n -= mp[s[i - <span class="number">1</span>]] * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ouo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; s1) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1 == <span class="string">&quot;#&quot;</span>) <span class="keyword">break</span>;</span><br><span class="line">        cin &gt;&gt; s2;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> n1 = <span class="built_in">solve</span>(s1);</span><br><span class="line">        <span class="type">int</span> n2 = <span class="built_in">solve</span>(s2);</span><br><span class="line">        <span class="type">int</span> n3 = <span class="built_in">abs</span>(n1 - n2);</span><br><span class="line">        <span class="keyword">if</span> (n3 == <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;ZERO\n&quot;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        deque&lt;<span class="type">char</span>&gt; ans;</span><br><span class="line">        <span class="type">int</span> power = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n3 != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> tmp = (n3 % <span class="number">10</span>) * <span class="built_in">pow</span>(<span class="number">10</span>, power);</span><br><span class="line">            <span class="keyword">switch</span> (tmp) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    ans.<span class="built_in">push_front</span>(re_mp[tmp + <span class="number">1</span>]);</span><br><span class="line">                    ans.<span class="built_in">push_front</span>(re_mp[<span class="number">1</span>]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                    ans.<span class="built_in">push_front</span>(re_mp[tmp + <span class="number">1</span>]);</span><br><span class="line">                    ans.<span class="built_in">push_front</span>(re_mp[<span class="number">1</span>]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">                    ans.<span class="built_in">push_front</span>(re_mp[tmp + <span class="number">10</span>]);</span><br><span class="line">                    ans.<span class="built_in">push_front</span>(re_mp[<span class="number">10</span>]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">90</span>:</span><br><span class="line">                    ans.<span class="built_in">push_front</span>(re_mp[tmp + <span class="number">10</span>]);</span><br><span class="line">                    ans.<span class="built_in">push_front</span>(re_mp[<span class="number">10</span>]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">                    ans.<span class="built_in">push_front</span>(re_mp[tmp + <span class="number">100</span>]);</span><br><span class="line">                    ans.<span class="built_in">push_front</span>(re_mp[<span class="number">100</span>]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">900</span>:</span><br><span class="line">                    ans.<span class="built_in">push_front</span>(re_mp[tmp + <span class="number">100</span>]);</span><br><span class="line">                    ans.<span class="built_in">push_front</span>(re_mp[<span class="number">100</span>]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    deque&lt;<span class="type">char</span>&gt; str_tmp;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">6</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                        <span class="keyword">while</span> (tmp / int_mp[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            str_tmp.<span class="built_in">push_back</span>(re_mp[int_mp[i]]);</span><br><span class="line">                            tmp -= int_mp[i];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i = str_tmp.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                        ans.<span class="built_in">push_front</span>(str_tmp[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            power++;</span><br><span class="line">            n3 /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : ans) &#123;</span><br><span class="line">            cout &lt;&lt; i;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>解題</category>
        <category>ZeroJudge</category>
      </categories>
      <tags>
        <tag>解題</tag>
        <tag>Zerojudge</tag>
        <tag>進位制</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】a290: 新手訓練系列 ~ 圖論</title>
    <url>/solved/ZeroJudge/a290/</url>
    <content><![CDATA[<h1 id="題目連結"><a href="#題目連結" class="headerlink" title="題目連結"></a>題目連結</h1><p><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWEyOTA=">a290: 新手訓練系列 ~ 圖論<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a href="#我的想法" class="headerlink" title="我的想法"></a>我的想法</h1><p>先將圖建好，再用 BFS 慢慢走訪，從訪問的起點開始，走過的地方都標記為 true ，若最後終點是 true，輸出 Yes!!!，否則 No!!!</p>
<h1 id="參考解答"><a href="#參考解答" class="headerlink" title="參考解答"></a>參考解答</h1><figure class="highlight cpp"><figcaption><span>a290</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> N, M;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; N &gt;&gt; M) &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; d[N];</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="type">bool</span> check[<span class="number">800</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">            <span class="type">int</span> a, b;</span><br><span class="line">            cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            a--;</span><br><span class="line">            b--;</span><br><span class="line">            d[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 將能走的路徑都設為 true</span></span><br><span class="line">        <span class="type">int</span> A, B;</span><br><span class="line">        cin &gt;&gt; A &gt;&gt; B;</span><br><span class="line">        A--;</span><br><span class="line">        B--;</span><br><span class="line">        q.<span class="built_in">push</span>(A);</span><br><span class="line">        check[A] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> temp = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : d[temp]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!check[i]) &#123;</span><br><span class="line">                    check[i] = <span class="literal">true</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 訪問 B 點是否能走到</span></span><br><span class="line">        <span class="keyword">if</span> (check[B]) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Yes!!!\n&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;No!!!\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>解題</category>
        <category>ZeroJudge</category>
      </categories>
      <tags>
        <tag>解題</tag>
        <tag>Zerojudge</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】d732: 二分搜尋法</title>
    <url>/solved/ZeroJudge/d732/</url>
    <content><![CDATA[<h1 id="題目連結"><a href="#題目連結" class="headerlink" title="題目連結"></a>題目連結</h1><p><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWQ3MzI=">d732: 二分搜尋法<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a href="#我的想法" class="headerlink" title="我的想法"></a>我的想法</h1><p>純純的二分搜尋</p>
<p>範例：找 <code>8</code></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">1<span class="number"> 2 </span>3<span class="number"> 4 </span>5<span class="number"> 6 </span>7<span class="number"> 8 </span>9</span><br><span class="line">↑       ↑       ↑</span><br><span class="line">l       m       r</span><br></pre></td></tr></table></figure>

<p><code>5 &lt; 8</code> 所以左邊往中點 +1 移動</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">1<span class="number"> 2 </span>3<span class="number"> 4 </span>5<span class="number"> 6 </span>7<span class="number"> 8 </span>9</span><br><span class="line">          ↑ ↑   ↑</span><br><span class="line">          l m   r</span><br></pre></td></tr></table></figure>

<p><code>7 &lt; 8</code> 所以左邊往中點 +1 移動</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">1<span class="number"> 2 </span>3<span class="number"> 4 </span>5<span class="number"> 6 </span>7<span class="number"> 8 </span>9</span><br><span class="line">              ↑ ↑</span><br><span class="line">              l r</span><br><span class="line">             (m)</span><br></pre></td></tr></table></figure>

<p><code>8 = 8</code> 所以結束二分搜</p>
<h1 id="參考解答"><a href="#參考解答" class="headerlink" title="參考解答"></a>參考解答</h1><figure class="highlight cpp"><figcaption><span>d732</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> *data, <span class="type">int</span> n, <span class="type">int</span> qq)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = n;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (data[mid] &lt; qq) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data[mid] &gt; qq) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; mid + <span class="number">1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="type">int</span> data[n], q[k];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        cin &gt;&gt; q[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="built_in">solve</span>(data, n, q[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>解題</category>
        <category>ZeroJudge</category>
      </categories>
      <tags>
        <tag>解題</tag>
        <tag>Zerojudge</tag>
        <tag>二分搜</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】d784. 一、連續元素的和</title>
    <url>/solved/ZeroJudge/d784/</url>
    <content><![CDATA[<h1 id="題目連結"><a href="#題目連結" class="headerlink" title="題目連結"></a>題目連結</h1><p><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWQ3ODQ=">d784. 一、連續元素的和<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="參考解法"><a href="#參考解法" class="headerlink" title="參考解法"></a>參考解法</h1><h2 id="第二次解-2023-05-27"><a href="#第二次解-2023-05-27" class="headerlink" title="第二次解 2023&#x2F;05&#x2F;27"></a>第二次解 2023&#x2F;05&#x2F;27</h2><figure class="highlight cpp"><figcaption><span>d784</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="type">int</span> data[n];</span><br><span class="line">        <span class="type">int</span> mx = -INT_MAX;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            cin &gt;&gt; data[i];</span><br><span class="line">            sum += data[i];</span><br><span class="line">            mx = <span class="built_in">max</span>(mx, sum);</span><br><span class="line">            <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) sum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; mx &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第一次解"><a href="#第一次解" class="headerlink" title="第一次解"></a>第一次解</h2><figure class="highlight cpp"><figcaption><span>d784</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n1;</span><br><span class="line">    cin &gt;&gt; n1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n1--) &#123;</span><br><span class="line">        <span class="type">int</span> n2;</span><br><span class="line">        cin &gt;&gt; n2;</span><br><span class="line">        <span class="type">int</span> data[n2];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n2; i++) &#123;</span><br><span class="line">            cin &gt;&gt; data[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> sum = data[<span class="number">0</span>], max_sum = data[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n2; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) sum = <span class="number">0</span>;</span><br><span class="line">            sum += data[i];</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; max_sum) max_sum = sum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; max_sum &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>解題</category>
        <category>ZeroJudge</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>解題</tag>
        <tag>Zerojudge</tag>
        <tag>區間</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】e287. 機器人的路徑</title>
    <url>/solved/ZeroJudge/e287/</url>
    <content><![CDATA[<h1 id="題目連結"><a href="#題目連結" class="headerlink" title="題目連結"></a>題目連結</h1><p><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWUyODc=">e287. 機器人的路徑<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a href="#我的想法" class="headerlink" title="我的想法"></a>我的想法</h1><p>純屬 BFS</p>
<h1 id="參考解答"><a href="#參考解答" class="headerlink" title="參考解答"></a>參考解答</h1><figure class="highlight cpp"><figcaption><span>e287</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MN_const 1000001</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> G[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="type">bool</span> visit[<span class="number">105</span>][<span class="number">105</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="type">int</span> mn = MN_const;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            cin &gt;&gt; G[i][j];</span><br><span class="line">            <span class="keyword">if</span> (G[i][j] &lt; mn) &#123;</span><br><span class="line">                x = i;</span><br><span class="line">                y = j;</span><br><span class="line">                mn = G[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set boundary</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) visit[i][<span class="number">0</span>] = visit[i][m + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; i++) visit[<span class="number">0</span>][i] = visit[n + <span class="number">1</span>][i] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">int</span> nx, ny;</span><br><span class="line">        <span class="type">int</span> d_mn = MN_const;</span><br><span class="line">        ans += G[x][y];</span><br><span class="line">        visit[x][y] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> ix = x + dx[i], iy = y + dy[i];</span><br><span class="line">            <span class="keyword">if</span> (G[ix][iy] &lt; d_mn &amp;&amp; visit[ix][iy] == <span class="literal">false</span>) &#123;</span><br><span class="line">                nx = ix;</span><br><span class="line">                ny = iy;</span><br><span class="line">                d_mn = G[ix][iy];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (d_mn == MN_const) <span class="keyword">break</span>;</span><br><span class="line">        x = nx;</span><br><span class="line">        y = ny;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>解題</category>
        <category>ZeroJudge</category>
      </categories>
      <tags>
        <tag>APCS</tag>
        <tag>Zerojudge</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】f377. 運算式轉換</title>
    <url>/solved/ZeroJudge/f377/</url>
    <content><![CDATA[<h1 id="題目連結"><a href="#題目連結" class="headerlink" title="題目連結"></a>題目連結</h1><p><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWYzNzc=">f377. 運算式轉換<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a href="#我的想法" class="headerlink" title="我的想法"></a>我的想法</h1><p>中序式轉後序式的基本題目，概念詳見：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nZ2Vya3VvLmdhLzAxMi1pbmZpeC1wb3N0Zml4Lw==">【筆記】前序式、中序式與後序式<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="參考解答"><a href="#參考解答" class="headerlink" title="參考解答"></a>參考解答</h1><figure class="highlight cpp"><figcaption><span>f377</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">order</span><span class="params">(<span class="type">char</span> cr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cr == <span class="string">&#x27;+&#x27;</span> || cr == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cr == <span class="string">&#x27;*&#x27;</span> || cr == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ouo;</span><br><span class="line">    string str;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">getline</span>(cin, str)) &#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; symbol;</span><br><span class="line">        string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                symbol.<span class="built_in">push</span>(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">&#x27;+&#x27;</span> || str[i] == <span class="string">&#x27;-&#x27;</span> || str[i] == <span class="string">&#x27;*&#x27;</span> || str[i] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (symbol.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    symbol.<span class="built_in">push</span>(str[i]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="built_in">order</span>(str[i]) &lt;= <span class="built_in">order</span>(symbol.<span class="built_in">top</span>())) &#123;</span><br><span class="line">                        ans += symbol.<span class="built_in">top</span>();</span><br><span class="line">                        symbol.<span class="built_in">pop</span>();</span><br><span class="line">                        <span class="keyword">if</span> (symbol.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    symbol.<span class="built_in">push</span>(str[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (symbol.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                    ans.<span class="built_in">push_back</span>(symbol.<span class="built_in">top</span>());</span><br><span class="line">                    symbol.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                symbol.<span class="built_in">pop</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isalpha</span>(str[i])) &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(str[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!symbol.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(symbol.<span class="built_in">top</span>());</span><br><span class="line">            symbol.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">            cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>解題</category>
        <category>ZeroJudge</category>
      </categories>
      <tags>
        <tag>解題</tag>
        <tag>Zerojudge</tag>
        <tag>後序式</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】j125. 4. 蓋步道</title>
    <url>/solved/ZeroJudge/j125/</url>
    <content><![CDATA[<h1 id="題目連結"><a href="#題目連結" class="headerlink" title="題目連結"></a>題目連結</h1><p><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWoxMjU=">j125. 4. 蓋步道<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a href="#我的想法" class="headerlink" title="我的想法"></a>我的想法</h1><p>尋找高度差的最小值，但線性搜尋會爆，所以用二分搜，找到此最大高度的最小值後再跑一次 BFS 算路徑長度。</p>
<h1 id="參考解答"><a href="#參考解答" class="headerlink" title="參考解答"></a>參考解答</h1><figure class="highlight cpp"><figcaption><span>j125</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ouo ios_base::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> high = <span class="number">-1</span>, low = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> g[<span class="number">305</span>][<span class="number">305</span>];</span><br><span class="line"><span class="type">int</span> viewed[<span class="number">305</span>][<span class="number">305</span>];</span><br><span class="line">queue&lt;pair&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, <span class="type">int</span>&gt;&gt; todo;</span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bin_s</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">    todo.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, <span class="number">0</span>), <span class="number">0</span>));</span><br><span class="line">    viewed[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!todo.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> x = todo.<span class="built_in">front</span>().first.first;</span><br><span class="line">        <span class="type">int</span> y = todo.<span class="built_in">front</span>().first.second;</span><br><span class="line">        <span class="type">int</span> cnt = todo.<span class="built_in">front</span>().second;</span><br><span class="line">        viewed[x][y] = <span class="number">1</span>;</span><br><span class="line">        todo.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (x == n - <span class="number">1</span> &amp;&amp; y == n - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> nx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> ny = y + dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt;= n - <span class="number">1</span> &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt;= n - <span class="number">1</span> &amp;&amp; viewed[nx][ny] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span> h = <span class="built_in">abs</span>(g[x][y] - g[nx][ny]);</span><br><span class="line">                <span class="keyword">if</span> (h &lt;= m) &#123;</span><br><span class="line">                    viewed[nx][ny] = <span class="number">1</span>;</span><br><span class="line">                    todo.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(nx, ny), cnt + <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            cin &gt;&gt; g[i][j];</span><br><span class="line">            high = <span class="built_in">max</span>(g[i][j], high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find h</span></span><br><span class="line">    <span class="keyword">while</span> (high - low &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// queue.clear()</span></span><br><span class="line">        <span class="keyword">while</span> (!todo.<span class="built_in">empty</span>()) todo.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">// viewed init</span></span><br><span class="line">        <span class="built_in">memset</span>(viewed, <span class="number">0</span>, <span class="built_in">sizeof</span>(viewed));</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> m = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> check = <span class="built_in">bin_s</span>(m);</span><br><span class="line">        <span class="keyword">if</span> (check == <span class="number">-1</span>) &#123;</span><br><span class="line">            low = m;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            high = m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; high &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// print step</span></span><br><span class="line">    <span class="comment">// queue.clear()</span></span><br><span class="line">    <span class="keyword">while</span> (!todo.<span class="built_in">empty</span>()) todo.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="comment">// viewed init</span></span><br><span class="line">    <span class="built_in">memset</span>(viewed, <span class="number">0</span>, <span class="built_in">sizeof</span>(viewed));</span><br><span class="line">    cout &lt;&lt; <span class="built_in">bin_s</span>(high);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>解題</category>
        <category>ZeroJudge</category>
      </categories>
      <tags>
        <tag>APCS</tag>
        <tag>解題</tag>
        <tag>Zerojudge</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】f832: 隕石 (Meteorite)</title>
    <url>/solved/ZeroJudge/f832/</url>
    <content><![CDATA[<h1 id="題目連結"><a href="#題目連結" class="headerlink" title="題目連結"></a>題目連結</h1><p><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWY4MzI=">f832: 隕石 (Meteorite)<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a href="#我的想法" class="headerlink" title="我的想法"></a>我的想法</h1><p>貪婪演算法（Greedy），每一步都使用最佳的解，從而導致希望結果也是最佳的解。</p>
<p>就範例二而言</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">8</span> <span class="number">5</span> <span class="number">7</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">9</span> <span class="number">6</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>

<p>機器之間或隕石之間，又或者是機器與隕石間無任關聯，我們將他們排序</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">5</span> <span class="number">7</span> <span class="number">8</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">6</span> <span class="number">6</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>

<p>當機器可抓取的最大能力是 9，先找到能符合小於 9 的對大數字是 8（此時就是這一步的最佳解），<code>sum += 8</code>，並且換另一台機器。<br>當機器可抓取的最大能力是 6，先找到能符合小於 6 的對大數字是 5（此時就是這一步的最佳解），<code>sum += 5</code>，並且換另一台機器。<br>當機器可抓取的最大能力是 6，先找到能符合小於 6 的對大數字是 1（此時就是這一步的最佳解），<code>sum += 1</code>，並且換另一台機器。<br>沒石頭可以抓，輸出 <code>sum</code>，結束程式。</p>
<p>:::warning<br>總和會大於 <code>2^32</code>，故 <code>sum</code> 要使用 <code>long long</code><br>:::</p>
<h1 id="參考解答"><a href="#參考解答" class="headerlink" title="參考解答"></a>參考解答</h1><figure class="highlight cpp"><figcaption><span>f832</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> rock[n], robot[m];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; rock[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) cin &gt;&gt; robot[i];</span><br><span class="line">    <span class="built_in">sort</span>(rock, rock + n);</span><br><span class="line">    <span class="built_in">sort</span>(robot, robot + m);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> index_bot = m - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; index_bot &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (robot[index_bot] &gt;= rock[i]) &#123;</span><br><span class="line">            sum += rock[i];</span><br><span class="line">            index_bot--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>解題</category>
        <category>ZeroJudge</category>
      </categories>
      <tags>
        <tag>解題</tag>
        <tag>Zerojudge</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】j178: 手遊廣告 (Advertisement)</title>
    <url>/solved/ZeroJudge/j178/</url>
    <content><![CDATA[<h1 id="題目連結"><a href="#題目連結" class="headerlink" title="題目連結"></a>題目連結</h1><p><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWoxNzg=">j178: 手遊廣告 (Advertisement)<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a href="#我的想法" class="headerlink" title="我的想法"></a>我的想法</h1><p>水題。</p>
<h1 id="參考解答"><a href="#參考解答" class="headerlink" title="參考解答"></a>參考解答</h1><figure class="highlight cpp"><figcaption><span>j178</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> m, a;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; a;</span><br><span class="line">    <span class="type">int</span> T[m];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        cin &gt;&gt; T[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &lt;= T[i]) <span class="keyword">break</span>;</span><br><span class="line">        a += T[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>解題</category>
        <category>ZeroJudge</category>
      </categories>
      <tags>
        <tag>TOI</tag>
        <tag>解題</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】j179: 資料分類 (Classification)</title>
    <url>/solved/ZeroJudge/j179/</url>
    <content><![CDATA[<h1 id="題目連結"><a href="#題目連結" class="headerlink" title="題目連結"></a>題目連結</h1><p><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWoxNzk=">j179: 資料分類 (Classification)<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a href="#我的想法" class="headerlink" title="我的想法"></a>我的想法</h1><p>這題用到 <code>#include &lt;string&gt;</code> 裡的 <code>stoi()</code> 函式和 <code>to_string()</code> 函式。（如果你想自己寫出來這兩個函式也可以www）</p>
<p>然後其他照著題目敘述做應該可以吧！</p>
<h2 id="stoi-用法"><a href="#stoi-用法" class="headerlink" title="stoi() 用法"></a>stoi() 用法</h2><figure class="highlight cpp"><figcaption><span>use_stoi()</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str = <span class="string">&quot;01234&quot;</span>;</span><br><span class="line">    <span class="type">int</span> a = <span class="built_in">stoi</span>(str);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">輸出：</span><br><span class="line"><span class="attribute">a</span> <span class="operator">=</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure>

<h2 id="to-string-用法"><a href="#to-string-用法" class="headerlink" title="to_string() 用法"></a>to_string() 用法</h2><figure class="highlight cpp"><figcaption><span>use_to_string()</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">-1234</span>;</span><br><span class="line">    string str = <span class="built_in">to_string</span>(num);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str = &quot;</span> &lt;&lt; str &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">輸出：</span><br><span class="line"><span class="attribute">str</span> <span class="operator">=</span> -<span class="number">1234</span></span><br></pre></td></tr></table></figure>

<h1 id="參考解答"><a href="#參考解答" class="headerlink" title="參考解答"></a>參考解答</h1><figure class="highlight cpp"><figcaption><span>j179</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">solve</span><span class="params">(string num, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">stoi</span>(num), a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (len) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            a = n / <span class="number">100</span>;</span><br><span class="line">            b = n % <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">if</span> (a &gt; <span class="number">9</span>) a = (a / <span class="number">10</span>) * (a % <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span> (b &gt; <span class="number">9</span>) b = (b / <span class="number">10</span>) * (b % <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span> (a == <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">to_string</span>(b);</span><br><span class="line">            num = <span class="built_in">to_string</span>(a) + <span class="built_in">to_string</span>(b);</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            a = (n / <span class="number">100</span>) * ((n / <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">            b = ((n / <span class="number">10</span>) % <span class="number">10</span>) * (n % <span class="number">10</span>);</span><br><span class="line">            num = <span class="built_in">to_string</span>(a) + <span class="built_in">to_string</span>(b);</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            a = n / <span class="number">10</span>;</span><br><span class="line">            b = n % <span class="number">10</span>;</span><br><span class="line">            num = <span class="built_in">to_string</span>(a * b);</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string num;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (num.<span class="built_in">size</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">        num = <span class="built_in">solve</span>(num, num.<span class="built_in">size</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; num;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>解題</category>
        <category>ZeroJudge</category>
      </categories>
      <tags>
        <tag>TOI</tag>
        <tag>解題</tag>
        <tag>Zerojudge</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】j180: 戰備存糧 (Food)</title>
    <url>/solved/ZeroJudge/j180/</url>
    <content><![CDATA[<h1 id="題目連結"><a href="#題目連結" class="headerlink" title="題目連結"></a>題目連結</h1><p><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWoxODA=">j180: 戰備存糧 (Food)<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a href="#我的想法" class="headerlink" title="我的想法"></a>我的想法</h1><p>這題比較有趣，也有點像貪婪，涉及到每次食物下次減少時，倉庫的個數也要減少到最佳狀況（把倉庫減少當成守衛減少）。可以直接看我程式碼應該會比較好理解。</p>
<p>舉例</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>這筆測資食物總共有 12 個。</p>
<p>第一天減少 3 個（倉庫當前數量；守衛數量）：<code>12 - 3 = 9</code></p>
<p>確認剩下的食物是否可以塞進小於等於當前倉庫數量的大小（每次減少 -1）：<code>(3 - 1) * 4 = 8</code></p>
<p><code>9 &lt;= 8</code> 所以今天先不減小</p>
<p>第二天減少 3 個（倉庫當前數量；守衛數量）：<code>9 - 3 = 6</code></p>
<p>確認剩下的食物是否可以塞進小於等於當前倉庫數量的大小（每次減少 -1）：<code>(3 - 1) * 4 = 8</code></p>
<p><code>6 &lt;= 8</code> 所以今天倉庫數量減至 2</p>
<p>第三天減少 2 個（倉庫當前數量；守衛數量）：<code>6 - 2 = 4</code></p>
<p>確認剩下的食物是否可以塞進小於等於當前倉庫數量的大小（每次減少 -1）：<code>(2 - 1) * 4 = 4</code></p>
<p><code>4 &lt;= 4</code> 所以今天倉庫數量減至 1</p>
<p>最後四天相同做法（也可以判斷數量為 1 時，剩下食物個數加上前面 n 天之後，直接輸出 3 + 4 &#x3D; 7 天，不過應該不影響答案）</p>
<h1 id="參考解答"><a href="#參考解答" class="headerlink" title="參考解答"></a>參考解答</h1><figure class="highlight cpp"><figcaption><span>j180</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; depositary;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        cin &gt;&gt; b;</span><br><span class="line">        depositary.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(a, b));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; depositary.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> days = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> food = depositary[i].first * depositary[i].second;</span><br><span class="line">        <span class="keyword">while</span> (food != <span class="number">0</span>) &#123;</span><br><span class="line">            food -= depositary[i].first;</span><br><span class="line">            days++;</span><br><span class="line">            <span class="keyword">while</span> (food &lt;= (depositary[i].first - <span class="number">1</span>) * depositary[i].second) &#123;</span><br><span class="line">                depositary[i].first--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; days &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>解題</category>
        <category>ZeroJudge</category>
      </categories>
      <tags>
        <tag>TOI</tag>
        <tag>解題</tag>
        <tag>Zerojudge</tag>
      </tags>
  </entry>
  <entry>
    <title>【解題】j605. 1. 程式考試</title>
    <url>/solved/ZeroJudge/j605/</url>
    <content><![CDATA[<h1 id="題目連結"><a href="#題目連結" class="headerlink" title="題目連結"></a>題目連結</h1><p><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWo2MDU=">j605. 1. 程式考試<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="我的想法"><a href="#我的想法" class="headerlink" title="我的想法"></a>我的想法</h1><p>APCS 第一題純水題</p>
<h1 id="參考解答"><a href="#參考解答" class="headerlink" title="參考解答"></a>參考解答</h1><figure class="highlight cpp"><figcaption><span>j605</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> data[n][<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> max_num = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> max_num_time = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> error_times = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; data[i][<span class="number">0</span>] &gt;&gt; data[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (data[i][<span class="number">1</span>] &gt; max_num) &#123;</span><br><span class="line">            max_num_time = data[i][<span class="number">0</span>];</span><br><span class="line">            max_num = data[i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (data[i][<span class="number">1</span>] == <span class="number">-1</span>) &#123;</span><br><span class="line">            error_times++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> total = max_num - n - (error_times * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ((total &lt; <span class="number">0</span>) ? <span class="number">0</span> : total) &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; max_num_time &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>解題</category>
        <category>ZeroJudge</category>
      </categories>
      <tags>
        <tag>APCS</tag>
        <tag>解題</tag>
        <tag>Zerojudge</tag>
      </tags>
  </entry>
</search>
